
autopilot_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  00000356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a67  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000511  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057f  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043b  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ba  00000000  00000000  00001ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000024ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	d7 c0       	rjmp	.+430    	; 0x1d2 <__vector_17>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ac 36       	cpi	r26, 0x6C	; 108
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	33 d1       	rcall	.+614    	; 0x2aa <main>
  44:	4c c1       	rjmp	.+664    	; 0x2de <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <error_init>:
static uint8_t error_green_led_pin;
static uint8_t error_red_led_pin;

void error_init(ports port, uint8_t green_led_pin, uint8_t red_led_pin)
{
	error_port = port;
  48:	80 93 62 00 	sts	0x0062, r24
	error_red_led_pin = red_led_pin;
  4c:	40 93 60 00 	sts	0x0060, r20
	error_green_led_pin = green_led_pin;
  50:	60 93 61 00 	sts	0x0061, r22
	
	// clear the io required
	IO_write(error_port,error_green_led_pin,SET);		// green light
  54:	41 e0       	ldi	r20, 0x01	; 1
  56:	25 d0       	rcall	.+74     	; 0xa2 <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);		// red light
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	60 91 60 00 	lds	r22, 0x0060
  5e:	80 91 62 00 	lds	r24, 0x0062
  62:	1f d0       	rcall	.+62     	; 0xa2 <IO_write>
  64:	08 95       	ret

00000066 <error_handler>:
}


void error_handler(uint8_t status)
{
  66:	cf 93       	push	r28
  68:	c8 2f       	mov	r28, r24
	// clear the io required
	IO_write(error_port,error_green_led_pin,CLEAR);
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	60 91 61 00 	lds	r22, 0x0061
  70:	80 91 62 00 	lds	r24, 0x0062
  74:	16 d0       	rcall	.+44     	; 0xa2 <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	60 91 60 00 	lds	r22, 0x0060
  7c:	80 91 62 00 	lds	r24, 0x0062
  80:	10 d0       	rcall	.+32     	; 0xa2 <IO_write>

	if(status)
  82:	cc 23       	and	r28, r28
  84:	31 f0       	breq	.+12     	; 0x92 <error_handler+0x2c>
	{
		// error has been generated stay in this while loop
		while(1)
		{
			IO_flash(error_port,error_red_led_pin);
  86:	60 91 60 00 	lds	r22, 0x0060
  8a:	80 91 62 00 	lds	r24, 0x0062
  8e:	4e d0       	rcall	.+156    	; 0x12c <IO_flash>
		}
  90:	fa cf       	rjmp	.-12     	; 0x86 <error_handler+0x20>
	}
	else
	{
		// no error generated
		IO_write(error_port,error_green_led_pin,SET);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 91 61 00 	lds	r22, 0x0061
  98:	80 91 62 00 	lds	r24, 0x0062
  9c:	02 d0       	rcall	.+4      	; 0xa2 <IO_write>
	}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <IO_write>:
				state specifies whether we want to set the pin high or low.
Note:			None
*****************************************************************************/
void IO_write(ports port, uint8_t pinnumber,uint8_t state)
{
	switch (port)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	c9 f0       	breq	.+50     	; 0xd8 <IO_write+0x36>
  a6:	18 f0       	brcs	.+6      	; 0xae <IO_write+0xc>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	59 f1       	breq	.+86     	; 0x102 <IO_write+0x60>
  ac:	08 95       	ret
	{
		case PORT_B:
		{
			#ifdef PORTB
			//set the pinnumber as output
			DDRB |= (1 << pinnumber);
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <IO_write+0x18>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <IO_write+0x14>
  be:	28 2b       	or	r18, r24
  c0:	27 bb       	out	0x17, r18	; 23
			if(state)
  c2:	44 23       	and	r20, r20
  c4:	21 f0       	breq	.+8      	; 0xce <IO_write+0x2c>
			{
				PORTB |= (1 << pinnumber);
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	89 2b       	or	r24, r25
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<< pinnumber);
  ce:	98 b3       	in	r25, 0x18	; 24
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	08 95       	ret
		}
		case PORT_C:
		{
			#ifdef PORTC
			//set the pinnumber as output
			DDRC |= (1 << pinnumber);
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <IO_write+0x42>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <IO_write+0x3e>
  e8:	28 2b       	or	r18, r24
  ea:	24 bb       	out	0x14, r18	; 20
			if(state)
  ec:	44 23       	and	r20, r20
  ee:	21 f0       	breq	.+8      	; 0xf8 <IO_write+0x56>
			{
				PORTC |= (1 << pinnumber);
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	89 2b       	or	r24, r25
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<< pinnumber);
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	80 95       	com	r24
  fc:	89 23       	and	r24, r25
  fe:	85 bb       	out	0x15, r24	; 21
 100:	08 95       	ret
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set the pinnumber as output
			DDRD |= (1 << pinnumber);
 102:	21 b3       	in	r18, 0x11	; 17
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <IO_write+0x6c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <IO_write+0x68>
 112:	28 2b       	or	r18, r24
 114:	21 bb       	out	0x11, r18	; 17
			if(state)
 116:	44 23       	and	r20, r20
 118:	21 f0       	breq	.+8      	; 0x122 <IO_write+0x80>
			{
				PORTD |= (1 << pinnumber);
 11a:	92 b3       	in	r25, 0x12	; 18
 11c:	89 2b       	or	r24, r25
 11e:	82 bb       	out	0x12, r24	; 18
 120:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<< pinnumber);
 122:	92 b3       	in	r25, 0x12	; 18
 124:	80 95       	com	r24
 126:	89 23       	and	r24, r25
 128:	82 bb       	out	0x12, r24	; 18
 12a:	08 95       	ret

0000012c <IO_flash>:
Purpose:		Flashes the IO of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash(ports port, uint8_t pinnumber)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	c8 2f       	mov	r28, r24
 132:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	b5 df       	rcall	.-150    	; 0xa2 <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f e7       	ldi	r18, 0x7F	; 127
 13a:	8a e1       	ldi	r24, 0x1A	; 26
 13c:	96 e0       	ldi	r25, 0x06	; 6
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <IO_flash+0x12>
 146:	00 c0       	rjmp	.+0      	; 0x148 <IO_flash+0x1c>
 148:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, SET);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	6d 2f       	mov	r22, r29
 14e:	8c 2f       	mov	r24, r28
 150:	a8 df       	rcall	.-176    	; 0xa2 <IO_write>
 152:	2f e7       	ldi	r18, 0x7F	; 127
 154:	8a e1       	ldi	r24, 0x1A	; 26
 156:	96 e0       	ldi	r25, 0x06	; 6
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <IO_flash+0x2c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <IO_flash+0x36>
 162:	00 00       	nop
	_delay_ms(2000);
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <IO_flash_slow>:
Purpose:		Flashes the IO slowely of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash_slow(ports port, uint8_t pinnumber)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	c8 2f       	mov	r28, r24
 170:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	96 df       	rcall	.-212    	; 0xa2 <IO_write>
 176:	2f e3       	ldi	r18, 0x3F	; 63
 178:	82 e4       	ldi	r24, 0x42	; 66
 17a:	9f e0       	ldi	r25, 0x0F	; 15
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <IO_flash_slow+0x12>
 184:	00 c0       	rjmp	.+0      	; 0x186 <IO_flash_slow+0x1c>
 186:	00 00       	nop
	_delay_ms(5000);
	IO_write(port, pinnumber, SET);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	6d 2f       	mov	r22, r29
 18c:	8c 2f       	mov	r24, r28
 18e:	89 df       	rcall	.-238    	; 0xa2 <IO_write>
 190:	2f e3       	ldi	r18, 0x3F	; 63
 192:	82 e4       	ldi	r24, 0x42	; 66
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <IO_flash_slow+0x2c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <IO_flash_slow+0x36>
 1a0:	00 00       	nop
	_delay_ms(5000);
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <twi_slave_init>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_init(uint8_t slaveaddress)
{	
	TWAR = (slaveaddress<<1);
 1a8:	88 0f       	add	r24, r24
 1aa:	82 b9       	out	0x02, r24	; 2
																						//Load the slave address
	TWCR = (1<<TWEN)|														//Enables TWI interface
 1ac:	85 ec       	ldi	r24, 0xC5	; 197
 1ae:	86 bf       	out	0x36, r24	; 54
Returns:		None
Note:			None
****************************************************************************/
static void flagwait(void)
{
	while(!(TWCR &(1<<TWINT)));
 1b0:	06 b6       	in	r0, 0x36	; 54
 1b2:	07 fe       	sbrs	r0, 7
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <twi_slave_init+0x8>
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);														//Enable twi
																			//Wait till flag is cleared	
	flagwait();
}
 1b6:	08 95       	ret

000001b8 <twi_read_data>:
Note:			None
****************************************************************************/
uint8_t twi_read_data(void)
{
	uint8_t rxdata = 0;
	rxdata = TWDR;
 1b8:	83 b1       	in	r24, 0x03	; 3
		
	return rxdata;
}
 1ba:	08 95       	ret

000001bc <init_variables>:
	sei();
}

static void init_variables(void)
{
	memset(messagePacketHeader.data, 0, sizeof(messagePacketHeader.data));
 1bc:	10 92 66 00 	sts	0x0066, r1
 1c0:	10 92 67 00 	sts	0x0067, r1
 1c4:	10 92 68 00 	sts	0x0068, r1
	msg_count = 0;
 1c8:	10 92 6b 00 	sts	0x006B, r1
	syncByteFound = 0;
 1cc:	10 92 69 00 	sts	0x0069, r1
 1d0:	08 95       	ret

000001d2 <__vector_17>:
static uint8_t recieve_message(void);
static void init_variables(void);
static uint8_t send_message(uint8_t bytes[]);

ISR(TWI_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	cf 93       	push	r28
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	cli();
 1f6:	f8 94       	cli
	tw_status = (TWSR & MASK);
 1f8:	81 b1       	in	r24, 0x01	; 1
 1fa:	88 7f       	andi	r24, 0xF8	; 248
 1fc:	80 93 6a 00 	sts	0x006A, r24
	
	switch(tw_status)
 200:	80 36       	cpi	r24, 0x60	; 96
 202:	49 f0       	breq	.+18     	; 0x216 <__vector_17+0x44>
 204:	18 f4       	brcc	.+6      	; 0x20c <__vector_17+0x3a>
 206:	88 23       	and	r24, r24
 208:	99 f1       	breq	.+102    	; 0x270 <__vector_17+0x9e>
 20a:	30 c0       	rjmp	.+96     	; 0x26c <__vector_17+0x9a>
 20c:	80 38       	cpi	r24, 0x80	; 128
 20e:	39 f0       	breq	.+14     	; 0x21e <__vector_17+0x4c>
 210:	88 38       	cpi	r24, 0x88	; 136
 212:	41 f1       	breq	.+80     	; 0x264 <__vector_17+0x92>
 214:	2b c0       	rjmp	.+86     	; 0x26c <__vector_17+0x9a>
	{
		/*******************************WRITE MODE**************************************/	
		case SLAVE_SLA_W_ACK_TX:
		{
			init_variables();
 216:	d2 df       	rcall	.-92     	; 0x1bc <init_variables>
			TWI_SendACK();
 218:	85 ec       	ldi	r24, 0xC5	; 197
 21a:	86 bf       	out	0x36, r24	; 54
			break;
 21c:	29 c0       	rjmp	.+82     	; 0x270 <__vector_17+0x9e>
static uint8_t recieve_message(void)
{
	uint8_t status = 0;
	
	//Check to see if the first rx data is the sync bit
	if((twi_read_data() == SYNCBIT) && (msg_count == 0) && (!syncByteFound))
 21e:	cc df       	rcall	.-104    	; 0x1b8 <twi_read_data>
 220:	86 3b       	cpi	r24, 0xB6	; 182
 222:	61 f4       	brne	.+24     	; 0x23c <__vector_17+0x6a>
 224:	80 91 6b 00 	lds	r24, 0x006B
 228:	81 11       	cpse	r24, r1
 22a:	08 c0       	rjmp	.+16     	; 0x23c <__vector_17+0x6a>
 22c:	80 91 69 00 	lds	r24, 0x0069
 230:	81 11       	cpse	r24, r1
 232:	26 c0       	rjmp	.+76     	; 0x280 <__vector_17+0xae>
	{
		syncByteFound = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 69 00 	sts	0x0069, r24
 23a:	1c c0       	rjmp	.+56     	; 0x274 <__vector_17+0xa2>
		status = 1;
	}
	//sync bit found ready to rx data
	else if(syncByteFound)
 23c:	80 91 69 00 	lds	r24, 0x0069
 240:	88 23       	and	r24, r24
 242:	d9 f0       	breq	.+54     	; 0x27a <__vector_17+0xa8>
	{
		if(msg_count < MSG_SIZE)
 244:	c0 91 6b 00 	lds	r28, 0x006B
 248:	c3 30       	cpi	r28, 0x03	; 3
 24a:	b8 f4       	brcc	.+46     	; 0x27a <__vector_17+0xa8>
		{
			messagePacketHeader.data[msg_count] = twi_read_data();
 24c:	b5 df       	rcall	.-150    	; 0x1b8 <twi_read_data>
 24e:	ec 2f       	mov	r30, r28
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ed 59       	subi	r30, 0x9D	; 157
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	83 83       	std	Z+3, r24	; 0x03
			msg_count++;
 258:	80 91 6b 00 	lds	r24, 0x006B
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	80 93 6b 00 	sts	0x006B, r24
 262:	08 c0       	rjmp	.+16     	; 0x274 <__vector_17+0xa2>
			}
			break;
		}
		case SLAVE_DATA_RX_NACK_TX:
		{
			init_variables();
 264:	ab df       	rcall	.-170    	; 0x1bc <init_variables>
			error_handler(SET);
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	fe de       	rcall	.-516    	; 0x66 <error_handler>
 26a:	02 c0       	rjmp	.+4      	; 0x270 <__vector_17+0x9e>
			//twi_slave_init(AUTOPILOT_ADDRESS);	
			break;
		}
		default:
		{
			TWI_SendTransmit();
 26c:	85 e8       	ldi	r24, 0x85	; 133
 26e:	86 bf       	out	0x36, r24	; 54
			break;
		}
	}
	sei();
 270:	78 94       	sei
 272:	09 c0       	rjmp	.+18     	; 0x286 <__vector_17+0xb4>
		}	
		case SLAVE_DATA_RX_ACK_TX:
		{
			if(recieve_message())
			{
				TWI_SendACK();
 274:	85 ec       	ldi	r24, 0xC5	; 197
 276:	86 bf       	out	0x36, r24	; 54
 278:	fb cf       	rjmp	.-10     	; 0x270 <__vector_17+0x9e>
			}
			else
			{
				TWI_SendNACK();
 27a:	85 e8       	ldi	r24, 0x85	; 133
 27c:	86 bf       	out	0x36, r24	; 54
 27e:	f8 cf       	rjmp	.-16     	; 0x270 <__vector_17+0x9e>
		status = 1;
	}
	//sync bit found ready to rx data
	else if(syncByteFound)
	{
		if(msg_count < MSG_SIZE)
 280:	c0 91 6b 00 	lds	r28, 0x006B
 284:	e3 cf       	rjmp	.-58     	; 0x24c <__vector_17+0x7a>
			TWI_SendTransmit();
			break;
		}
	}
	sei();
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	cf 91       	pop	r28
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <main>:
	return 	status;
}

int main(void)
{	
	sei();
 2aa:	78 94       	sei
	error_init(ERROR_PORT, ERROR_LED_GREEN_PIN, ERROR_LED_RED_PIN);
 2ac:	47 e0       	ldi	r20, 0x07	; 7
 2ae:	66 e0       	ldi	r22, 0x06	; 6
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	ca de       	rcall	.-620    	; 0x48 <error_init>
	twi_slave_init(AUTOPILOT_ADDRESS);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	78 df       	rcall	.-272    	; 0x1a8 <twi_slave_init>
	
	while (1)
	{
		if((messagePacketHeader.data[0] == SET_HEADING) && (messagePacketHeader.data[1] == 0x01) && (messagePacketHeader.data[2] == 0x01))
 2b8:	c3 e6       	ldi	r28, 0x63	; 99
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	51 f4       	brne	.+20     	; 0x2d6 <main+0x2c>
 2c2:	8c 81       	ldd	r24, Y+4	; 0x04
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	39 f4       	brne	.+14     	; 0x2d6 <main+0x2c>
 2c8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <main+0x2c>
		{
			IO_flash_slow(ERROR_PORT,ERROR_LED_GREEN_PIN);
 2ce:	66 e0       	ldi	r22, 0x06	; 6
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	4b df       	rcall	.-362    	; 0x16a <IO_flash_slow>
 2d4:	f3 cf       	rjmp	.-26     	; 0x2bc <main+0x12>
		}
		else
		{
			IO_flash(ERROR_PORT,ERROR_LED_GREEN_PIN);
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	28 df       	rcall	.-432    	; 0x12c <IO_flash>
 2dc:	ef cf       	rjmp	.-34     	; 0x2bc <main+0x12>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
