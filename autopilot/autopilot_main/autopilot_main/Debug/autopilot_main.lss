
autopilot_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e5  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000462  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000534  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000430  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	97 c0       	rjmp	.+302    	; 0x152 <__vector_17>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	d1 d0       	rcall	.+418    	; 0x1e6 <main>
  44:	e8 c0       	rjmp	.+464    	; 0x216 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <error_init>:
static uint8_t error_green_led_pin;
static uint8_t error_red_led_pin;

void error_init(ports port, uint8_t green_led_pin, uint8_t red_led_pin)
{
	error_port = port;
  48:	80 93 62 00 	sts	0x0062, r24
	error_red_led_pin = red_led_pin;
  4c:	40 93 60 00 	sts	0x0060, r20
	error_green_led_pin = green_led_pin;
  50:	60 93 61 00 	sts	0x0061, r22
	
	// clear the io required
	IO_write(error_port,error_green_led_pin,SET);		// green light
  54:	41 e0       	ldi	r20, 0x01	; 1
  56:	07 d0       	rcall	.+14     	; 0x66 <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);		// red light
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	60 91 60 00 	lds	r22, 0x0060
  5e:	80 91 62 00 	lds	r24, 0x0062
  62:	01 d0       	rcall	.+2      	; 0x66 <IO_write>
  64:	08 95       	ret

00000066 <IO_write>:
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set pin as input
			DDRD &= ~(1 << pinnumber);
  66:	81 30       	cpi	r24, 0x01	; 1
  68:	c9 f0       	breq	.+50     	; 0x9c <IO_write+0x36>
  6a:	18 f0       	brcs	.+6      	; 0x72 <IO_write+0xc>
			//enable pull up resistor
			PORTD |= (1 << pinnumber);
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	59 f1       	breq	.+86     	; 0xc6 <IO_write+0x60>
  70:	08 95       	ret
			//read the value required
			pinvalue = (1 << pinnumber)&(PIND);
  72:	27 b3       	in	r18, 0x17	; 23
  74:	81 e0       	ldi	r24, 0x01	; 1
			#endif					
			break;
  76:	90 e0       	ldi	r25, 0x00	; 0
				pinnumber specifies which pin we want to address (to read)
Returns:		returns a 1 or 0 depending on the state of the pin read
*****************************************************************************/
uint8_t IO_read(ports port, uint8_t pinnumber)
{
	uint8_t pinvalue = 0;
  78:	02 c0       	rjmp	.+4      	; 0x7e <IO_write+0x18>
			break;
		}
	}
	
	return pinvalue;
}
  7a:	88 0f       	add	r24, r24
	{
		case PORT_B:
		{
			#ifdef PORTB
			//set the pinnumber as output
			DDRB |= (1 << pinnumber);
  7c:	99 1f       	adc	r25, r25
  7e:	6a 95       	dec	r22
  80:	e2 f7       	brpl	.-8      	; 0x7a <IO_write+0x14>
  82:	28 2b       	or	r18, r24
  84:	27 bb       	out	0x17, r18	; 23
			if(state)
  86:	44 23       	and	r20, r20
  88:	21 f0       	breq	.+8      	; 0x92 <IO_write+0x2c>
			{
				PORTB |= (1 << pinnumber);
  8a:	98 b3       	in	r25, 0x18	; 24
  8c:	89 2b       	or	r24, r25
  8e:	88 bb       	out	0x18, r24	; 24
  90:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<< pinnumber);
  92:	98 b3       	in	r25, 0x18	; 24
  94:	80 95       	com	r24
  96:	89 23       	and	r24, r25
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret
		}
		case PORT_C:
		{
			#ifdef PORTC
			//set the pinnumber as output
			DDRC |= (1 << pinnumber);
  9c:	24 b3       	in	r18, 0x14	; 20
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <IO_write+0x42>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <IO_write+0x3e>
  ac:	28 2b       	or	r18, r24
  ae:	24 bb       	out	0x14, r18	; 20
			if(state)
  b0:	44 23       	and	r20, r20
  b2:	21 f0       	breq	.+8      	; 0xbc <IO_write+0x56>
			{
				PORTC |= (1 << pinnumber);
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	89 2b       	or	r24, r25
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<< pinnumber);
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	80 95       	com	r24
  c0:	89 23       	and	r24, r25
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	08 95       	ret
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set the pinnumber as output
			DDRD |= (1 << pinnumber);
  c6:	21 b3       	in	r18, 0x11	; 17
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <IO_write+0x6c>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <IO_write+0x68>
  d6:	28 2b       	or	r18, r24
  d8:	21 bb       	out	0x11, r18	; 17
			if(state)
  da:	44 23       	and	r20, r20
  dc:	21 f0       	breq	.+8      	; 0xe6 <IO_write+0x80>
			{
				PORTD |= (1 << pinnumber);
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	89 2b       	or	r24, r25
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<< pinnumber);
  e6:	92 b3       	in	r25, 0x12	; 18
  e8:	80 95       	com	r24
  ea:	89 23       	and	r24, r25
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	08 95       	ret

000000f0 <IO_flash>:
Purpose:		Flashes the IO of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash(ports port, uint8_t pinnumber)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	c8 2f       	mov	r28, r24
  f6:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	b5 df       	rcall	.-150    	; 0x66 <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f e7       	ldi	r18, 0x7F	; 127
  fe:	8a e1       	ldi	r24, 0x1A	; 26
 100:	96 e0       	ldi	r25, 0x06	; 6
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <IO_flash+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <IO_flash+0x1c>
 10c:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, SET);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	6d 2f       	mov	r22, r29
 112:	8c 2f       	mov	r24, r28
 114:	a8 df       	rcall	.-176    	; 0x66 <IO_write>
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	8a e1       	ldi	r24, 0x1A	; 26
 11a:	96 e0       	ldi	r25, 0x06	; 6
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <IO_flash+0x2c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <IO_flash+0x36>
 126:	00 00       	nop
	_delay_ms(2000);
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <twi_slave_init>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_init(uint8_t slaveaddress)
{	
	TWAR = (slaveaddress<<1);
 12e:	88 0f       	add	r24, r24
 130:	82 b9       	out	0x02, r24	; 2
																						//Load the slave address
	TWCR = (1<<TWEN)|														//Enables TWI interface
 132:	85 ec       	ldi	r24, 0xC5	; 197
 134:	86 bf       	out	0x36, r24	; 54
Returns:		None
Note:			None
****************************************************************************/
static void flagwait(void)
{
	while(!(TWCR &(1<<TWINT)));
 136:	06 b6       	in	r0, 0x36	; 54
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <twi_slave_init+0x8>
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);														//Enable twi
																			//Wait till flag is cleared	
	flagwait();
}
 13c:	08 95       	ret

0000013e <twi_slave_tx_ack>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_tx_ack(void)
{	
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 13e:	85 ec       	ldi	r24, 0xC5	; 197
 140:	86 bf       	out	0x36, r24	; 54
 142:	08 95       	ret

00000144 <twi_slave_tx_nack>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_tx_nack(void)
{		
	TWCR = (1<<TWINT)|(1<<TWEN)|(0<<TWEA)|(1<<TWIE);											
 144:	85 e8       	ldi	r24, 0x85	; 133
 146:	86 bf       	out	0x36, r24	; 54
 148:	08 95       	ret

0000014a <twi_clear_twint>:
Returns:		None
Note:			None
****************************************************************************/
void twi_clear_twint(void)
{
	TWCR |=(1<<TWINT);
 14a:	86 b7       	in	r24, 0x36	; 54
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	86 bf       	out	0x36, r24	; 54
 150:	08 95       	ret

00000152 <__vector_17>:
uint8_t tw_status;
uint8_t data_rx = 0;


ISR(TWI_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	cli();
 174:	f8 94       	cli
	tw_status = (TWSR & MASK);
 176:	81 b1       	in	r24, 0x01	; 1
 178:	88 7f       	andi	r24, 0xF8	; 248
 17a:	80 93 67 00 	sts	0x0067, r24
	
	switch(tw_status)
 17e:	80 36       	cpi	r24, 0x60	; 96
 180:	29 f0       	breq	.+10     	; 0x18c <__vector_17+0x3a>
 182:	80 38       	cpi	r24, 0x80	; 128
 184:	39 f0       	breq	.+14     	; 0x194 <__vector_17+0x42>
 186:	81 11       	cpse	r24, r1
 188:	1b c0       	rjmp	.+54     	; 0x1c0 <__vector_17+0x6e>
 18a:	17 c0       	rjmp	.+46     	; 0x1ba <__vector_17+0x68>
	{	
		case SLAVE_SLA_W_ACK_TX:
		{
			data_rx_count = 0;
 18c:	10 92 63 00 	sts	0x0063, r1
			//twi_slave_tx_ack();
			twi_clear_twint();
 190:	dc df       	rcall	.-72     	; 0x14a <twi_clear_twint>
			break;
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <__vector_17+0x70>
		}	
		case SLAVE_DATA_RX_ACK_TRANSMITTED:
		{
			if(data_rx_count < DATA_BUFFER_SIZE)
 194:	80 91 63 00 	lds	r24, 0x0063
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	58 f4       	brcc	.+22     	; 0x1b2 <__vector_17+0x60>
			{
				databuffer[data_rx_count] = TWDR;
 19c:	93 b1       	in	r25, 0x03	; 3
 19e:	e8 2f       	mov	r30, r24
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ec 59       	subi	r30, 0x9C	; 156
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	90 83       	st	Z, r25
				data_rx_count++;
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 63 00 	sts	0x0063, r24
				twi_slave_tx_ack();
 1ae:	c7 df       	rcall	.-114    	; 0x13e <twi_slave_tx_ack>
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <__vector_17+0x70>
			}
			else
			{
				data_rx_count = 0;
 1b2:	10 92 63 00 	sts	0x0063, r1
				twi_slave_tx_nack();
 1b6:	c6 df       	rcall	.-116    	; 0x144 <twi_slave_tx_nack>
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <__vector_17+0x70>
			}
			break;
		}
		case 0x00:
		{
			twi_slave_init(AUTOPILOT_ADDRESS);	
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	b8 df       	rcall	.-144    	; 0x12e <twi_slave_init>
			break;
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__vector_17+0x70>
		}
		default:
		{
			twi_clear_twint();
 1c0:	c4 df       	rcall	.-120    	; 0x14a <twi_clear_twint>
			break;
		}
	}
	sei();
 1c2:	78 94       	sei
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <main>:

int main(void)
{	
	sei();
 1e6:	78 94       	sei
	error_init(ERROR_PORT, ERROR_LED_GREEN_PIN, ERROR_LED_RED_PIN);
 1e8:	47 e0       	ldi	r20, 0x07	; 7
 1ea:	66 e0       	ldi	r22, 0x06	; 6
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	2c df       	rcall	.-424    	; 0x48 <error_init>
	twi_slave_init(AUTOPILOT_ADDRESS);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	9d df       	rcall	.-198    	; 0x12e <twi_slave_init>

	while (1)
	{
		if((databuffer[0] == 0xFF) && (databuffer[1] == 0x01))
 1f4:	c4 e6       	ldi	r28, 0x64	; 100
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	88 81       	ld	r24, Y
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	41 f4       	brne	.+16     	; 0x20e <main+0x28>
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	29 f4       	brne	.+10     	; 0x20e <main+0x28>
		{
			IO_write(ERROR_PORT,ERROR_LED_GREEN_PIN,SET);
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	66 e0       	ldi	r22, 0x06	; 6
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	2d df       	rcall	.-422    	; 0x66 <IO_write>
 20c:	f5 cf       	rjmp	.-22     	; 0x1f8 <main+0x12>
		}
		else
		{
			IO_flash(ERROR_PORT,ERROR_LED_GREEN_PIN);
 20e:	66 e0       	ldi	r22, 0x06	; 6
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	6e df       	rcall	.-292    	; 0xf0 <IO_flash>
 214:	f1 cf       	rjmp	.-30     	; 0x1f8 <main+0x12>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
