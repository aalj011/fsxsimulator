
autopilot_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800060  00800060  00000322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d8  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a9  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c4  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040c  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045d  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000023a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	c8 c0       	rjmp	.+400    	; 0x1b4 <__vector_17>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 3d       	cpi	r26, 0xD1	; 209
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	18 d1       	rcall	.+560    	; 0x274 <main>
  44:	32 c1       	rjmp	.+612    	; 0x2aa <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <error_init>:
static uint8_t error_green_led_pin;
static uint8_t error_red_led_pin;

void error_init(ports port, uint8_t green_led_pin, uint8_t red_led_pin)
{
	error_port = port;
  48:	80 93 62 00 	sts	0x0062, r24
	error_red_led_pin = red_led_pin;
  4c:	40 93 60 00 	sts	0x0060, r20
	error_green_led_pin = green_led_pin;
  50:	60 93 61 00 	sts	0x0061, r22
	
	// clear the io required
	IO_write(error_port,error_green_led_pin,SET);		// green light
  54:	41 e0       	ldi	r20, 0x01	; 1
  56:	25 d0       	rcall	.+74     	; 0xa2 <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);		// red light
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	60 91 60 00 	lds	r22, 0x0060
  5e:	80 91 62 00 	lds	r24, 0x0062
  62:	1f d0       	rcall	.+62     	; 0xa2 <IO_write>
  64:	08 95       	ret

00000066 <error_handler>:
}


void error_handler(uint8_t status)
{
  66:	cf 93       	push	r28
  68:	c8 2f       	mov	r28, r24
	// clear the io required
	IO_write(error_port,error_green_led_pin,CLEAR);
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	60 91 61 00 	lds	r22, 0x0061
  70:	80 91 62 00 	lds	r24, 0x0062
  74:	16 d0       	rcall	.+44     	; 0xa2 <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	60 91 60 00 	lds	r22, 0x0060
  7c:	80 91 62 00 	lds	r24, 0x0062
  80:	10 d0       	rcall	.+32     	; 0xa2 <IO_write>

	if(status)
  82:	cc 23       	and	r28, r28
  84:	31 f0       	breq	.+12     	; 0x92 <error_handler+0x2c>
	{
		// error has been generated stay in this while loop
		while(1)
		{
			IO_flash(error_port,error_red_led_pin);
  86:	60 91 60 00 	lds	r22, 0x0060
  8a:	80 91 62 00 	lds	r24, 0x0062
  8e:	4e d0       	rcall	.+156    	; 0x12c <IO_flash>
		}
  90:	fa cf       	rjmp	.-12     	; 0x86 <error_handler+0x20>
	}
	else
	{
		// no error generated
		IO_write(error_port,error_green_led_pin,SET);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 91 61 00 	lds	r22, 0x0061
  98:	80 91 62 00 	lds	r24, 0x0062
  9c:	02 d0       	rcall	.+4      	; 0xa2 <IO_write>
	}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <IO_write>:
			break;
		}
	}
	
	return pinvalue;
}
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	c9 f0       	breq	.+50     	; 0xd8 <IO_write+0x36>
  a6:	18 f0       	brcs	.+6      	; 0xae <IO_write+0xc>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	59 f1       	breq	.+86     	; 0x102 <IO_write+0x60>
  ac:	08 95       	ret
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <IO_write+0x18>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <IO_write+0x14>
  be:	28 2b       	or	r18, r24
  c0:	27 bb       	out	0x17, r18	; 23
  c2:	44 23       	and	r20, r20
  c4:	21 f0       	breq	.+8      	; 0xce <IO_write+0x2c>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	89 2b       	or	r24, r25
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	08 95       	ret
  ce:	98 b3       	in	r25, 0x18	; 24
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	08 95       	ret
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <IO_write+0x42>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <IO_write+0x3e>
  e8:	28 2b       	or	r18, r24
  ea:	24 bb       	out	0x14, r18	; 20
  ec:	44 23       	and	r20, r20
  ee:	21 f0       	breq	.+8      	; 0xf8 <IO_write+0x56>
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	89 2b       	or	r24, r25
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	08 95       	ret
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	80 95       	com	r24
  fc:	89 23       	and	r24, r25
  fe:	85 bb       	out	0x15, r24	; 21
 100:	08 95       	ret
 102:	21 b3       	in	r18, 0x11	; 17
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <IO_write+0x6c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <IO_write+0x68>
 112:	28 2b       	or	r18, r24
 114:	21 bb       	out	0x11, r18	; 17
 116:	44 23       	and	r20, r20
 118:	21 f0       	breq	.+8      	; 0x122 <IO_write+0x80>
 11a:	92 b3       	in	r25, 0x12	; 18
 11c:	89 2b       	or	r24, r25
 11e:	82 bb       	out	0x12, r24	; 18
 120:	08 95       	ret
 122:	92 b3       	in	r25, 0x12	; 18
 124:	80 95       	com	r24
 126:	89 23       	and	r24, r25
 128:	82 bb       	out	0x12, r24	; 18
 12a:	08 95       	ret

0000012c <IO_flash>:
Purpose:		Flashes the IO of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash(ports port, uint8_t pinnumber)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	c8 2f       	mov	r28, r24
 132:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	b5 df       	rcall	.-150    	; 0xa2 <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f e7       	ldi	r18, 0x7F	; 127
 13a:	8a e1       	ldi	r24, 0x1A	; 26
 13c:	96 e0       	ldi	r25, 0x06	; 6
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <IO_flash+0x12>
 146:	00 c0       	rjmp	.+0      	; 0x148 <IO_flash+0x1c>
 148:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, SET);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	6d 2f       	mov	r22, r29
 14e:	8c 2f       	mov	r24, r28
 150:	a8 df       	rcall	.-176    	; 0xa2 <IO_write>
 152:	2f e7       	ldi	r18, 0x7F	; 127
 154:	8a e1       	ldi	r24, 0x1A	; 26
 156:	96 e0       	ldi	r25, 0x06	; 6
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <IO_flash+0x2c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <IO_flash+0x36>
 162:	00 00       	nop
	_delay_ms(2000);
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <IO_flash_slow>:
Purpose:		Flashes the IO slowely of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash_slow(ports port, uint8_t pinnumber)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	c8 2f       	mov	r28, r24
 170:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	96 df       	rcall	.-212    	; 0xa2 <IO_write>
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	84 e8       	ldi	r24, 0x84	; 132
 17a:	9e e1       	ldi	r25, 0x1E	; 30
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <IO_flash_slow+0x12>
 184:	00 c0       	rjmp	.+0      	; 0x186 <IO_flash_slow+0x1c>
 186:	00 00       	nop
	_delay_ms(10000);
	IO_write(port, pinnumber, SET);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	6d 2f       	mov	r22, r29
 18c:	8c 2f       	mov	r24, r28
 18e:	89 df       	rcall	.-238    	; 0xa2 <IO_write>
 190:	2f e7       	ldi	r18, 0x7F	; 127
 192:	84 e8       	ldi	r24, 0x84	; 132
 194:	9e e1       	ldi	r25, 0x1E	; 30
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <IO_flash_slow+0x2c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <IO_flash_slow+0x36>
 1a0:	00 00       	nop
	_delay_ms(10000);
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <TWI_EXT_SlaveLoadAddress>:
Returns:		None
Note:			None
****************************************************************************/
void TWI_EXT_SlaveLoadAddress(uint8_t slaveaddress)
{	
	TWAR = (slaveaddress<<1);																				//Load the slave addres
 1a8:	88 0f       	add	r24, r24
 1aa:	82 b9       	out	0x02, r24	; 2
 1ac:	08 95       	ret

000001ae <TWI_EXT_SlaveInit>:
Returns:		None
Note:			None
****************************************************************************/
void TWI_EXT_SlaveInit(void)
{
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 1ae:	85 e4       	ldi	r24, 0x45	; 69
 1b0:	86 bf       	out	0x36, r24	; 54
 1b2:	08 95       	ret

000001b4 <__vector_17>:
static sMessagePacket messagePacketHeader = {0};

static void init_Variables(void);

ISR(TWI_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	cli();
 1d6:	f8 94       	cli
	switch(TW_STATUS)
 1d8:	81 b1       	in	r24, 0x01	; 1
 1da:	88 7f       	andi	r24, 0xF8	; 248
 1dc:	80 3a       	cpi	r24, 0xA0	; 160
 1de:	b1 f1       	breq	.+108    	; 0x24c <__vector_17+0x98>
 1e0:	38 f4       	brcc	.+14     	; 0x1f0 <__vector_17+0x3c>
 1e2:	80 38       	cpi	r24, 0x80	; 128
 1e4:	c9 f0       	breq	.+50     	; 0x218 <__vector_17+0x64>
 1e6:	88 38       	cpi	r24, 0x88	; 136
 1e8:	29 f1       	breq	.+74     	; 0x234 <__vector_17+0x80>
 1ea:	80 36       	cpi	r24, 0x60	; 96
 1ec:	89 f5       	brne	.+98     	; 0x250 <__vector_17+0x9c>
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <__vector_17+0x4a>
 1f0:	88 3b       	cpi	r24, 0xB8	; 184
 1f2:	31 f1       	breq	.+76     	; 0x240 <__vector_17+0x8c>
 1f4:	80 3c       	cpi	r24, 0xC0	; 192
 1f6:	39 f1       	breq	.+78     	; 0x246 <__vector_17+0x92>
 1f8:	88 3a       	cpi	r24, 0xA8	; 168
 1fa:	51 f5       	brne	.+84     	; 0x250 <__vector_17+0x9c>
 1fc:	1e c0       	rjmp	.+60     	; 0x23a <__vector_17+0x86>
	sei();
}

static void init_Variables(void)
{
	memset(messagePacketHeader.data, 0, sizeof(messagePacketHeader.data));
 1fe:	10 92 66 00 	sts	0x0066, r1
 202:	10 92 67 00 	sts	0x0067, r1
 206:	10 92 68 00 	sts	0x0068, r1
	msg_count = 0;
 20a:	10 92 d0 00 	sts	0x00D0, r1
	syncByteFound = 0;
 20e:	10 92 ce 00 	sts	0x00CE, r1
	switch(TW_STATUS)
	{
		case TW_SR_SLA_ACK:
		{
			init_Variables();
			TWI_SendACK();
 212:	85 ec       	ldi	r24, 0xC5	; 197
 214:	86 bf       	out	0x36, r24	; 54
			break;
 216:	1c c0       	rjmp	.+56     	; 0x250 <__vector_17+0x9c>
		}	
		case TW_SR_DATA_ACK:
		{
			bytebuffer[msg_count++] = TWDR;
 218:	e0 91 d0 00 	lds	r30, 0x00D0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	8e 0f       	add	r24, r30
 220:	80 93 d0 00 	sts	0x00D0, r24
 224:	83 b1       	in	r24, 0x03	; 3
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	e6 59       	subi	r30, 0x96	; 150
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	80 83       	st	Z, r24
			TWI_SendACK();
 22e:	85 ec       	ldi	r24, 0xC5	; 197
 230:	86 bf       	out	0x36, r24	; 54
			break;
 232:	0e c0       	rjmp	.+28     	; 0x250 <__vector_17+0x9c>
		}
		case TW_SR_DATA_NACK:
		{
			error_handler(SET);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	17 df       	rcall	.-466    	; 0x66 <error_handler>
			break;
 238:	0b c0       	rjmp	.+22     	; 0x250 <__vector_17+0x9c>
		}
		case TW_ST_SLA_ACK:
		{
			error_handler(SET);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	14 df       	rcall	.-472    	; 0x66 <error_handler>
			break;
 23e:	08 c0       	rjmp	.+16     	; 0x250 <__vector_17+0x9c>
		}
		case TW_ST_DATA_ACK:
		{
			error_handler(SET);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	11 df       	rcall	.-478    	; 0x66 <error_handler>
			break;
 244:	05 c0       	rjmp	.+10     	; 0x250 <__vector_17+0x9c>
		}
		case TW_ST_DATA_NACK:
		{
			error_handler(SET);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e df       	rcall	.-484    	; 0x66 <error_handler>
			break;
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__vector_17+0x9c>
		}
		case TW_SR_STOP:
		{
			TWI_SendTransmit();
 24c:	85 e8       	ldi	r24, 0x85	; 133
 24e:	86 bf       	out	0x36, r24	; 54
		default:
		{
			break;
		}
	}
	sei();
 250:	78 94       	sei
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <main>:

}

int main(void)
{	
	sei();
 274:	78 94       	sei
	error_init(ERROR_PORT, ERROR_LED_GREEN_PIN, ERROR_LED_RED_PIN);
 276:	47 e0       	ldi	r20, 0x07	; 7
 278:	66 e0       	ldi	r22, 0x06	; 6
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	e5 de       	rcall	.-566    	; 0x48 <error_init>

	TWI_EXT_SlaveLoadAddress(AUTOPILOT_ADDRESS);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	93 df       	rcall	.-218    	; 0x1a8 <TWI_EXT_SlaveLoadAddress>
	TWI_EXT_SlaveInit();
 282:	95 df       	rcall	.-214    	; 0x1ae <TWI_EXT_SlaveInit>
	
	while (1)
	{
		if((bytebuffer[0] == SYNCBIT) && (bytebuffer[1] = SET_HEADING) && (bytebuffer[2] == 0x01) && (bytebuffer[3]= 0x01))
 284:	ca e6       	ldi	r28, 0x6A	; 106
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	11 e0       	ldi	r17, 0x01	; 1
 28a:	88 81       	ld	r24, Y
 28c:	86 3b       	cpi	r24, 0xB6	; 182
 28e:	49 f4       	brne	.+18     	; 0x2a2 <main+0x2e>
 290:	19 83       	std	Y+1, r17	; 0x01
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	29 f4       	brne	.+10     	; 0x2a2 <main+0x2e>
 298:	1b 83       	std	Y+3, r17	; 0x03
		{
			IO_flash(ERROR_PORT,ERROR_LED_GREEN_PIN);
 29a:	66 e0       	ldi	r22, 0x06	; 6
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	46 df       	rcall	.-372    	; 0x12c <IO_flash>
 2a0:	f4 cf       	rjmp	.-24     	; 0x28a <main+0x16>
		}
		else
		{
			IO_flash_slow(ERROR_PORT,ERROR_LED_GREEN_PIN);
 2a2:	66 e0       	ldi	r22, 0x06	; 6
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	61 df       	rcall	.-318    	; 0x16a <IO_flash_slow>
 2a8:	f0 cf       	rjmp	.-32     	; 0x28a <main+0x16>

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
