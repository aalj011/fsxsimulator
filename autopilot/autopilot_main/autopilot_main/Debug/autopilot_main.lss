
autopilot_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000839  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043f  00000000  00000000  00000c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d3  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000438  00000000  00000000  00001b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00001f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	b1 c0       	rjmp	.+354    	; 0x186 <__vector_17>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ae 36       	cpi	r26, 0x6E	; 110
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	e5 d0       	rcall	.+458    	; 0x20e <main>
  44:	fa c0       	rjmp	.+500    	; 0x23a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <error_init>:
static uint8_t error_green_led_pin;
static uint8_t error_red_led_pin;

void error_init(ports port, uint8_t green_led_pin, uint8_t red_led_pin)
{
	error_port = port;
  48:	80 93 62 00 	sts	0x0062, r24
	error_red_led_pin = red_led_pin;
  4c:	40 93 60 00 	sts	0x0060, r20
	error_green_led_pin = green_led_pin;
  50:	60 93 61 00 	sts	0x0061, r22
	
	// clear the io required
	IO_write(error_port,error_green_led_pin,SET);		// green light
  54:	41 e0       	ldi	r20, 0x01	; 1
  56:	25 d0       	rcall	.+74     	; 0xa2 <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);		// red light
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	60 91 60 00 	lds	r22, 0x0060
  5e:	80 91 62 00 	lds	r24, 0x0062
  62:	1f d0       	rcall	.+62     	; 0xa2 <IO_write>
  64:	08 95       	ret

00000066 <error_handler>:
}


void error_handler(uint8_t status)
{
  66:	cf 93       	push	r28
  68:	c8 2f       	mov	r28, r24
	// clear the io required
	IO_write(error_port,error_green_led_pin,CLEAR);
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	60 91 61 00 	lds	r22, 0x0061
  70:	80 91 62 00 	lds	r24, 0x0062
  74:	16 d0       	rcall	.+44     	; 0xa2 <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	60 91 60 00 	lds	r22, 0x0060
  7c:	80 91 62 00 	lds	r24, 0x0062
  80:	10 d0       	rcall	.+32     	; 0xa2 <IO_write>

	if(status)
  82:	cc 23       	and	r28, r28
  84:	31 f0       	breq	.+12     	; 0x92 <error_handler+0x2c>
	{
		// error has been generated stay in this while loop
		while(1)
		{
			IO_flash(error_port,error_red_led_pin);
  86:	60 91 60 00 	lds	r22, 0x0060
  8a:	80 91 62 00 	lds	r24, 0x0062
  8e:	4e d0       	rcall	.+156    	; 0x12c <IO_flash>
		}
  90:	fa cf       	rjmp	.-12     	; 0x86 <error_handler+0x20>
	}
	else
	{
		// no error generated
		IO_write(error_port,error_green_led_pin,SET);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 91 61 00 	lds	r22, 0x0061
  98:	80 91 62 00 	lds	r24, 0x0062
  9c:	02 d0       	rcall	.+4      	; 0xa2 <IO_write>
	}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <IO_write>:
				state specifies whether we want to set the pin high or low.
Note:			None
*****************************************************************************/
void IO_write(ports port, uint8_t pinnumber,uint8_t state)
{
	switch (port)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	c9 f0       	breq	.+50     	; 0xd8 <IO_write+0x36>
  a6:	18 f0       	brcs	.+6      	; 0xae <IO_write+0xc>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	59 f1       	breq	.+86     	; 0x102 <IO_write+0x60>
  ac:	08 95       	ret
	{
		case PORT_B:
		{
			#ifdef PORTB
			//set the pinnumber as output
			DDRB |= (1 << pinnumber);
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <IO_write+0x18>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <IO_write+0x14>
  be:	28 2b       	or	r18, r24
  c0:	27 bb       	out	0x17, r18	; 23
			if(state)
  c2:	44 23       	and	r20, r20
  c4:	21 f0       	breq	.+8      	; 0xce <IO_write+0x2c>
			{
				PORTB |= (1 << pinnumber);
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	89 2b       	or	r24, r25
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<< pinnumber);
  ce:	98 b3       	in	r25, 0x18	; 24
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	08 95       	ret
		}
		case PORT_C:
		{
			#ifdef PORTC
			//set the pinnumber as output
			DDRC |= (1 << pinnumber);
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <IO_write+0x42>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <IO_write+0x3e>
  e8:	28 2b       	or	r18, r24
  ea:	24 bb       	out	0x14, r18	; 20
			if(state)
  ec:	44 23       	and	r20, r20
  ee:	21 f0       	breq	.+8      	; 0xf8 <IO_write+0x56>
			{
				PORTC |= (1 << pinnumber);
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	89 2b       	or	r24, r25
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<< pinnumber);
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	80 95       	com	r24
  fc:	89 23       	and	r24, r25
  fe:	85 bb       	out	0x15, r24	; 21
 100:	08 95       	ret
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set the pinnumber as output
			DDRD |= (1 << pinnumber);
 102:	21 b3       	in	r18, 0x11	; 17
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <IO_write+0x6c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <IO_write+0x68>
 112:	28 2b       	or	r18, r24
 114:	21 bb       	out	0x11, r18	; 17
			if(state)
 116:	44 23       	and	r20, r20
 118:	21 f0       	breq	.+8      	; 0x122 <IO_write+0x80>
			{
				PORTD |= (1 << pinnumber);
 11a:	92 b3       	in	r25, 0x12	; 18
 11c:	89 2b       	or	r24, r25
 11e:	82 bb       	out	0x12, r24	; 18
 120:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<< pinnumber);
 122:	92 b3       	in	r25, 0x12	; 18
 124:	80 95       	com	r24
 126:	89 23       	and	r24, r25
 128:	82 bb       	out	0x12, r24	; 18
 12a:	08 95       	ret

0000012c <IO_flash>:
Purpose:		Flashes the IO of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash(ports port, uint8_t pinnumber)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	c8 2f       	mov	r28, r24
 132:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	b5 df       	rcall	.-150    	; 0xa2 <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f e7       	ldi	r18, 0x7F	; 127
 13a:	8a e1       	ldi	r24, 0x1A	; 26
 13c:	96 e0       	ldi	r25, 0x06	; 6
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <IO_flash+0x12>
 146:	00 c0       	rjmp	.+0      	; 0x148 <IO_flash+0x1c>
 148:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, SET);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	6d 2f       	mov	r22, r29
 14e:	8c 2f       	mov	r24, r28
 150:	a8 df       	rcall	.-176    	; 0xa2 <IO_write>
 152:	2f e7       	ldi	r18, 0x7F	; 127
 154:	8a e1       	ldi	r24, 0x1A	; 26
 156:	96 e0       	ldi	r25, 0x06	; 6
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <IO_flash+0x2c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <IO_flash+0x36>
 162:	00 00       	nop
	_delay_ms(2000);
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <twi_slave_init>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_init(uint8_t slaveaddress)
{	
	TWAR = (slaveaddress<<1);
 16a:	88 0f       	add	r24, r24
 16c:	82 b9       	out	0x02, r24	; 2
																						//Load the slave address
	TWCR = (1<<TWEN)|														//Enables TWI interface
 16e:	85 ec       	ldi	r24, 0xC5	; 197
 170:	86 bf       	out	0x36, r24	; 54
Returns:		None
Note:			None
****************************************************************************/
static void flagwait(void)
{
	while(!(TWCR &(1<<TWINT)));
 172:	06 b6       	in	r0, 0x36	; 54
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <twi_slave_init+0x8>
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);												//Enable twi
	
	flagwait();														//Wait till flag is cleared	
}
 178:	08 95       	ret

0000017a <twi_slave_ACK_tx>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_ACK_tx(void)
{	
	TWCR = (1<<TWEN)|														//Enables TWI interface
 17a:	85 ec       	ldi	r24, 0xC5	; 197
 17c:	86 bf       	out	0x36, r24	; 54
 17e:	08 95       	ret

00000180 <twi_slave_NACK_tx>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_NACK_tx(void)
{		
	TWCR = (1<<TWINT)|(1<<TWEN)|(0<<TWEA)|(1<<TWIE);											
 180:	85 e8       	ldi	r24, 0x85	; 133
 182:	86 bf       	out	0x36, r24	; 54
 184:	08 95       	ret

00000186 <__vector_17>:
static uint8_t databuffer[DATABUFFER] = {0};
static uint8_t i =0;	


ISR(TWI_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31

	uint8_t tw_status = TWSR & MASK;
 1a8:	81 b1       	in	r24, 0x01	; 1
 1aa:	88 7f       	andi	r24, 0xF8	; 248
	switch(tw_status)
 1ac:	80 36       	cpi	r24, 0x60	; 96
 1ae:	29 f0       	breq	.+10     	; 0x1ba <__vector_17+0x34>
 1b0:	80 38       	cpi	r24, 0x80	; 128
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <__vector_17+0x3c>
 1b4:	88 35       	cpi	r24, 0x58	; 88
 1b6:	d1 f4       	brne	.+52     	; 0x1ec <__vector_17+0x66>
 1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <__vector_17+0x62>
	{	
		case SLAVE_SLA_W_ACK_TX:
		{
			TWCR |= (1<<TWINT);
 1ba:	86 b7       	in	r24, 0x36	; 54
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	86 bf       	out	0x36, r24	; 54
			break;
 1c0:	15 c0       	rjmp	.+42     	; 0x1ec <__vector_17+0x66>
		}	
		case SLAVE_DATA_RX:
		{
			if(i< DATABUFFER)
 1c2:	80 91 63 00 	lds	r24, 0x0063
 1c6:	8a 30       	cpi	r24, 0x0A	; 10
 1c8:	58 f4       	brcc	.+22     	; 0x1e0 <__vector_17+0x5a>
			{
				databuffer[i] = TWDR;
 1ca:	93 b1       	in	r25, 0x03	; 3
 1cc:	e8 2f       	mov	r30, r24
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ec 59       	subi	r30, 0x9C	; 156
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	90 83       	st	Z, r25
				i++;
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 63 00 	sts	0x0063, r24
				twi_slave_ACK_tx();
 1dc:	ce df       	rcall	.-100    	; 0x17a <twi_slave_ACK_tx>
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <__vector_17+0x66>
			}
			else
			{
				twi_slave_NACK_tx();
 1e0:	cf df       	rcall	.-98     	; 0x180 <twi_slave_NACK_tx>
				i =0;
 1e2:	10 92 63 00 	sts	0x0063, r1
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__vector_17+0x66>
			break;
		}
		
		case SLAVE_DATA_RX_NACK:
		{
			error_handler(SET);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	3d df       	rcall	.-390    	; 0x66 <error_handler>
		default:
		{
			break;
		}
	}
}	
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <main>:

int main(void)
{
	sei();									// enable interrupt
 20e:	78 94       	sei
	error_init(ERROR_PORT, ERROR_LED_GREEN_PIN, ERROR_LED_RED_PIN);
 210:	47 e0       	ldi	r20, 0x07	; 7
 212:	66 e0       	ldi	r22, 0x06	; 6
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	18 df       	rcall	.-464    	; 0x48 <error_init>
	twi_slave_init(AUTOPILOT_ADDRESS);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	a7 df       	rcall	.-178    	; 0x16a <twi_slave_init>
	
    while(1)
    {
		if(databuffer[0])
 21c:	c4 e6       	ldi	r28, 0x64	; 100
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	88 81       	ld	r24, Y
 222:	88 23       	and	r24, r24
 224:	29 f0       	breq	.+10     	; 0x230 <main+0x22>
		{
			IO_write(PORT_D, 5, SET);
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	65 e0       	ldi	r22, 0x05	; 5
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	3a df       	rcall	.-396    	; 0xa2 <IO_write>
 22e:	f8 cf       	rjmp	.-16     	; 0x220 <main+0x12>
		}
		else
		{
			IO_write(PORT_D, 5, CLEAR);	
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	35 df       	rcall	.-406    	; 0xa2 <IO_write>
 238:	f3 cf       	rjmp	.-26     	; 0x220 <main+0x12>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
