
fsxsim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000008d6  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  00000972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001298  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000669  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a34  00000000  00000000  0000248d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000785  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018cf  00000000  00000000  00003a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0c 01 	jmp	0x218	; 0x218 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
   8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
   c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  10:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  14:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  18:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  1c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  20:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  24:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  28:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_10>
  2c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_11>
  30:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  34:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  38:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  3c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  40:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  44:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  48:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  4c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  50:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  54:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  58:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  5c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  60:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  64:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  68:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  6c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  70:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  74:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  78:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  7c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  80:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  84:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  88:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  8c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  90:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_36>
  94:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  98:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  9c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  a0:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  a4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  a8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  ac:	fe 03       	fmulsu	r23, r22
  ae:	39 04       	cpc	r3, r9
  b0:	39 04       	cpc	r3, r9
  b2:	39 04       	cpc	r3, r9
  b4:	39 04       	cpc	r3, r9
  b6:	39 04       	cpc	r3, r9
  b8:	39 04       	cpc	r3, r9
  ba:	39 04       	cpc	r3, r9
  bc:	05 04       	cpc	r0, r5
  be:	39 04       	cpc	r3, r9
  c0:	39 04       	cpc	r3, r9
  c2:	39 04       	cpc	r3, r9
  c4:	39 04       	cpc	r3, r9
  c6:	39 04       	cpc	r3, r9
  c8:	39 04       	cpc	r3, r9
  ca:	39 04       	cpc	r3, r9
  cc:	11 04       	cpc	r1, r1
  ce:	39 04       	cpc	r3, r9
  d0:	39 04       	cpc	r3, r9
  d2:	39 04       	cpc	r3, r9
  d4:	39 04       	cpc	r3, r9
  d6:	39 04       	cpc	r3, r9
  d8:	39 04       	cpc	r3, r9
  da:	39 04       	cpc	r3, r9
  dc:	17 04       	cpc	r1, r7
  de:	39 04       	cpc	r3, r9
  e0:	39 04       	cpc	r3, r9
  e2:	39 04       	cpc	r3, r9
  e4:	39 04       	cpc	r3, r9
  e6:	39 04       	cpc	r3, r9
  e8:	39 04       	cpc	r3, r9
  ea:	39 04       	cpc	r3, r9
  ec:	1b 04       	cpc	r1, r11
  ee:	39 04       	cpc	r3, r9
  f0:	39 04       	cpc	r3, r9
  f2:	39 04       	cpc	r3, r9
  f4:	39 04       	cpc	r3, r9
  f6:	39 04       	cpc	r3, r9
  f8:	39 04       	cpc	r3, r9
  fa:	39 04       	cpc	r3, r9
  fc:	30 04       	cpc	r3, r0
  fe:	39 04       	cpc	r3, r9
 100:	39 04       	cpc	r3, r9
 102:	39 04       	cpc	r3, r9
 104:	39 04       	cpc	r3, r9
 106:	39 04       	cpc	r3, r9
 108:	39 04       	cpc	r3, r9
 10a:	39 04       	cpc	r3, r9
 10c:	39 04       	cpc	r3, r9
 10e:	39 04       	cpc	r3, r9
 110:	39 04       	cpc	r3, r9
 112:	39 04       	cpc	r3, r9
 114:	39 04       	cpc	r3, r9
 116:	39 04       	cpc	r3, r9
 118:	39 04       	cpc	r3, r9
 11a:	39 04       	cpc	r3, r9
 11c:	09 04       	cpc	r0, r9
 11e:	39 04       	cpc	r3, r9
 120:	39 04       	cpc	r3, r9
 122:	39 04       	cpc	r3, r9
 124:	39 04       	cpc	r3, r9
 126:	39 04       	cpc	r3, r9
 128:	39 04       	cpc	r3, r9
 12a:	39 04       	cpc	r3, r9
 12c:	0d 04       	cpc	r0, r13
 12e:	39 04       	cpc	r3, r9
 130:	39 04       	cpc	r3, r9
 132:	39 04       	cpc	r3, r9
 134:	39 04       	cpc	r3, r9
 136:	39 04       	cpc	r3, r9
 138:	39 04       	cpc	r3, r9
 13a:	39 04       	cpc	r3, r9
 13c:	39 04       	cpc	r3, r9
 13e:	39 04       	cpc	r3, r9
 140:	39 04       	cpc	r3, r9
 142:	39 04       	cpc	r3, r9
 144:	39 04       	cpc	r3, r9
 146:	39 04       	cpc	r3, r9
 148:	39 04       	cpc	r3, r9
 14a:	39 04       	cpc	r3, r9
 14c:	36 04       	cpc	r3, r6

0000014e <__trampolines_end>:
 14e:	00 01       	movw	r0, r0
 150:	00 00       	nop
 152:	fb 01       	movw	r30, r22
 154:	12 00       	.word	0x0012	; ????
 156:	02 00       	.word	0x0002	; ????
 158:	00 b8       	out	0x00, r0	; 0
 15a:	01 43       	sbci	r16, 0x31	; 49
 15c:	00 03       	mulsu	r16, r16
 15e:	00 00       	nop
 160:	b4 01       	movw	r22, r8
 162:	04 01       	movw	r0, r8
 164:	03 09       	sbc	r16, r3
 166:	04 9e       	mul	r0, r20
 168:	01 14       	cp	r0, r1
 16a:	02 03       	mulsu	r16, r18
 16c:	09 04       	cpc	r0, r9
 16e:	86 01       	movw	r16, r12
 170:	16 03       	mulsu	r17, r22
 172:	03 09       	sbc	r16, r3
 174:	04 78       	andi	r16, 0x84	; 132
 176:	01 0c       	add	r0, r1

00000178 <string3>:
 178:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000186 <string2>:
 186:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 196:	69 00 61 00 6c 00 00 00                             i.a.l...

0000019e <string1>:
 19e:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 1ae:	6d 00 65 00 00 00                                   m.e...

000001b4 <string0>:
 1b4:	04 03 09 04                                         ....

000001b8 <config1_descriptor>:
 1b8:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 1c8:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 1d8:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 1e8:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 1f8:	40 00 00                                            @..

000001fb <device_descriptor>:
 1fb:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 20b:	03 01                                               ..

0000020d <endpoint_config_table>:
 20d:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000218 <__ctors_end>:
 218:	11 24       	eor	r1, r1
 21a:	1f be       	out	0x3f, r1	; 63
 21c:	cf ef       	ldi	r28, 0xFF	; 255
 21e:	da e0       	ldi	r29, 0x0A	; 10
 220:	de bf       	out	0x3e, r29	; 62
 222:	cd bf       	out	0x3d, r28	; 61

00000224 <__do_copy_data>:
 224:	11 e0       	ldi	r17, 0x01	; 1
 226:	a0 e0       	ldi	r26, 0x00	; 0
 228:	b1 e0       	ldi	r27, 0x01	; 1
 22a:	e6 ed       	ldi	r30, 0xD6	; 214
 22c:	f8 e0       	ldi	r31, 0x08	; 8
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x10>
 230:	05 90       	lpm	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	a8 30       	cpi	r26, 0x08	; 8
 236:	b1 07       	cpc	r27, r17
 238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0xc>

0000023a <__do_clear_bss>:
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	a8 e0       	ldi	r26, 0x08	; 8
 23e:	b1 e0       	ldi	r27, 0x01	; 1
 240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
 242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
 244:	a4 31       	cpi	r26, 0x14	; 20
 246:	b2 07       	cpc	r27, r18
 248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>
 24a:	0e 94 4b 04 	call	0x896	; 0x896 <main>
 24e:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_exit>

00000252 <__bad_interrupt>:
 252:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000256 <error_init>:
static uint8_t error_green_led_pin;
static uint8_t error_red_led_pin;

void error_init(ports port, uint8_t green_led_pin, uint8_t red_led_pin)
{
	error_port = port;
 256:	80 93 0a 01 	sts	0x010A, r24
	error_red_led_pin = red_led_pin;
 25a:	40 93 08 01 	sts	0x0108, r20
	error_green_led_pin = green_led_pin;
 25e:	60 93 09 01 	sts	0x0109, r22
	
	// clear the io required
	IO_write(error_port,error_green_led_pin,SET);		// green light
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	0e 94 5e 01 	call	0x2bc	; 0x2bc <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);		// red light
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	60 91 08 01 	lds	r22, 0x0108
 26e:	80 91 0a 01 	lds	r24, 0x010A
 272:	0e 94 5e 01 	call	0x2bc	; 0x2bc <IO_write>
 276:	08 95       	ret

00000278 <error_handler>:
}


void error_handler(uint8_t status)
{
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
	// clear the io required
	IO_write(error_port,error_green_led_pin,CLEAR);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	60 91 09 01 	lds	r22, 0x0109
 282:	80 91 0a 01 	lds	r24, 0x010A
 286:	0e 94 5e 01 	call	0x2bc	; 0x2bc <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	60 91 08 01 	lds	r22, 0x0108
 290:	80 91 0a 01 	lds	r24, 0x010A
 294:	0e 94 5e 01 	call	0x2bc	; 0x2bc <IO_write>

	if(status)
 298:	cc 23       	and	r28, r28
 29a:	39 f0       	breq	.+14     	; 0x2aa <error_handler+0x32>
	{
		// error has been generated stay in this while loop
		while(1)
		{
			IO_flash(error_port,error_red_led_pin);
 29c:	60 91 08 01 	lds	r22, 0x0108
 2a0:	80 91 0a 01 	lds	r24, 0x010A
 2a4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <IO_flash>
		}
 2a8:	f9 cf       	rjmp	.-14     	; 0x29c <error_handler+0x24>
	}
	else
	{
		// no error generated
		IO_write(error_port,error_green_led_pin,SET);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	60 91 09 01 	lds	r22, 0x0109
 2b0:	80 91 0a 01 	lds	r24, 0x010A
 2b4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <IO_write>
	}
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <IO_write>:
				state specifies whether we want to set the pin high or low.
Note:			None
*****************************************************************************/
void IO_write(ports port, uint8_t pinnumber,uint8_t state)
{
	switch (port)
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	b9 f1       	breq	.+110    	; 0x32e <IO_write+0x72>
 2c0:	28 f4       	brcc	.+10     	; 0x2cc <IO_write+0x10>
 2c2:	88 23       	and	r24, r24
 2c4:	51 f0       	breq	.+20     	; 0x2da <IO_write+0x1e>
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	e9 f0       	breq	.+58     	; 0x304 <IO_write+0x48>
 2ca:	08 95       	ret
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <IO_write+0x16>
 2d0:	43 c0       	rjmp	.+134    	; 0x358 <IO_write+0x9c>
 2d2:	84 30       	cpi	r24, 0x04	; 4
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <IO_write+0x1c>
 2d6:	55 c0       	rjmp	.+170    	; 0x382 <IO_write+0xc6>
 2d8:	08 95       	ret
	{
		case PORT_B:
		{
			#ifdef PORTB
			//set the pinnumber as output
			DDRB |= (1 << pinnumber);
 2da:	24 b1       	in	r18, 0x04	; 4
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <IO_write+0x2a>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <IO_write+0x26>
 2ea:	28 2b       	or	r18, r24
 2ec:	24 b9       	out	0x04, r18	; 4
			if(state)
 2ee:	44 23       	and	r20, r20
 2f0:	21 f0       	breq	.+8      	; 0x2fa <IO_write+0x3e>
			{
				PORTB |= (1 << pinnumber);
 2f2:	95 b1       	in	r25, 0x05	; 5
 2f4:	89 2b       	or	r24, r25
 2f6:	85 b9       	out	0x05, r24	; 5
 2f8:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<< pinnumber);
 2fa:	95 b1       	in	r25, 0x05	; 5
 2fc:	80 95       	com	r24
 2fe:	89 23       	and	r24, r25
 300:	85 b9       	out	0x05, r24	; 5
 302:	08 95       	ret
		}
		case PORT_C:
		{
			#ifdef PORTC
			//set the pinnumber as output
			DDRC |= (1 << pinnumber);
 304:	27 b1       	in	r18, 0x07	; 7
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <IO_write+0x54>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <IO_write+0x50>
 314:	28 2b       	or	r18, r24
 316:	27 b9       	out	0x07, r18	; 7
			if(state)
 318:	44 23       	and	r20, r20
 31a:	21 f0       	breq	.+8      	; 0x324 <IO_write+0x68>
			{
				PORTC |= (1 << pinnumber);
 31c:	98 b1       	in	r25, 0x08	; 8
 31e:	89 2b       	or	r24, r25
 320:	88 b9       	out	0x08, r24	; 8
 322:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<< pinnumber);
 324:	98 b1       	in	r25, 0x08	; 8
 326:	80 95       	com	r24
 328:	89 23       	and	r24, r25
 32a:	88 b9       	out	0x08, r24	; 8
 32c:	08 95       	ret
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set the pinnumber as output
			DDRD |= (1 << pinnumber);
 32e:	2a b1       	in	r18, 0x0a	; 10
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <IO_write+0x7e>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <IO_write+0x7a>
 33e:	28 2b       	or	r18, r24
 340:	2a b9       	out	0x0a, r18	; 10
			if(state)
 342:	44 23       	and	r20, r20
 344:	21 f0       	breq	.+8      	; 0x34e <IO_write+0x92>
			{
				PORTD |= (1 << pinnumber);
 346:	9b b1       	in	r25, 0x0b	; 11
 348:	89 2b       	or	r24, r25
 34a:	8b b9       	out	0x0b, r24	; 11
 34c:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<< pinnumber);
 34e:	9b b1       	in	r25, 0x0b	; 11
 350:	80 95       	com	r24
 352:	89 23       	and	r24, r25
 354:	8b b9       	out	0x0b, r24	; 11
 356:	08 95       	ret
		}
		case PORT_E:
		{
			#ifdef PORTE
			//set the pinnumber as output
			DDRE |= (1 << pinnumber);
 358:	2d b1       	in	r18, 0x0d	; 13
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <IO_write+0xa8>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <IO_write+0xa4>
 368:	28 2b       	or	r18, r24
 36a:	2d b9       	out	0x0d, r18	; 13
			if(state)
 36c:	44 23       	and	r20, r20
 36e:	21 f0       	breq	.+8      	; 0x378 <IO_write+0xbc>
			{
				PORTE |= (1 << pinnumber);
 370:	9e b1       	in	r25, 0x0e	; 14
 372:	89 2b       	or	r24, r25
 374:	8e b9       	out	0x0e, r24	; 14
 376:	08 95       	ret
			}
			else
			{
				PORTE &= ~(1<< pinnumber);
 378:	9e b1       	in	r25, 0x0e	; 14
 37a:	80 95       	com	r24
 37c:	89 23       	and	r24, r25
 37e:	8e b9       	out	0x0e, r24	; 14
 380:	08 95       	ret
		}
		case PORT_F:
		{
			#ifdef PORTF
			//set the pinnumber as output
			DDRF |= (1 << pinnumber);
 382:	20 b3       	in	r18, 0x10	; 16
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <IO_write+0xd2>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <IO_write+0xce>
 392:	28 2b       	or	r18, r24
 394:	20 bb       	out	0x10, r18	; 16
			if(state)
 396:	44 23       	and	r20, r20
 398:	21 f0       	breq	.+8      	; 0x3a2 <IO_write+0xe6>
			{
				PORTF |= (1 << pinnumber);
 39a:	91 b3       	in	r25, 0x11	; 17
 39c:	89 2b       	or	r24, r25
 39e:	81 bb       	out	0x11, r24	; 17
 3a0:	08 95       	ret
			}
			else
			{
				PORTF &= ~(1<< pinnumber);
 3a2:	91 b3       	in	r25, 0x11	; 17
 3a4:	80 95       	com	r24
 3a6:	89 23       	and	r24, r25
 3a8:	81 bb       	out	0x11, r24	; 17
 3aa:	08 95       	ret

000003ac <IO_flash>:
Purpose:		Flashes the IO of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash(ports port, uint8_t pinnumber)
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	c8 2f       	mov	r28, r24
 3b2:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	2f e7       	ldi	r18, 0x7F	; 127
 3bc:	8a e1       	ldi	r24, 0x1A	; 26
 3be:	96 e0       	ldi	r25, 0x06	; 6
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <IO_flash+0x14>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <IO_flash+0x1e>
 3ca:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, SET);
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	6d 2f       	mov	r22, r29
 3d0:	8c 2f       	mov	r24, r28
 3d2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <IO_write>
 3d6:	2f e7       	ldi	r18, 0x7F	; 127
 3d8:	8a e1       	ldi	r24, 0x1A	; 26
 3da:	96 e0       	ldi	r25, 0x06	; 6
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <IO_flash+0x30>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <IO_flash+0x3a>
 3e6:	00 00       	nop
	_delay_ms(2000);
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <twi_master_init>:
Note:			None
****************************************************************************/
void twi_master_init(void)
{
	//PRR0 = (0<<PRTWI);													//Turn off Power reduction on TWI 							
	TWSR = (0<<TWPS0)|(0<<TWPS1);
 3ee:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = TWBR_BIT_RATE;													//Bit rate at 8mhz 100khz 0x20	
 3f2:	80 e2       	ldi	r24, 0x20	; 32
 3f4:	80 93 b8 00 	sts	0x00B8, r24
	TWDR = 0xFF;															//Dummy data
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 3fe:	85 e0       	ldi	r24, 0x05	; 5
 400:	80 93 bc 00 	sts	0x00BC, r24
 404:	08 95       	ret

00000406 <twi_master_start_condition>:
Returns:		None
Note:			None
****************************************************************************/
void twi_master_start_condition(void)
{	
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 406:	85 ea       	ldi	r24, 0xA5	; 165
 408:	80 93 bc 00 	sts	0x00BC, r24
 40c:	08 95       	ret

0000040e <twi_master_stop_condition>:
Returns:		None
Note:			None
****************************************************************************/
void twi_master_stop_condition(void)
{
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 40e:	85 e9       	ldi	r24, 0x95	; 149
 410:	80 93 bc 00 	sts	0x00BC, r24
 414:	08 95       	ret

00000416 <twi_master_sla_send_address>:
Note:			None
****************************************************************************/
void twi_master_sla_send_address(uint8_t address, uint8_t read)
{
	uint8_t slave_address = 0;
	slave_address = (address << 1)| (read);
 416:	88 0f       	add	r24, r24
 418:	68 2b       	or	r22, r24
	
	TWDR = slave_address;													//Set the data register with the slave address and the read/write bit
 41a:	60 93 bb 00 	sts	0x00BB, r22
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 41e:	85 ec       	ldi	r24, 0xC5	; 197
 420:	80 93 bc 00 	sts	0x00BC, r24
 424:	08 95       	ret

00000426 <twi_master_send_data>:
Returns:		None
Note:			None
****************************************************************************/
void twi_master_send_data(uint8_t data)
{	
	TWDR = data;
 426:	80 93 bb 00 	sts	0x00BB, r24
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 42a:	85 e8       	ldi	r24, 0x85	; 133
 42c:	80 93 bc 00 	sts	0x00BC, r24
 430:	08 95       	ret

00000432 <__vector_10>:
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
}
 432:	1f 92       	push	r1
 434:	0f 92       	push	r0
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	0f 92       	push	r0
 43a:	11 24       	eor	r1, r1
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	e1 ee       	ldi	r30, 0xE1	; 225
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	10 82       	st	Z, r1
{
	uint8_t intbits, t;

        intbits = UDINT;
        UDINT = 0;
        if (intbits & (1<<EORSTI)) {
 44c:	83 ff       	sbrs	r24, 3
 44e:	11 c0       	rjmp	.+34     	; 0x472 <__vector_10+0x40>
		UENUM = 0;
 450:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 45a:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 45e:	92 e1       	ldi	r25, 0x12	; 18
 460:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 464:	98 e0       	ldi	r25, 0x08	; 8
 466:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 46a:	10 92 0d 01 	sts	0x010D, r1
		cdc_line_rtsdtr = 0;
 46e:	10 92 0b 01 	sts	0x010B, r1
        }
	if (intbits & (1<<SOFI)) {
 472:	82 ff       	sbrs	r24, 2
 474:	13 c0       	rjmp	.+38     	; 0x49c <__vector_10+0x6a>
		if (usb_configuration) {
 476:	80 91 0d 01 	lds	r24, 0x010D
 47a:	88 23       	and	r24, r24
 47c:	79 f0       	breq	.+30     	; 0x49c <__vector_10+0x6a>
			t = transmit_flush_timer;
 47e:	80 91 0c 01 	lds	r24, 0x010C
			if (t) {
 482:	88 23       	and	r24, r24
 484:	59 f0       	breq	.+22     	; 0x49c <__vector_10+0x6a>
				transmit_flush_timer = --t;
 486:	81 50       	subi	r24, 0x01	; 1
 488:	80 93 0c 01 	sts	0x010C, r24
				if (!t) {
 48c:	81 11       	cpse	r24, r1
 48e:	06 c0       	rjmp	.+12     	; 0x49c <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 496:	8a e3       	ldi	r24, 0x3A	; 58
 498:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4d8:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4dc:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4e0:	83 ff       	sbrs	r24, 3
 4e2:	4c c1       	rjmp	.+664    	; 0x77c <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 4e4:	e1 ef       	ldi	r30, 0xF1	; 241
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 4ea:	80 81       	ld	r24, Z
                wValue = UEDATX;
 4ec:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 4ee:	90 81       	ld	r25, Z
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 4f4:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 4f6:	90 81       	ld	r25, Z
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	59 2b       	or	r21, r25
                wLength = UEDATX;
 4fc:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 4fe:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 500:	92 ef       	ldi	r25, 0xF2	; 242
 502:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 506:	86 30       	cpi	r24, 0x06	; 6
 508:	09 f0       	breq	.+2      	; 0x50c <__vector_11+0x5e>
 50a:	58 c0       	rjmp	.+176    	; 0x5bc <__vector_11+0x10e>
 50c:	04 c0       	rjmp	.+8      	; 0x516 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 50e:	81 e2       	ldi	r24, 0x21	; 33
 510:	80 93 eb 00 	sts	0x00EB, r24
					return;
 514:	3a c1       	rjmp	.+628    	; 0x78a <__vector_11+0x2dc>
 516:	66 e0       	ldi	r22, 0x06	; 6
 518:	8e e4       	ldi	r24, 0x4E	; 78
 51a:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
 51c:	fc 01       	movw	r30, r24
 51e:	a5 91       	lpm	r26, Z+
 520:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 522:	2a 17       	cp	r18, r26
 524:	3b 07       	cpc	r19, r27
 526:	11 f0       	breq	.+4      	; 0x52c <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 528:	07 96       	adiw	r24, 0x07	; 7
					continue;
 52a:	23 c0       	rjmp	.+70     	; 0x572 <__vector_11+0xc4>
				}
				list += 2;
 52c:	fc 01       	movw	r30, r24
 52e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 530:	a5 91       	lpm	r26, Z+
 532:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 534:	4a 17       	cp	r20, r26
 536:	5b 07       	cpc	r21, r27
 538:	11 f0       	breq	.+4      	; 0x53e <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 53a:	07 96       	adiw	r24, 0x07	; 7
					continue;
 53c:	1a c0       	rjmp	.+52     	; 0x572 <__vector_11+0xc4>
				}
				list += 2;
 53e:	fc 01       	movw	r30, r24
 540:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 542:	45 91       	lpm	r20, Z+
 544:	54 91       	lpm	r21, Z
				list += 2;
 546:	fc 01       	movw	r30, r24
 548:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 54a:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 54c:	87 2f       	mov	r24, r23
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 552:	8f 3f       	cpi	r24, 0xFF	; 255
 554:	91 05       	cpc	r25, r1
 556:	19 f0       	breq	.+6      	; 0x55e <__vector_11+0xb0>
 558:	10 f0       	brcs	.+4      	; 0x55e <__vector_11+0xb0>
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	82 17       	cp	r24, r18
 560:	08 f4       	brcc	.+2      	; 0x564 <__vector_11+0xb6>
 562:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 564:	a8 ee       	ldi	r26, 0xE8	; 232
 566:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 568:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 56a:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 56c:	c1 ef       	ldi	r28, 0xF1	; 241
 56e:	d0 e0       	ldi	r29, 0x00	; 0
 570:	03 c0       	rjmp	.+6      	; 0x578 <__vector_11+0xca>
 572:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 574:	99 f6       	brne	.-90     	; 0x51c <__vector_11+0x6e>
 576:	cb cf       	rjmp	.-106    	; 0x50e <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 578:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 57a:	98 2f       	mov	r25, r24
 57c:	95 70       	andi	r25, 0x05	; 5
 57e:	e1 f3       	breq	.-8      	; 0x578 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 580:	82 fd       	sbrc	r24, 2
 582:	03 c1       	rjmp	.+518    	; 0x78a <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 584:	32 2f       	mov	r19, r18
 586:	21 31       	cpi	r18, 0x11	; 17
 588:	08 f0       	brcs	.+2      	; 0x58c <__vector_11+0xde>
 58a:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 58c:	33 23       	and	r19, r19
 58e:	09 f4       	brne	.+2      	; 0x592 <__vector_11+0xe4>
 590:	f9 c0       	rjmp	.+498    	; 0x784 <__vector_11+0x2d6>
 592:	fa 01       	movw	r30, r20
 594:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 596:	94 91       	lpm	r25, Z
 598:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 59a:	81 50       	subi	r24, 0x01	; 1
 59c:	31 96       	adiw	r30, 0x01	; 1
 59e:	81 11       	cpse	r24, r1
 5a0:	fa cf       	rjmp	.-12     	; 0x596 <__vector_11+0xe8>
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	83 0f       	add	r24, r19
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	48 0f       	add	r20, r24
 5ac:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 5ae:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5b0:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5b2:	21 11       	cpse	r18, r1
 5b4:	e1 cf       	rjmp	.-62     	; 0x578 <__vector_11+0xca>
 5b6:	30 31       	cpi	r19, 0x10	; 16
 5b8:	f9 f2       	breq	.-66     	; 0x578 <__vector_11+0xca>
 5ba:	e7 c0       	rjmp	.+462    	; 0x78a <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 5bc:	85 30       	cpi	r24, 0x05	; 5
 5be:	61 f4       	brne	.+24     	; 0x5d8 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c0:	8e ef       	ldi	r24, 0xFE	; 254
 5c2:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5c6:	e8 ee       	ldi	r30, 0xE8	; 232
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	80 ff       	sbrs	r24, 0
 5ce:	fd cf       	rjmp	.-6      	; 0x5ca <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 5d0:	20 68       	ori	r18, 0x80	; 128
 5d2:	20 93 e3 00 	sts	0x00E3, r18
			return;
 5d6:	d9 c0       	rjmp	.+434    	; 0x78a <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5d8:	89 30       	cpi	r24, 0x09	; 9
 5da:	09 f0       	breq	.+2      	; 0x5de <__vector_11+0x130>
 5dc:	35 c0       	rjmp	.+106    	; 0x648 <__vector_11+0x19a>
 5de:	61 11       	cpse	r22, r1
 5e0:	cd c0       	rjmp	.+410    	; 0x77c <__vector_11+0x2ce>
			usb_configuration = wValue;
 5e2:	20 93 0d 01 	sts	0x010D, r18
			cdc_line_rtsdtr = 0;
 5e6:	10 92 0b 01 	sts	0x010B, r1
			transmit_flush_timer = 0;
 5ea:	10 92 0c 01 	sts	0x010C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5ee:	8e ef       	ldi	r24, 0xFE	; 254
 5f0:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5f4:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 5f6:	2d e0       	ldi	r18, 0x0D	; 13
 5f8:	32 e0       	ldi	r19, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
 5fa:	c9 ee       	ldi	r28, 0xE9	; 233
 5fc:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 5fe:	ab ee       	ldi	r26, 0xEB	; 235
 600:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 602:	0c ee       	ldi	r16, 0xEC	; 236
 604:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 606:	6d ee       	ldi	r22, 0xED	; 237
 608:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 60a:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 60c:	a9 01       	movw	r20, r18
 60e:	4f 5f       	subi	r20, 0xFF	; 255
 610:	5f 4f       	sbci	r21, 0xFF	; 255
 612:	f9 01       	movw	r30, r18
 614:	94 91       	lpm	r25, Z
				UECONX = en;
 616:	9c 93       	st	X, r25
				if (en) {
 618:	99 23       	and	r25, r25
 61a:	61 f0       	breq	.+24     	; 0x634 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 61c:	fa 01       	movw	r30, r20
 61e:	44 91       	lpm	r20, Z
 620:	f8 01       	movw	r30, r16
 622:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 624:	f9 01       	movw	r30, r18
 626:	32 96       	adiw	r30, 0x02	; 2
 628:	94 91       	lpm	r25, Z
 62a:	2d 5f       	subi	r18, 0xFD	; 253
 62c:	3f 4f       	sbci	r19, 0xFF	; 255
 62e:	fb 01       	movw	r30, r22
 630:	90 83       	st	Z, r25
 632:	01 c0       	rjmp	.+2      	; 0x636 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 634:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 636:	8f 5f       	subi	r24, 0xFF	; 255
 638:	85 30       	cpi	r24, 0x05	; 5
 63a:	39 f7       	brne	.-50     	; 0x60a <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 63c:	ea ee       	ldi	r30, 0xEA	; 234
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	8e e1       	ldi	r24, 0x1E	; 30
 642:	80 83       	st	Z, r24
        		UERST = 0;
 644:	10 82       	st	Z, r1
			return;
 646:	a1 c0       	rjmp	.+322    	; 0x78a <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 648:	88 30       	cpi	r24, 0x08	; 8
 64a:	81 f4       	brne	.+32     	; 0x66c <__vector_11+0x1be>
 64c:	60 38       	cpi	r22, 0x80	; 128
 64e:	09 f0       	breq	.+2      	; 0x652 <__vector_11+0x1a4>
 650:	95 c0       	rjmp	.+298    	; 0x77c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 652:	e8 ee       	ldi	r30, 0xE8	; 232
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	80 ff       	sbrs	r24, 0
 65a:	fd cf       	rjmp	.-6      	; 0x656 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 65c:	80 91 0d 01 	lds	r24, 0x010D
 660:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 664:	8e ef       	ldi	r24, 0xFE	; 254
 666:	80 93 e8 00 	sts	0x00E8, r24
 66a:	8f c0       	rjmp	.+286    	; 0x78a <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 66c:	81 32       	cpi	r24, 0x21	; 33
 66e:	b9 f4       	brne	.+46     	; 0x69e <__vector_11+0x1f0>
 670:	61 3a       	cpi	r22, 0xA1	; 161
 672:	09 f0       	breq	.+2      	; 0x676 <__vector_11+0x1c8>
 674:	83 c0       	rjmp	.+262    	; 0x77c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 676:	e8 ee       	ldi	r30, 0xE8	; 232
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	80 ff       	sbrs	r24, 0
 67e:	fd cf       	rjmp	.-6      	; 0x67a <__vector_11+0x1cc>
 680:	e0 e0       	ldi	r30, 0x00	; 0
 682:	f1 e0       	ldi	r31, 0x01	; 1
 684:	27 e0       	ldi	r18, 0x07	; 7
 686:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 688:	a1 ef       	ldi	r26, 0xF1	; 241
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	81 91       	ld	r24, Z+
 68e:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 690:	e2 17       	cp	r30, r18
 692:	f3 07       	cpc	r31, r19
 694:	d9 f7       	brne	.-10     	; 0x68c <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 696:	8e ef       	ldi	r24, 0xFE	; 254
 698:	80 93 e8 00 	sts	0x00E8, r24
 69c:	76 c0       	rjmp	.+236    	; 0x78a <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 69e:	80 32       	cpi	r24, 0x20	; 32
 6a0:	d1 f4       	brne	.+52     	; 0x6d6 <__vector_11+0x228>
 6a2:	61 32       	cpi	r22, 0x21	; 33
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <__vector_11+0x1fa>
 6a6:	6a c0       	rjmp	.+212    	; 0x77c <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 6a8:	e8 ee       	ldi	r30, 0xE8	; 232
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	82 ff       	sbrs	r24, 2
 6b0:	fd cf       	rjmp	.-6      	; 0x6ac <__vector_11+0x1fe>
 6b2:	e0 e0       	ldi	r30, 0x00	; 0
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	27 e0       	ldi	r18, 0x07	; 7
 6b8:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 6ba:	a1 ef       	ldi	r26, 0xF1	; 241
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	8c 91       	ld	r24, X
 6c0:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 6c2:	e2 17       	cp	r30, r18
 6c4:	f3 07       	cpc	r31, r19
 6c6:	d9 f7       	brne	.-10     	; 0x6be <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 6c8:	e8 ee       	ldi	r30, 0xE8	; 232
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	8b ef       	ldi	r24, 0xFB	; 251
 6ce:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6d0:	8e ef       	ldi	r24, 0xFE	; 254
 6d2:	80 83       	st	Z, r24
 6d4:	5a c0       	rjmp	.+180    	; 0x78a <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 6d6:	82 32       	cpi	r24, 0x22	; 34
 6d8:	71 f4       	brne	.+28     	; 0x6f6 <__vector_11+0x248>
 6da:	61 32       	cpi	r22, 0x21	; 33
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_11+0x232>
 6de:	4e c0       	rjmp	.+156    	; 0x77c <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 6e0:	20 93 0b 01 	sts	0x010B, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6e4:	e8 ee       	ldi	r30, 0xE8	; 232
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	80 ff       	sbrs	r24, 0
 6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6ee:	8e ef       	ldi	r24, 0xFE	; 254
 6f0:	80 93 e8 00 	sts	0x00E8, r24
 6f4:	4a c0       	rjmp	.+148    	; 0x78a <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 6f6:	81 11       	cpse	r24, r1
 6f8:	1a c0       	rjmp	.+52     	; 0x72e <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6fa:	e8 ee       	ldi	r30, 0xE8	; 232
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	80 ff       	sbrs	r24, 0
 702:	fd cf       	rjmp	.-6      	; 0x6fe <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 704:	62 38       	cpi	r22, 0x82	; 130
 706:	51 f4       	brne	.+20     	; 0x71c <__vector_11+0x26e>
				UENUM = wIndex;
 708:	e9 ee       	ldi	r30, 0xE9	; 233
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 70e:	80 91 eb 00 	lds	r24, 0x00EB
 712:	85 fb       	bst	r24, 5
 714:	88 27       	eor	r24, r24
 716:	80 f9       	bld	r24, 0
				UENUM = 0;
 718:	10 82       	st	Z, r1
 71a:	01 c0       	rjmp	.+2      	; 0x71e <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 71c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 71e:	e1 ef       	ldi	r30, 0xF1	; 241
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 83       	st	Z, r24
			UEDATX = 0;
 724:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 726:	8e ef       	ldi	r24, 0xFE	; 254
 728:	80 93 e8 00 	sts	0x00E8, r24
 72c:	2e c0       	rjmp	.+92     	; 0x78a <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 72e:	98 2f       	mov	r25, r24
 730:	9d 7f       	andi	r25, 0xFD	; 253
 732:	91 30       	cpi	r25, 0x01	; 1
 734:	19 f5       	brne	.+70     	; 0x77c <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 736:	62 30       	cpi	r22, 0x02	; 2
 738:	09 f5       	brne	.+66     	; 0x77c <__vector_11+0x2ce>
 73a:	23 2b       	or	r18, r19
 73c:	f9 f4       	brne	.+62     	; 0x77c <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 73e:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 740:	9f ef       	ldi	r25, 0xFF	; 255
 742:	94 0f       	add	r25, r20
 744:	94 30       	cpi	r25, 0x04	; 4
 746:	d0 f4       	brcc	.+52     	; 0x77c <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 748:	9e ef       	ldi	r25, 0xFE	; 254
 74a:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 74e:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 752:	83 30       	cpi	r24, 0x03	; 3
 754:	21 f4       	brne	.+8      	; 0x75e <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 756:	81 e2       	ldi	r24, 0x21	; 33
 758:	80 93 eb 00 	sts	0x00EB, r24
 75c:	16 c0       	rjmp	.+44     	; 0x78a <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 75e:	89 e1       	ldi	r24, 0x19	; 25
 760:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <__vector_11+0x2c0>
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	4a 95       	dec	r20
 770:	e2 f7       	brpl	.-8      	; 0x76a <__vector_11+0x2bc>
 772:	ea ee       	ldi	r30, 0xEA	; 234
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 83       	st	Z, r24
					UERST = 0;
 778:	10 82       	st	Z, r1
 77a:	07 c0       	rjmp	.+14     	; 0x78a <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 77c:	81 e2       	ldi	r24, 0x21	; 33
 77e:	80 93 eb 00 	sts	0x00EB, r24
 782:	03 c0       	rjmp	.+6      	; 0x78a <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 784:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 786:	21 11       	cpse	r18, r1
 788:	f7 ce       	rjmp	.-530    	; 0x578 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 78a:	ff 91       	pop	r31
 78c:	ef 91       	pop	r30
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	bf 91       	pop	r27
 794:	af 91       	pop	r26
 796:	9f 91       	pop	r25
 798:	8f 91       	pop	r24
 79a:	7f 91       	pop	r23
 79c:	6f 91       	pop	r22
 79e:	5f 91       	pop	r21
 7a0:	4f 91       	pop	r20
 7a2:	3f 91       	pop	r19
 7a4:	2f 91       	pop	r18
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	0f 90       	pop	r0
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	0f 90       	pop	r0
 7b0:	1f 90       	pop	r1
 7b2:	18 95       	reti

000007b4 <__vector_36>:
uint8_t target_address = 0;
uint8_t target_control = 0;
uint8_t target_message[MSG_BUFFER_SIZE] = {0};

ISR(TWI_vect)
{
 7b4:	1f 92       	push	r1
 7b6:	0f 92       	push	r0
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	0f 92       	push	r0
 7bc:	11 24       	eor	r1, r1
 7be:	2f 93       	push	r18
 7c0:	3f 93       	push	r19
 7c2:	4f 93       	push	r20
 7c4:	5f 93       	push	r21
 7c6:	6f 93       	push	r22
 7c8:	7f 93       	push	r23
 7ca:	8f 93       	push	r24
 7cc:	9f 93       	push	r25
 7ce:	af 93       	push	r26
 7d0:	bf 93       	push	r27
 7d2:	ef 93       	push	r30
 7d4:	ff 93       	push	r31
	cli();
 7d6:	f8 94       	cli
	tw_status = (TWSR & MASK);
 7d8:	80 91 b9 00 	lds	r24, 0x00B9
 7dc:	e8 2f       	mov	r30, r24
 7de:	e8 7f       	andi	r30, 0xF8	; 248
 7e0:	e0 93 13 01 	sts	0x0113, r30
	
	switch(tw_status)
 7e4:	8e 2f       	mov	r24, r30
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	fc 01       	movw	r30, r24
 7ea:	38 97       	sbiw	r30, 0x08	; 8
 7ec:	e1 35       	cpi	r30, 0x51	; 81
 7ee:	f1 05       	cpc	r31, r1
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__vector_36+0x40>
 7f2:	3f c0       	rjmp	.+126    	; 0x872 <__vector_36+0xbe>
 7f4:	ea 5a       	subi	r30, 0xAA	; 170
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__tablejump2__>
	{
		//Successfully transmitted start condition
		case MASTER_START_TRANSMITTED:
		{
			twi_master_sla_send_address(target_address, target_control);					// broadcast slave address
 7fc:	60 91 10 01 	lds	r22, 0x0110
 800:	80 91 11 01 	lds	r24, 0x0111
 804:	0e 94 0b 02 	call	0x416	; 0x416 <twi_master_sla_send_address>
			break;
 808:	34 c0       	rjmp	.+104    	; 0x872 <__vector_36+0xbe>
		}
		case MASTER_REPEAT_TRANSMITTED:
		{
			error_handler(SET);
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 3c 01 	call	0x278	; 0x278 <error_handler>
			break;
 810:	30 c0       	rjmp	.+96     	; 0x872 <__vector_36+0xbe>
		}
		case MASTER_SLA_R_ACK_RECIEVED:
		{
			error_handler(SET);
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	0e 94 3c 01 	call	0x278	; 0x278 <error_handler>
			break;
 818:	2c c0       	rjmp	.+88     	; 0x872 <__vector_36+0xbe>
		}
		case MASTER_SLA_R_NACK_RECIEVED:
		{
			error_handler(SET);											// error occurred
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	0e 94 3c 01 	call	0x278	; 0x278 <error_handler>
			break;
 820:	28 c0       	rjmp	.+80     	; 0x872 <__vector_36+0xbe>
		}
		case MASTER_SLA_W_ACK_RECIEVED:
		{
			msg_count = 0;
 822:	10 92 12 01 	sts	0x0112, r1
			//Start bit 0xFF
			twi_master_send_data(START_BIT);
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	0e 94 13 02 	call	0x426	; 0x426 <twi_master_send_data>
			break;
 82c:	22 c0       	rjmp	.+68     	; 0x872 <__vector_36+0xbe>
		}
		case MASTER_SLA_W_NACK_RECIEVED:
		{
			error_handler(SET);											// error occurred
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	0e 94 3c 01 	call	0x278	; 0x278 <error_handler>
			break;
 834:	1e c0       	rjmp	.+60     	; 0x872 <__vector_36+0xbe>
		}
		case MASTER_DATA_TX_ACK_RECIEVED:
		{
			//Send the message
			if(msg_count < MSG_BUFFER_SIZE)
 836:	e0 91 12 01 	lds	r30, 0x0112
 83a:	e2 30       	cpi	r30, 0x02	; 2
 83c:	60 f4       	brcc	.+24     	; 0x856 <__vector_36+0xa2>
			{
				twi_master_send_data(target_message[msg_count]);
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	e2 5f       	subi	r30, 0xF2	; 242
 842:	fe 4f       	sbci	r31, 0xFE	; 254
 844:	80 81       	ld	r24, Z
 846:	0e 94 13 02 	call	0x426	; 0x426 <twi_master_send_data>
				msg_count++;
 84a:	80 91 12 01 	lds	r24, 0x0112
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	80 93 12 01 	sts	0x0112, r24
 854:	0e c0       	rjmp	.+28     	; 0x872 <__vector_36+0xbe>
			}
			else
			{
				msg_count =0;
 856:	10 92 12 01 	sts	0x0112, r1
				twi_master_stop_condition();
 85a:	0e 94 07 02 	call	0x40e	; 0x40e <twi_master_stop_condition>
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__vector_36+0xbe>
			}			
			break;
		}
		case MASTER_DATA_TX_NACK_RECIEVED:
		{
			twi_master_stop_condition();
 860:	0e 94 07 02 	call	0x40e	; 0x40e <twi_master_stop_condition>
			error_handler(SET);	
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	0e 94 3c 01 	call	0x278	; 0x278 <error_handler>
			break;
 86a:	03 c0       	rjmp	.+6      	; 0x872 <__vector_36+0xbe>
		}
		case MASTER_DATA_RX_NACK_TRANSMITTED:
		{
			error_handler(SET);													// error occurred	
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 3c 01 	call	0x278	; 0x278 <error_handler>
		default:
		{
			break;
		}
	}
	sei();
 872:	78 94       	sei
}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

00000896 <main>:


int main(void)
{
	sei();
 896:	78 94       	sei
	error_init(ERROR_PORT, ERROR_LED_GREEN_PIN, ERROR_LED_RED_PIN);
 898:	47 e0       	ldi	r20, 0x07	; 7
 89a:	66 e0       	ldi	r22, 0x06	; 6
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	0e 94 2b 01 	call	0x256	; 0x256 <error_init>
	twi_master_init();
 8a2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <twi_master_init>
	twi_master_start_condition();
 8a6:	0e 94 03 02 	call	0x406	; 0x406 <twi_master_start_condition>
	
	//Send message to Autopilot
	target_address = AUTOPILOT_ADDRESS;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	80 93 11 01 	sts	0x0111, r24
	target_control = TWI_WRITE;
 8b0:	10 92 10 01 	sts	0x0110, r1
	target_message[0] = 0x01;
 8b4:	ee e0       	ldi	r30, 0x0E	; 14
 8b6:	f1 e0       	ldi	r31, 0x01	; 1
 8b8:	80 83       	st	Z, r24
	target_message[1] = 0x01;
 8ba:	81 83       	std	Z+1, r24	; 0x01
	
	while (1) 
	{
		IO_flash(ERROR_PORT,ERROR_LED_GREEN_PIN);
 8bc:	66 e0       	ldi	r22, 0x06	; 6
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <IO_flash>
	}
 8c4:	fb cf       	rjmp	.-10     	; 0x8bc <main+0x26>

000008c6 <__tablejump2__>:
 8c6:	ee 0f       	add	r30, r30
 8c8:	ff 1f       	adc	r31, r31
 8ca:	05 90       	lpm	r0, Z+
 8cc:	f4 91       	lpm	r31, Z
 8ce:	e0 2d       	mov	r30, r0
 8d0:	09 94       	ijmp

000008d2 <_exit>:
 8d2:	f8 94       	cli

000008d4 <__stop_program>:
 8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <__stop_program>
