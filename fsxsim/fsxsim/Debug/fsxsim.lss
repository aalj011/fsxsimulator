
fsxsim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000950  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800108  00800108  000009ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000134c  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b9  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013df  00000000  00000000  000025d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000039b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000779  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018fc  00000000  00000000  000044b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
   4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
   8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
   c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  10:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  14:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  18:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  1c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  20:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  24:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  28:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_10>
  2c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_11>
  30:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  34:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  38:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  3c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  40:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  44:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  48:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  4c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  50:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  54:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  58:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  5c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  60:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  64:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  68:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  6c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  70:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  74:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  78:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  7c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  80:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  84:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  88:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  8c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  90:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_36>
  94:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  98:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  9c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  a0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  a4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  a8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
  ac:	04 04       	cpc	r0, r4
  ae:	43 04       	cpc	r4, r3
  b0:	43 04       	cpc	r4, r3
  b2:	43 04       	cpc	r4, r3
  b4:	43 04       	cpc	r4, r3
  b6:	43 04       	cpc	r4, r3
  b8:	43 04       	cpc	r4, r3
  ba:	43 04       	cpc	r4, r3
  bc:	43 04       	cpc	r4, r3
  be:	43 04       	cpc	r4, r3
  c0:	43 04       	cpc	r4, r3
  c2:	43 04       	cpc	r4, r3
  c4:	43 04       	cpc	r4, r3
  c6:	43 04       	cpc	r4, r3
  c8:	43 04       	cpc	r4, r3
  ca:	43 04       	cpc	r4, r3
  cc:	10 04       	cpc	r1, r0
  ce:	43 04       	cpc	r4, r3
  d0:	43 04       	cpc	r4, r3
  d2:	43 04       	cpc	r4, r3
  d4:	43 04       	cpc	r4, r3
  d6:	43 04       	cpc	r4, r3
  d8:	43 04       	cpc	r4, r3
  da:	43 04       	cpc	r4, r3
  dc:	18 04       	cpc	r1, r8
  de:	43 04       	cpc	r4, r3
  e0:	43 04       	cpc	r4, r3
  e2:	43 04       	cpc	r4, r3
  e4:	43 04       	cpc	r4, r3
  e6:	43 04       	cpc	r4, r3
  e8:	43 04       	cpc	r4, r3
  ea:	43 04       	cpc	r4, r3
  ec:	1c 04       	cpc	r1, r12
  ee:	43 04       	cpc	r4, r3
  f0:	43 04       	cpc	r4, r3
  f2:	43 04       	cpc	r4, r3
  f4:	43 04       	cpc	r4, r3
  f6:	43 04       	cpc	r4, r3
  f8:	43 04       	cpc	r4, r3
  fa:	43 04       	cpc	r4, r3
  fc:	34 04       	cpc	r3, r4
  fe:	43 04       	cpc	r4, r3
 100:	43 04       	cpc	r4, r3
 102:	43 04       	cpc	r4, r3
 104:	43 04       	cpc	r4, r3
 106:	43 04       	cpc	r4, r3
 108:	43 04       	cpc	r4, r3
 10a:	43 04       	cpc	r4, r3
 10c:	43 04       	cpc	r4, r3
 10e:	43 04       	cpc	r4, r3
 110:	43 04       	cpc	r4, r3
 112:	43 04       	cpc	r4, r3
 114:	43 04       	cpc	r4, r3
 116:	43 04       	cpc	r4, r3
 118:	43 04       	cpc	r4, r3
 11a:	43 04       	cpc	r4, r3
 11c:	38 04       	cpc	r3, r8
 11e:	43 04       	cpc	r4, r3
 120:	43 04       	cpc	r4, r3
 122:	43 04       	cpc	r4, r3
 124:	43 04       	cpc	r4, r3
 126:	43 04       	cpc	r4, r3
 128:	43 04       	cpc	r4, r3
 12a:	43 04       	cpc	r4, r3
 12c:	3c 04       	cpc	r3, r12
 12e:	43 04       	cpc	r4, r3
 130:	43 04       	cpc	r4, r3
 132:	43 04       	cpc	r4, r3
 134:	43 04       	cpc	r4, r3
 136:	43 04       	cpc	r4, r3
 138:	43 04       	cpc	r4, r3
 13a:	43 04       	cpc	r4, r3
 13c:	40 04       	cpc	r4, r0

0000013e <__trampolines_end>:
 13e:	00 01       	movw	r0, r0
 140:	00 00       	nop
 142:	eb 01       	movw	r28, r22
 144:	12 00       	.word	0x0012	; ????
 146:	02 00       	.word	0x0002	; ????
 148:	00 a8       	ldd	r0, Z+48	; 0x30
 14a:	01 43       	sbci	r16, 0x31	; 49
 14c:	00 03       	mulsu	r16, r16
 14e:	00 00       	nop
 150:	a4 01       	movw	r20, r8
 152:	04 01       	movw	r0, r8
 154:	03 09       	sbc	r16, r3
 156:	04 8e       	std	Z+28, r0	; 0x1c
 158:	01 14       	cp	r0, r1
 15a:	02 03       	mulsu	r16, r18
 15c:	09 04       	cpc	r0, r9
 15e:	76 01       	movw	r14, r12
 160:	16 03       	mulsu	r17, r22
 162:	03 09       	sbc	r16, r3
 164:	04 68       	ori	r16, 0x84	; 132
 166:	01 0c       	add	r0, r1

00000168 <string3>:
 168:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000176 <string2>:
 176:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 186:	69 00 61 00 6c 00 00 00                             i.a.l...

0000018e <string1>:
 18e:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 19e:	6d 00 65 00 00 00                                   m.e...

000001a4 <string0>:
 1a4:	04 03 09 04                                         ....

000001a8 <config1_descriptor>:
 1a8:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 1b8:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 1c8:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 1d8:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 1e8:	40 00 00                                            @..

000001eb <device_descriptor>:
 1eb:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 1fb:	03 01                                               ..

000001fd <endpoint_config_table>:
 1fd:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000208 <__ctors_end>:
 208:	11 24       	eor	r1, r1
 20a:	1f be       	out	0x3f, r1	; 63
 20c:	cf ef       	ldi	r28, 0xFF	; 255
 20e:	da e0       	ldi	r29, 0x0A	; 10
 210:	de bf       	out	0x3e, r29	; 62
 212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
 214:	11 e0       	ldi	r17, 0x01	; 1
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b1 e0       	ldi	r27, 0x01	; 1
 21a:	e0 e5       	ldi	r30, 0x50	; 80
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	02 c0       	rjmp	.+4      	; 0x224 <__do_copy_data+0x10>
 220:	05 90       	lpm	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	a8 30       	cpi	r26, 0x08	; 8
 226:	b1 07       	cpc	r27, r17
 228:	d9 f7       	brne	.-10     	; 0x220 <__do_copy_data+0xc>

0000022a <__do_clear_bss>:
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	a8 e0       	ldi	r26, 0x08	; 8
 22e:	b1 e0       	ldi	r27, 0x01	; 1
 230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
 232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
 234:	a9 31       	cpi	r26, 0x19	; 25
 236:	b2 07       	cpc	r27, r18
 238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>
 23a:	0e 94 55 04 	call	0x8aa	; 0x8aa <main>
 23e:	0c 94 a6 04 	jmp	0x94c	; 0x94c <_exit>

00000242 <__bad_interrupt>:
 242:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000246 <error_init>:
static uint8_t error_green_led_pin;
static uint8_t error_red_led_pin;

void error_init(ports port, uint8_t green_led_pin, uint8_t red_led_pin)
{
	error_port = port;
 246:	80 93 0a 01 	sts	0x010A, r24
	error_red_led_pin = red_led_pin;
 24a:	40 93 08 01 	sts	0x0108, r20
	error_green_led_pin = green_led_pin;
 24e:	60 93 09 01 	sts	0x0109, r22
	
	// clear the io required
	IO_write(error_port,error_green_led_pin,SET);		// green light
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);		// red light
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	60 91 08 01 	lds	r22, 0x0108
 25e:	80 91 0a 01 	lds	r24, 0x010A
 262:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
 266:	08 95       	ret

00000268 <error_handler>:
}


void error_handler(uint8_t status)
{
 268:	cf 93       	push	r28
 26a:	c8 2f       	mov	r28, r24
	// clear the io required
	IO_write(error_port,error_green_led_pin,CLEAR);
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	60 91 09 01 	lds	r22, 0x0109
 272:	80 91 0a 01 	lds	r24, 0x010A
 276:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	60 91 08 01 	lds	r22, 0x0108
 280:	80 91 0a 01 	lds	r24, 0x010A
 284:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>

	if(status)
 288:	cc 23       	and	r28, r28
 28a:	39 f0       	breq	.+14     	; 0x29a <error_handler+0x32>
	{
		// error has been generated stay in this while loop
		while(1)
		{
			IO_flash(error_port,error_red_led_pin);
 28c:	60 91 08 01 	lds	r22, 0x0108
 290:	80 91 0a 01 	lds	r24, 0x010A
 294:	0e 94 ce 01 	call	0x39c	; 0x39c <IO_flash>
		}
 298:	f9 cf       	rjmp	.-14     	; 0x28c <error_handler+0x24>
	}
	else
	{
		// no error generated
		IO_write(error_port,error_green_led_pin,SET);
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	60 91 09 01 	lds	r22, 0x0109
 2a0:	80 91 0a 01 	lds	r24, 0x010A
 2a4:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
	}
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <IO_write>:
			break;
		}
	}
	
	return pinvalue;
}
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	b9 f1       	breq	.+110    	; 0x31e <IO_write+0x72>
 2b0:	28 f4       	brcc	.+10     	; 0x2bc <IO_write+0x10>
 2b2:	88 23       	and	r24, r24
 2b4:	51 f0       	breq	.+20     	; 0x2ca <IO_write+0x1e>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	e9 f0       	breq	.+58     	; 0x2f4 <IO_write+0x48>
 2ba:	08 95       	ret
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	09 f4       	brne	.+2      	; 0x2c2 <IO_write+0x16>
 2c0:	43 c0       	rjmp	.+134    	; 0x348 <IO_write+0x9c>
 2c2:	84 30       	cpi	r24, 0x04	; 4
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <IO_write+0x1c>
 2c6:	55 c0       	rjmp	.+170    	; 0x372 <IO_write+0xc6>
 2c8:	08 95       	ret
 2ca:	24 b1       	in	r18, 0x04	; 4
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <IO_write+0x2a>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <IO_write+0x26>
 2da:	28 2b       	or	r18, r24
 2dc:	24 b9       	out	0x04, r18	; 4
 2de:	44 23       	and	r20, r20
 2e0:	21 f0       	breq	.+8      	; 0x2ea <IO_write+0x3e>
 2e2:	95 b1       	in	r25, 0x05	; 5
 2e4:	89 2b       	or	r24, r25
 2e6:	85 b9       	out	0x05, r24	; 5
 2e8:	08 95       	ret
 2ea:	95 b1       	in	r25, 0x05	; 5
 2ec:	80 95       	com	r24
 2ee:	89 23       	and	r24, r25
 2f0:	85 b9       	out	0x05, r24	; 5
 2f2:	08 95       	ret
 2f4:	27 b1       	in	r18, 0x07	; 7
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <IO_write+0x54>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <IO_write+0x50>
 304:	28 2b       	or	r18, r24
 306:	27 b9       	out	0x07, r18	; 7
 308:	44 23       	and	r20, r20
 30a:	21 f0       	breq	.+8      	; 0x314 <IO_write+0x68>
 30c:	98 b1       	in	r25, 0x08	; 8
 30e:	89 2b       	or	r24, r25
 310:	88 b9       	out	0x08, r24	; 8
 312:	08 95       	ret
 314:	98 b1       	in	r25, 0x08	; 8
 316:	80 95       	com	r24
 318:	89 23       	and	r24, r25
 31a:	88 b9       	out	0x08, r24	; 8
 31c:	08 95       	ret
 31e:	2a b1       	in	r18, 0x0a	; 10
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <IO_write+0x7e>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <IO_write+0x7a>
 32e:	28 2b       	or	r18, r24
 330:	2a b9       	out	0x0a, r18	; 10
 332:	44 23       	and	r20, r20
 334:	21 f0       	breq	.+8      	; 0x33e <IO_write+0x92>
 336:	9b b1       	in	r25, 0x0b	; 11
 338:	89 2b       	or	r24, r25
 33a:	8b b9       	out	0x0b, r24	; 11
 33c:	08 95       	ret
 33e:	9b b1       	in	r25, 0x0b	; 11
 340:	80 95       	com	r24
 342:	89 23       	and	r24, r25
 344:	8b b9       	out	0x0b, r24	; 11
 346:	08 95       	ret
 348:	2d b1       	in	r18, 0x0d	; 13
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <IO_write+0xa8>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <IO_write+0xa4>
 358:	28 2b       	or	r18, r24
 35a:	2d b9       	out	0x0d, r18	; 13
 35c:	44 23       	and	r20, r20
 35e:	21 f0       	breq	.+8      	; 0x368 <IO_write+0xbc>
 360:	9e b1       	in	r25, 0x0e	; 14
 362:	89 2b       	or	r24, r25
 364:	8e b9       	out	0x0e, r24	; 14
 366:	08 95       	ret
 368:	9e b1       	in	r25, 0x0e	; 14
 36a:	80 95       	com	r24
 36c:	89 23       	and	r24, r25
 36e:	8e b9       	out	0x0e, r24	; 14
 370:	08 95       	ret
 372:	20 b3       	in	r18, 0x10	; 16
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <IO_write+0xd2>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <IO_write+0xce>
 382:	28 2b       	or	r18, r24
 384:	20 bb       	out	0x10, r18	; 16
 386:	44 23       	and	r20, r20
 388:	21 f0       	breq	.+8      	; 0x392 <IO_write+0xe6>
 38a:	91 b3       	in	r25, 0x11	; 17
 38c:	89 2b       	or	r24, r25
 38e:	81 bb       	out	0x11, r24	; 17
 390:	08 95       	ret
 392:	91 b3       	in	r25, 0x11	; 17
 394:	80 95       	com	r24
 396:	89 23       	and	r24, r25
 398:	81 bb       	out	0x11, r24	; 17
 39a:	08 95       	ret

0000039c <IO_flash>:
Purpose:		Flashes the IO of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash(ports port, uint8_t pinnumber)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	c8 2f       	mov	r28, r24
 3a2:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3aa:	2f e7       	ldi	r18, 0x7F	; 127
 3ac:	8a e1       	ldi	r24, 0x1A	; 26
 3ae:	96 e0       	ldi	r25, 0x06	; 6
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <IO_flash+0x14>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <IO_flash+0x1e>
 3ba:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, SET);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	6d 2f       	mov	r22, r29
 3c0:	8c 2f       	mov	r24, r28
 3c2:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
 3c6:	2f e7       	ldi	r18, 0x7F	; 127
 3c8:	8a e1       	ldi	r24, 0x1A	; 26
 3ca:	96 e0       	ldi	r25, 0x06	; 6
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <IO_flash+0x30>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <IO_flash+0x3a>
 3d6:	00 00       	nop
	_delay_ms(2000);
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <IO_flash_slow>:
Purpose:		Flashes the IO slowely of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash_slow(ports port, uint8_t pinnumber)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	c8 2f       	mov	r28, r24
 3e4:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
 3ec:	2f e7       	ldi	r18, 0x7F	; 127
 3ee:	84 e8       	ldi	r24, 0x84	; 132
 3f0:	9e e1       	ldi	r25, 0x1E	; 30
 3f2:	21 50       	subi	r18, 0x01	; 1
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <IO_flash_slow+0x14>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <IO_flash_slow+0x1e>
 3fc:	00 00       	nop
	_delay_ms(10000);
	IO_write(port, pinnumber, SET);
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	6d 2f       	mov	r22, r29
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 56 01 	call	0x2ac	; 0x2ac <IO_write>
 408:	2f e7       	ldi	r18, 0x7F	; 127
 40a:	84 e8       	ldi	r24, 0x84	; 132
 40c:	9e e1       	ldi	r25, 0x1E	; 30
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	_delay_ms(10000);
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <TWI_EXT_MasterInit>:
Note:			None
****************************************************************************/
void TWI_EXT_MasterInit(void)
{
	//PRR0 = (0<<PRTWI);													//Turn off Power reduction on TWI 							
	TWSR = (0<<TWPS0)|(0<<TWPS1);
 420:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = TWBR_BIT_RATE;													//Bit rate at 8mhz 100khz 0x20	
 424:	80 e2       	ldi	r24, 0x20	; 32
 426:	80 93 b8 00 	sts	0x00B8, r24
	TWDR = 0xFF;															//Dummy data
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	80 93 bb 00 	sts	0x00BB, r24
 430:	08 95       	ret

00000432 <TWI_EXT_MasterSlaveLoadAddress>:
Note:			None
****************************************************************************/
void TWI_EXT_MasterSlaveLoadAddress(uint8_t address, uint8_t read)
{
	uint8_t slave_address = 0;
	slave_address = (address << 1)| (read);
 432:	88 0f       	add	r24, r24
 434:	68 2b       	or	r22, r24
	
	TWDR = slave_address;													//Set the data register with the slave address and the read/write bit
 436:	60 93 bb 00 	sts	0x00BB, r22
 43a:	08 95       	ret

0000043c <TWI_EXT_LoadData>:
Returns:		None
Note:			None
****************************************************************************/
void TWI_EXT_LoadData(uint8_t data)
{	
	TWDR = data;	
 43c:	80 93 bb 00 	sts	0x00BB, r24
 440:	08 95       	ret

00000442 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 454:	e1 ee       	ldi	r30, 0xE1	; 225
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
        UDINT = 0;
 45a:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 45c:	83 ff       	sbrs	r24, 3
 45e:	11 c0       	rjmp	.+34     	; 0x482 <__vector_10+0x40>
		UENUM = 0;
 460:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 46a:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 46e:	92 e1       	ldi	r25, 0x12	; 18
 470:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 474:	98 e0       	ldi	r25, 0x08	; 8
 476:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 47a:	10 92 0d 01 	sts	0x010D, r1
		cdc_line_rtsdtr = 0;
 47e:	10 92 0b 01 	sts	0x010B, r1
        }
	if (intbits & (1<<SOFI)) {
 482:	82 ff       	sbrs	r24, 2
 484:	13 c0       	rjmp	.+38     	; 0x4ac <__vector_10+0x6a>
		if (usb_configuration) {
 486:	80 91 0d 01 	lds	r24, 0x010D
 48a:	88 23       	and	r24, r24
 48c:	79 f0       	breq	.+30     	; 0x4ac <__vector_10+0x6a>
			t = transmit_flush_timer;
 48e:	80 91 0c 01 	lds	r24, 0x010C
			if (t) {
 492:	88 23       	and	r24, r24
 494:	59 f0       	breq	.+22     	; 0x4ac <__vector_10+0x6a>
				transmit_flush_timer = --t;
 496:	81 50       	subi	r24, 0x01	; 1
 498:	80 93 0c 01 	sts	0x010C, r24
				if (!t) {
 49c:	81 11       	cpse	r24, r1
 49e:	06 c0       	rjmp	.+12     	; 0x4ac <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 4a0:	84 e0       	ldi	r24, 0x04	; 4
 4a2:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 4a6:	8a e3       	ldi	r24, 0x3A	; 58
 4a8:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4e8:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4ec:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4f0:	83 ff       	sbrs	r24, 3
 4f2:	4c c1       	rjmp	.+664    	; 0x78c <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 4f4:	e1 ef       	ldi	r30, 0xF1	; 241
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 4fa:	80 81       	ld	r24, Z
                wValue = UEDATX;
 4fc:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 4fe:	90 81       	ld	r25, Z
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 504:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 506:	90 81       	ld	r25, Z
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	59 2b       	or	r21, r25
                wLength = UEDATX;
 50c:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 50e:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 510:	92 ef       	ldi	r25, 0xF2	; 242
 512:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 516:	86 30       	cpi	r24, 0x06	; 6
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_11+0x5e>
 51a:	58 c0       	rjmp	.+176    	; 0x5cc <__vector_11+0x10e>
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 51e:	81 e2       	ldi	r24, 0x21	; 33
 520:	80 93 eb 00 	sts	0x00EB, r24
					return;
 524:	3a c1       	rjmp	.+628    	; 0x79a <__vector_11+0x2dc>
 526:	66 e0       	ldi	r22, 0x06	; 6
 528:	8e e3       	ldi	r24, 0x3E	; 62
 52a:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
 52c:	fc 01       	movw	r30, r24
 52e:	a5 91       	lpm	r26, Z+
 530:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 532:	2a 17       	cp	r18, r26
 534:	3b 07       	cpc	r19, r27
 536:	11 f0       	breq	.+4      	; 0x53c <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 538:	07 96       	adiw	r24, 0x07	; 7
					continue;
 53a:	23 c0       	rjmp	.+70     	; 0x582 <__vector_11+0xc4>
				}
				list += 2;
 53c:	fc 01       	movw	r30, r24
 53e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 540:	a5 91       	lpm	r26, Z+
 542:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 544:	4a 17       	cp	r20, r26
 546:	5b 07       	cpc	r21, r27
 548:	11 f0       	breq	.+4      	; 0x54e <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 54a:	07 96       	adiw	r24, 0x07	; 7
					continue;
 54c:	1a c0       	rjmp	.+52     	; 0x582 <__vector_11+0xc4>
				}
				list += 2;
 54e:	fc 01       	movw	r30, r24
 550:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 552:	45 91       	lpm	r20, Z+
 554:	54 91       	lpm	r21, Z
				list += 2;
 556:	fc 01       	movw	r30, r24
 558:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 55a:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 55c:	87 2f       	mov	r24, r23
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 562:	8f 3f       	cpi	r24, 0xFF	; 255
 564:	91 05       	cpc	r25, r1
 566:	19 f0       	breq	.+6      	; 0x56e <__vector_11+0xb0>
 568:	10 f0       	brcs	.+4      	; 0x56e <__vector_11+0xb0>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	82 17       	cp	r24, r18
 570:	08 f4       	brcc	.+2      	; 0x574 <__vector_11+0xb6>
 572:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 574:	a8 ee       	ldi	r26, 0xE8	; 232
 576:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 578:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 57a:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 57c:	c1 ef       	ldi	r28, 0xF1	; 241
 57e:	d0 e0       	ldi	r29, 0x00	; 0
 580:	03 c0       	rjmp	.+6      	; 0x588 <__vector_11+0xca>
 582:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 584:	99 f6       	brne	.-90     	; 0x52c <__vector_11+0x6e>
 586:	cb cf       	rjmp	.-106    	; 0x51e <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 588:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 58a:	98 2f       	mov	r25, r24
 58c:	95 70       	andi	r25, 0x05	; 5
 58e:	e1 f3       	breq	.-8      	; 0x588 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 590:	82 fd       	sbrc	r24, 2
 592:	03 c1       	rjmp	.+518    	; 0x79a <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 594:	32 2f       	mov	r19, r18
 596:	21 31       	cpi	r18, 0x11	; 17
 598:	08 f0       	brcs	.+2      	; 0x59c <__vector_11+0xde>
 59a:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 59c:	33 23       	and	r19, r19
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__vector_11+0xe4>
 5a0:	f9 c0       	rjmp	.+498    	; 0x794 <__vector_11+0x2d6>
 5a2:	fa 01       	movw	r30, r20
 5a4:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 5a6:	94 91       	lpm	r25, Z
 5a8:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 5aa:	81 50       	subi	r24, 0x01	; 1
 5ac:	31 96       	adiw	r30, 0x01	; 1
 5ae:	81 11       	cpse	r24, r1
 5b0:	fa cf       	rjmp	.-12     	; 0x5a6 <__vector_11+0xe8>
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	83 0f       	add	r24, r19
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	48 0f       	add	r20, r24
 5bc:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 5be:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c0:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5c2:	21 11       	cpse	r18, r1
 5c4:	e1 cf       	rjmp	.-62     	; 0x588 <__vector_11+0xca>
 5c6:	30 31       	cpi	r19, 0x10	; 16
 5c8:	f9 f2       	breq	.-66     	; 0x588 <__vector_11+0xca>
 5ca:	e7 c0       	rjmp	.+462    	; 0x79a <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 5cc:	85 30       	cpi	r24, 0x05	; 5
 5ce:	61 f4       	brne	.+24     	; 0x5e8 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5d0:	8e ef       	ldi	r24, 0xFE	; 254
 5d2:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5d6:	e8 ee       	ldi	r30, 0xE8	; 232
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	80 ff       	sbrs	r24, 0
 5de:	fd cf       	rjmp	.-6      	; 0x5da <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 5e0:	20 68       	ori	r18, 0x80	; 128
 5e2:	20 93 e3 00 	sts	0x00E3, r18
			return;
 5e6:	d9 c0       	rjmp	.+434    	; 0x79a <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5e8:	89 30       	cpi	r24, 0x09	; 9
 5ea:	09 f0       	breq	.+2      	; 0x5ee <__vector_11+0x130>
 5ec:	35 c0       	rjmp	.+106    	; 0x658 <__vector_11+0x19a>
 5ee:	61 11       	cpse	r22, r1
 5f0:	cd c0       	rjmp	.+410    	; 0x78c <__vector_11+0x2ce>
			usb_configuration = wValue;
 5f2:	20 93 0d 01 	sts	0x010D, r18
			cdc_line_rtsdtr = 0;
 5f6:	10 92 0b 01 	sts	0x010B, r1
			transmit_flush_timer = 0;
 5fa:	10 92 0c 01 	sts	0x010C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5fe:	8e ef       	ldi	r24, 0xFE	; 254
 600:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 604:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 606:	2d ef       	ldi	r18, 0xFD	; 253
 608:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 60a:	c9 ee       	ldi	r28, 0xE9	; 233
 60c:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 60e:	ab ee       	ldi	r26, 0xEB	; 235
 610:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 612:	0c ee       	ldi	r16, 0xEC	; 236
 614:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 616:	6d ee       	ldi	r22, 0xED	; 237
 618:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 61a:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 61c:	a9 01       	movw	r20, r18
 61e:	4f 5f       	subi	r20, 0xFF	; 255
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	f9 01       	movw	r30, r18
 624:	94 91       	lpm	r25, Z
				UECONX = en;
 626:	9c 93       	st	X, r25
				if (en) {
 628:	99 23       	and	r25, r25
 62a:	61 f0       	breq	.+24     	; 0x644 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 62c:	fa 01       	movw	r30, r20
 62e:	44 91       	lpm	r20, Z
 630:	f8 01       	movw	r30, r16
 632:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 634:	f9 01       	movw	r30, r18
 636:	32 96       	adiw	r30, 0x02	; 2
 638:	94 91       	lpm	r25, Z
 63a:	2d 5f       	subi	r18, 0xFD	; 253
 63c:	3f 4f       	sbci	r19, 0xFF	; 255
 63e:	fb 01       	movw	r30, r22
 640:	90 83       	st	Z, r25
 642:	01 c0       	rjmp	.+2      	; 0x646 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 644:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	85 30       	cpi	r24, 0x05	; 5
 64a:	39 f7       	brne	.-50     	; 0x61a <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 64c:	ea ee       	ldi	r30, 0xEA	; 234
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	8e e1       	ldi	r24, 0x1E	; 30
 652:	80 83       	st	Z, r24
        		UERST = 0;
 654:	10 82       	st	Z, r1
			return;
 656:	a1 c0       	rjmp	.+322    	; 0x79a <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 658:	88 30       	cpi	r24, 0x08	; 8
 65a:	81 f4       	brne	.+32     	; 0x67c <__vector_11+0x1be>
 65c:	60 38       	cpi	r22, 0x80	; 128
 65e:	09 f0       	breq	.+2      	; 0x662 <__vector_11+0x1a4>
 660:	95 c0       	rjmp	.+298    	; 0x78c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 662:	e8 ee       	ldi	r30, 0xE8	; 232
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	80 ff       	sbrs	r24, 0
 66a:	fd cf       	rjmp	.-6      	; 0x666 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 66c:	80 91 0d 01 	lds	r24, 0x010D
 670:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 674:	8e ef       	ldi	r24, 0xFE	; 254
 676:	80 93 e8 00 	sts	0x00E8, r24
 67a:	8f c0       	rjmp	.+286    	; 0x79a <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 67c:	81 32       	cpi	r24, 0x21	; 33
 67e:	b9 f4       	brne	.+46     	; 0x6ae <__vector_11+0x1f0>
 680:	61 3a       	cpi	r22, 0xA1	; 161
 682:	09 f0       	breq	.+2      	; 0x686 <__vector_11+0x1c8>
 684:	83 c0       	rjmp	.+262    	; 0x78c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 686:	e8 ee       	ldi	r30, 0xE8	; 232
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	80 ff       	sbrs	r24, 0
 68e:	fd cf       	rjmp	.-6      	; 0x68a <__vector_11+0x1cc>
 690:	e0 e0       	ldi	r30, 0x00	; 0
 692:	f1 e0       	ldi	r31, 0x01	; 1
 694:	27 e0       	ldi	r18, 0x07	; 7
 696:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 698:	a1 ef       	ldi	r26, 0xF1	; 241
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	81 91       	ld	r24, Z+
 69e:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 6a0:	e2 17       	cp	r30, r18
 6a2:	f3 07       	cpc	r31, r19
 6a4:	d9 f7       	brne	.-10     	; 0x69c <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6a6:	8e ef       	ldi	r24, 0xFE	; 254
 6a8:	80 93 e8 00 	sts	0x00E8, r24
 6ac:	76 c0       	rjmp	.+236    	; 0x79a <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 6ae:	80 32       	cpi	r24, 0x20	; 32
 6b0:	d1 f4       	brne	.+52     	; 0x6e6 <__vector_11+0x228>
 6b2:	61 32       	cpi	r22, 0x21	; 33
 6b4:	09 f0       	breq	.+2      	; 0x6b8 <__vector_11+0x1fa>
 6b6:	6a c0       	rjmp	.+212    	; 0x78c <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 6b8:	e8 ee       	ldi	r30, 0xE8	; 232
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	82 ff       	sbrs	r24, 2
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <__vector_11+0x1fe>
 6c2:	e0 e0       	ldi	r30, 0x00	; 0
 6c4:	f1 e0       	ldi	r31, 0x01	; 1
 6c6:	27 e0       	ldi	r18, 0x07	; 7
 6c8:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 6ca:	a1 ef       	ldi	r26, 0xF1	; 241
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	8c 91       	ld	r24, X
 6d0:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 6d2:	e2 17       	cp	r30, r18
 6d4:	f3 07       	cpc	r31, r19
 6d6:	d9 f7       	brne	.-10     	; 0x6ce <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 6d8:	e8 ee       	ldi	r30, 0xE8	; 232
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8b ef       	ldi	r24, 0xFB	; 251
 6de:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6e0:	8e ef       	ldi	r24, 0xFE	; 254
 6e2:	80 83       	st	Z, r24
 6e4:	5a c0       	rjmp	.+180    	; 0x79a <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 6e6:	82 32       	cpi	r24, 0x22	; 34
 6e8:	71 f4       	brne	.+28     	; 0x706 <__vector_11+0x248>
 6ea:	61 32       	cpi	r22, 0x21	; 33
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <__vector_11+0x232>
 6ee:	4e c0       	rjmp	.+156    	; 0x78c <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 6f0:	20 93 0b 01 	sts	0x010B, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6f4:	e8 ee       	ldi	r30, 0xE8	; 232
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	80 ff       	sbrs	r24, 0
 6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6fe:	8e ef       	ldi	r24, 0xFE	; 254
 700:	80 93 e8 00 	sts	0x00E8, r24
 704:	4a c0       	rjmp	.+148    	; 0x79a <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 706:	81 11       	cpse	r24, r1
 708:	1a c0       	rjmp	.+52     	; 0x73e <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 70a:	e8 ee       	ldi	r30, 0xE8	; 232
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	80 ff       	sbrs	r24, 0
 712:	fd cf       	rjmp	.-6      	; 0x70e <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 714:	62 38       	cpi	r22, 0x82	; 130
 716:	51 f4       	brne	.+20     	; 0x72c <__vector_11+0x26e>
				UENUM = wIndex;
 718:	e9 ee       	ldi	r30, 0xE9	; 233
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 71e:	80 91 eb 00 	lds	r24, 0x00EB
 722:	85 fb       	bst	r24, 5
 724:	88 27       	eor	r24, r24
 726:	80 f9       	bld	r24, 0
				UENUM = 0;
 728:	10 82       	st	Z, r1
 72a:	01 c0       	rjmp	.+2      	; 0x72e <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 72c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 72e:	e1 ef       	ldi	r30, 0xF1	; 241
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 83       	st	Z, r24
			UEDATX = 0;
 734:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 736:	8e ef       	ldi	r24, 0xFE	; 254
 738:	80 93 e8 00 	sts	0x00E8, r24
 73c:	2e c0       	rjmp	.+92     	; 0x79a <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 73e:	98 2f       	mov	r25, r24
 740:	9d 7f       	andi	r25, 0xFD	; 253
 742:	91 30       	cpi	r25, 0x01	; 1
 744:	19 f5       	brne	.+70     	; 0x78c <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 746:	62 30       	cpi	r22, 0x02	; 2
 748:	09 f5       	brne	.+66     	; 0x78c <__vector_11+0x2ce>
 74a:	23 2b       	or	r18, r19
 74c:	f9 f4       	brne	.+62     	; 0x78c <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 74e:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 750:	9f ef       	ldi	r25, 0xFF	; 255
 752:	94 0f       	add	r25, r20
 754:	94 30       	cpi	r25, 0x04	; 4
 756:	d0 f4       	brcc	.+52     	; 0x78c <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 758:	9e ef       	ldi	r25, 0xFE	; 254
 75a:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 75e:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	21 f4       	brne	.+8      	; 0x76e <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 766:	81 e2       	ldi	r24, 0x21	; 33
 768:	80 93 eb 00 	sts	0x00EB, r24
 76c:	16 c0       	rjmp	.+44     	; 0x79a <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 76e:	89 e1       	ldi	r24, 0x19	; 25
 770:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <__vector_11+0x2c0>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	4a 95       	dec	r20
 780:	e2 f7       	brpl	.-8      	; 0x77a <__vector_11+0x2bc>
 782:	ea ee       	ldi	r30, 0xEA	; 234
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 83       	st	Z, r24
					UERST = 0;
 788:	10 82       	st	Z, r1
 78a:	07 c0       	rjmp	.+14     	; 0x79a <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 78c:	81 e2       	ldi	r24, 0x21	; 33
 78e:	80 93 eb 00 	sts	0x00EB, r24
 792:	03 c0       	rjmp	.+6      	; 0x79a <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 794:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 796:	21 11       	cpse	r18, r1
 798:	f7 ce       	rjmp	.-530    	; 0x588 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 79a:	ff 91       	pop	r31
 79c:	ef 91       	pop	r30
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	7f 91       	pop	r23
 7ac:	6f 91       	pop	r22
 7ae:	5f 91       	pop	r21
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__vector_36>:
static void cmd_SetHeading(void);
static void init_Variables(void);


ISR(TWI_vect)
{	
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	2f 93       	push	r18
 7d0:	3f 93       	push	r19
 7d2:	4f 93       	push	r20
 7d4:	5f 93       	push	r21
 7d6:	6f 93       	push	r22
 7d8:	7f 93       	push	r23
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
 7de:	af 93       	push	r26
 7e0:	bf 93       	push	r27
 7e2:	ef 93       	push	r30
 7e4:	ff 93       	push	r31
	cli();
 7e6:	f8 94       	cli
	switch(TW_STATUS)
 7e8:	80 91 b9 00 	lds	r24, 0x00B9
 7ec:	e8 2f       	mov	r30, r24
 7ee:	e8 7f       	andi	r30, 0xF8	; 248
 7f0:	8e 2f       	mov	r24, r30
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	fc 01       	movw	r30, r24
 7f6:	38 97       	sbiw	r30, 0x08	; 8
 7f8:	e9 34       	cpi	r30, 0x49	; 73
 7fa:	f1 05       	cpc	r31, r1
 7fc:	08 f0       	brcs	.+2      	; 0x800 <__vector_36+0x3c>
 7fe:	43 c0       	rjmp	.+134    	; 0x886 <__vector_36+0xc2>
 800:	ea 5a       	subi	r30, 0xAA	; 170
 802:	ff 4f       	sbci	r31, 0xFF	; 255
 804:	0c 94 a0 04 	jmp	0x940	; 0x940 <__tablejump2__>
	{
		case TW_START:
		{
			msg_count = 0;
 808:	10 92 16 01 	sts	0x0116, r1
			TWI_EXT_MasterSlaveLoadAddress(messagePacketHeader.address, messagePacketHeader.control);	// broadcast slave address
 80c:	ef e0       	ldi	r30, 0x0F	; 15
 80e:	f1 e0       	ldi	r31, 0x01	; 1
 810:	61 81       	ldd	r22, Z+1	; 0x01
 812:	80 81       	ld	r24, Z
 814:	0e 94 19 02 	call	0x432	; 0x432 <TWI_EXT_MasterSlaveLoadAddress>
			TWI_SendTransmit();
 818:	85 e8       	ldi	r24, 0x85	; 133
 81a:	80 93 bc 00 	sts	0x00BC, r24

			break;
 81e:	33 c0       	rjmp	.+102    	; 0x886 <__vector_36+0xc2>
		}
		case TW_MT_SLA_ACK:
		{
			TWI_EXT_LoadData(messagePacketHeader.syncbit);
 820:	80 91 11 01 	lds	r24, 0x0111
 824:	0e 94 1e 02 	call	0x43c	; 0x43c <TWI_EXT_LoadData>
			TWI_SendTransmit();
 828:	85 e8       	ldi	r24, 0x85	; 133
 82a:	80 93 bc 00 	sts	0x00BC, r24

			break;
 82e:	2b c0       	rjmp	.+86     	; 0x886 <__vector_36+0xc2>
		}
		case TW_MT_SLA_NACK:
		{
			error_handler(SET);
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	0e 94 34 01 	call	0x268	; 0x268 <error_handler>
			break;
 836:	27 c0       	rjmp	.+78     	; 0x886 <__vector_36+0xc2>
		}
		case TW_MT_DATA_ACK:
		{
			if(msg_count < messagePacketHeader.dataLen)
 838:	e0 91 16 01 	lds	r30, 0x0116
 83c:	80 91 15 01 	lds	r24, 0x0115
 840:	e8 17       	cp	r30, r24
 842:	70 f4       	brcc	.+28     	; 0x860 <__vector_36+0x9c>
			{
				TWI_EXT_LoadData(messagePacketHeader.data[msg_count++]);
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	8e 0f       	add	r24, r30
 848:	80 93 16 01 	sts	0x0116, r24
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	e1 5f       	subi	r30, 0xF1	; 241
 850:	fe 4f       	sbci	r31, 0xFE	; 254
 852:	83 81       	ldd	r24, Z+3	; 0x03
 854:	0e 94 1e 02 	call	0x43c	; 0x43c <TWI_EXT_LoadData>
				TWI_SendTransmit();
 858:	85 e8       	ldi	r24, 0x85	; 133
 85a:	80 93 bc 00 	sts	0x00BC, r24
 85e:	13 c0       	rjmp	.+38     	; 0x886 <__vector_36+0xc2>
			}
			else
			{
				TWI_SendStop();
 860:	85 e9       	ldi	r24, 0x95	; 149
 862:	80 93 bc 00 	sts	0x00BC, r24
 866:	0f c0       	rjmp	.+30     	; 0x886 <__vector_36+0xc2>

			break;
		}
		case TW_MT_DATA_NACK:
		{
			error_handler(SET);
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	0e 94 34 01 	call	0x268	; 0x268 <error_handler>
			break;
 86e:	0b c0       	rjmp	.+22     	; 0x886 <__vector_36+0xc2>
		}
		case TW_MR_SLA_ACK:
		{
			error_handler(SET);
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	0e 94 34 01 	call	0x268	; 0x268 <error_handler>
			break;
 876:	07 c0       	rjmp	.+14     	; 0x886 <__vector_36+0xc2>
		}
		case TW_MR_SLA_NACK:
		{
			error_handler(SET);
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	0e 94 34 01 	call	0x268	; 0x268 <error_handler>
			break;
 87e:	03 c0       	rjmp	.+6      	; 0x886 <__vector_36+0xc2>
		}		
		case TW_MR_DATA_ACK:
		{
			error_handler(SET);
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	0e 94 34 01 	call	0x268	; 0x268 <error_handler>
		default:
		{
			break;
		}
	}
	sei();
 886:	78 94       	sei
}
 888:	ff 91       	pop	r31
 88a:	ef 91       	pop	r30
 88c:	bf 91       	pop	r27
 88e:	af 91       	pop	r26
 890:	9f 91       	pop	r25
 892:	8f 91       	pop	r24
 894:	7f 91       	pop	r23
 896:	6f 91       	pop	r22
 898:	5f 91       	pop	r21
 89a:	4f 91       	pop	r20
 89c:	3f 91       	pop	r19
 89e:	2f 91       	pop	r18
 8a0:	0f 90       	pop	r0
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	0f 90       	pop	r0
 8a6:	1f 90       	pop	r1
 8a8:	18 95       	reti

000008aa <main>:
	messagePacketHeader.dataLen = 3;
}

int main(void)
{
	sei();
 8aa:	78 94       	sei
	
	//init
	mode = eInit;
 8ac:	10 92 18 01 	sts	0x0118, r1
}

static void cmd_SetHeading(void)
{
	//Clear the message packet
	memset(messagePacketHeader.data,0,sizeof(messagePacketHeader.data));
 8b0:	0f 2e       	mov	r0, r31
 8b2:	f2 e1       	ldi	r31, 0x12	; 18
 8b4:	af 2e       	mov	r10, r31
 8b6:	f1 e0       	ldi	r31, 0x01	; 1
 8b8:	bf 2e       	mov	r11, r31
 8ba:	f0 2d       	mov	r31, r0
	
	//load information on slave
	messagePacketHeader.address = AUTOPILOT_ADDRESS;
 8bc:	0f e0       	ldi	r16, 0x0F	; 15
 8be:	11 e0       	ldi	r17, 0x01	; 1
 8c0:	c1 e0       	ldi	r28, 0x01	; 1
	messagePacketHeader.control = TW_WRITE;
	messagePacketHeader.syncbit = SYNCBIT;
 8c2:	0f 2e       	mov	r0, r31
 8c4:	f6 eb       	ldi	r31, 0xB6	; 182
 8c6:	9f 2e       	mov	r9, r31
 8c8:	f0 2d       	mov	r31, r0
	messagePacketHeader.data[0] = SET_HEADING;
	messagePacketHeader.data[1] = 0x01;
	messagePacketHeader.data[2] = 0x01;
	messagePacketHeader.dataLen = 3;
 8ca:	d3 e0       	ldi	r29, 0x03	; 3
			}
			case eLoadData:
			{
				cmd_SetHeading();

				mode = eStartTXData;
 8cc:	68 94       	set
 8ce:	ee 24       	eor	r14, r14
 8d0:	e1 f8       	bld	r14, 1
				break;
			}
			case eStartTXData:
			{
				TWI_SendStart();
 8d2:	0f 2e       	mov	r0, r31
 8d4:	fc eb       	ldi	r31, 0xBC	; 188
 8d6:	cf 2e       	mov	r12, r31
 8d8:	d1 2c       	mov	r13, r1
 8da:	f0 2d       	mov	r31, r0
 8dc:	0f 2e       	mov	r0, r31
 8de:	f5 ea       	ldi	r31, 0xA5	; 165
 8e0:	ff 2e       	mov	r15, r31
 8e2:	f0 2d       	mov	r31, r0
	//init
	mode = eInit;

	while (1)
	{
		switch(mode)
 8e4:	90 91 18 01 	lds	r25, 0x0118
 8e8:	91 30       	cpi	r25, 0x01	; 1
 8ea:	b1 f0       	breq	.+44     	; 0x918 <main+0x6e>
 8ec:	18 f0       	brcs	.+6      	; 0x8f4 <main+0x4a>
 8ee:	92 30       	cpi	r25, 0x02	; 2
 8f0:	f1 f0       	breq	.+60     	; 0x92e <main+0x84>
 8f2:	21 c0       	rjmp	.+66     	; 0x936 <main+0x8c>
}


static void init_Variables(void)
{
	memset(messagePacketHeader.data, 0, sizeof(messagePacketHeader.data));
 8f4:	f5 01       	movw	r30, r10
 8f6:	10 82       	st	Z, r1
 8f8:	11 82       	std	Z+1, r1	; 0x01
 8fa:	12 82       	std	Z+2, r1	; 0x02
	msg_count = 0;
 8fc:	10 92 16 01 	sts	0x0116, r1
	syncByteFound = 0;
 900:	10 92 0e 01 	sts	0x010E, r1
		switch(mode)
		{
			case eInit:
			{
				init_Variables();																
				error_init(ERROR_PORT, ERROR_LED_GREEN_PIN, ERROR_LED_RED_PIN);								//ERROR init
 904:	47 e0       	ldi	r20, 0x07	; 7
 906:	66 e0       	ldi	r22, 0x06	; 6
 908:	8c 2f       	mov	r24, r28
 90a:	0e 94 23 01 	call	0x246	; 0x246 <error_init>
				TWI_EXT_MasterInit();																			//I2C init
 90e:	0e 94 10 02 	call	0x420	; 0x420 <TWI_EXT_MasterInit>

				mode = eLoadData;																		//next state	
 912:	c0 93 18 01 	sts	0x0118, r28
				break;
 916:	0f c0       	rjmp	.+30     	; 0x936 <main+0x8c>
{
	//Clear the message packet
	memset(messagePacketHeader.data,0,sizeof(messagePacketHeader.data));
	
	//load information on slave
	messagePacketHeader.address = AUTOPILOT_ADDRESS;
 918:	f8 01       	movw	r30, r16
 91a:	c0 83       	st	Z, r28
	messagePacketHeader.control = TW_WRITE;
 91c:	11 82       	std	Z+1, r1	; 0x01
	messagePacketHeader.syncbit = SYNCBIT;
 91e:	92 82       	std	Z+2, r9	; 0x02
	messagePacketHeader.data[0] = SET_HEADING;
 920:	c3 83       	std	Z+3, r28	; 0x03
	messagePacketHeader.data[1] = 0x01;
 922:	c4 83       	std	Z+4, r28	; 0x04
	messagePacketHeader.data[2] = 0x01;
 924:	c5 83       	std	Z+5, r28	; 0x05
	messagePacketHeader.dataLen = 3;
 926:	d6 83       	std	Z+6, r29	; 0x06
			}
			case eLoadData:
			{
				cmd_SetHeading();

				mode = eStartTXData;
 928:	e0 92 18 01 	sts	0x0118, r14
				break;
 92c:	04 c0       	rjmp	.+8      	; 0x936 <main+0x8c>
			}
			case eStartTXData:
			{
				TWI_SendStart();
 92e:	f6 01       	movw	r30, r12
 930:	f0 82       	st	Z, r15

				mode = eIdle;
 932:	d0 93 18 01 	sts	0x0118, r29
			default:
			{
				break;
			}
		}
		IO_flash_slow(ERROR_PORT,ERROR_LED_GREEN_PIN);
 936:	66 e0       	ldi	r22, 0x06	; 6
 938:	8c 2f       	mov	r24, r28
 93a:	0e 94 ef 01 	call	0x3de	; 0x3de <IO_flash_slow>
	}
 93e:	d2 cf       	rjmp	.-92     	; 0x8e4 <main+0x3a>

00000940 <__tablejump2__>:
 940:	ee 0f       	add	r30, r30
 942:	ff 1f       	adc	r31, r31
 944:	05 90       	lpm	r0, Z+
 946:	f4 91       	lpm	r31, Z
 948:	e0 2d       	mov	r30, r0
 94a:	09 94       	ijmp

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
