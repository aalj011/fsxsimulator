
fsxsim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000086c  00000900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800108  00800108  00000908  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a6  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000735  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a63  00000000  00000000  000025eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000777  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001928  00000000  00000000  00003ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000054cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  28:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_10>
  2c:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_11>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  7c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  80:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  84:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  8c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  90:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_36>
  94:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  98:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  9c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	59 01       	movw	r10, r18
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 16       	cp	r0, r16
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	12 01       	movw	r2, r4
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 fc       	sbrc	r0, 4
  c6:	00 14       	cp	r0, r0
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e4 00       	.word	0x00e4	; ????
  ce:	16 03       	mulsu	r17, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 0c       	add	r0, r0

000000d6 <string3>:
  d6:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000000e4 <string2>:
  e4:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
  f4:	69 00 61 00 6c 00 00 00                             i.a.l...

000000fc <string1>:
  fc:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 10c:	6d 00 65 00 00 00                                   m.e...

00000112 <string0>:
 112:	04 03 09 04                                         ....

00000116 <config1_descriptor>:
 116:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 126:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 136:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 146:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 156:	40 00 00                                            @..

00000159 <device_descriptor>:
 159:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 169:	03 01                                               ..

0000016b <endpoint_config_table>:
 16b:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000176 <__ctors_end>:
 176:	11 24       	eor	r1, r1
 178:	1f be       	out	0x3f, r1	; 63
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	da e0       	ldi	r29, 0x0A	; 10
 17e:	de bf       	out	0x3e, r29	; 62
 180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
 182:	11 e0       	ldi	r17, 0x01	; 1
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	ec e6       	ldi	r30, 0x6C	; 108
 18a:	f8 e0       	ldi	r31, 0x08	; 8
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
 18e:	05 90       	lpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	a8 30       	cpi	r26, 0x08	; 8
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	a8 e0       	ldi	r26, 0x08	; 8
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	a6 31       	cpi	r26, 0x16	; 22
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	0e 94 0c 04 	call	0x818	; 0x818 <main>
 1ac:	0c 94 34 04 	jmp	0x868	; 0x868 <_exit>

000001b0 <__bad_interrupt>:
 1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <error_init>:
static uint8_t error_green_led_pin;
static uint8_t error_red_led_pin;

void error_init(ports port, uint8_t green_led_pin, uint8_t red_led_pin)
{
	error_port = port;
 1b4:	80 93 0a 01 	sts	0x010A, r24
	error_red_led_pin = red_led_pin;
 1b8:	40 93 08 01 	sts	0x0108, r20
	error_green_led_pin = green_led_pin;
 1bc:	60 93 09 01 	sts	0x0109, r22
	
	// clear the io required
	IO_write(error_port,error_green_led_pin,SET);		// green light
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);		// red light
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	60 91 08 01 	lds	r22, 0x0108
 1cc:	80 91 0a 01 	lds	r24, 0x010A
 1d0:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
 1d4:	08 95       	ret

000001d6 <error_handler>:
}


void error_handler(uint8_t status)
{
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
	// clear the io required
	IO_write(error_port,error_green_led_pin,CLEAR);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	60 91 09 01 	lds	r22, 0x0109
 1e0:	80 91 0a 01 	lds	r24, 0x010A
 1e4:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
	IO_write(error_port,error_red_led_pin,CLEAR);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	60 91 08 01 	lds	r22, 0x0108
 1ee:	80 91 0a 01 	lds	r24, 0x010A
 1f2:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>

	if(status)
 1f6:	cc 23       	and	r28, r28
 1f8:	39 f0       	breq	.+14     	; 0x208 <error_handler+0x32>
	{
		// error has been generated stay in this while loop
		while(1)
		{
			IO_flash(error_port,error_red_led_pin);
 1fa:	60 91 08 01 	lds	r22, 0x0108
 1fe:	80 91 0a 01 	lds	r24, 0x010A
 202:	0e 94 85 01 	call	0x30a	; 0x30a <IO_flash>
		}
 206:	f9 cf       	rjmp	.-14     	; 0x1fa <error_handler+0x24>
	}
	else
	{
		// no error generated
		IO_write(error_port,error_green_led_pin,SET);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	60 91 09 01 	lds	r22, 0x0109
 20e:	80 91 0a 01 	lds	r24, 0x010A
 212:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
	}
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <IO_write>:
				state specifies whether we want to set the pin high or low.
Note:			None
*****************************************************************************/
void IO_write(ports port, uint8_t pinnumber,uint8_t state)
{
	switch (port)
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	b9 f1       	breq	.+110    	; 0x28c <IO_write+0x72>
 21e:	28 f4       	brcc	.+10     	; 0x22a <IO_write+0x10>
 220:	88 23       	and	r24, r24
 222:	51 f0       	breq	.+20     	; 0x238 <IO_write+0x1e>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	e9 f0       	breq	.+58     	; 0x262 <IO_write+0x48>
 228:	08 95       	ret
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	09 f4       	brne	.+2      	; 0x230 <IO_write+0x16>
 22e:	43 c0       	rjmp	.+134    	; 0x2b6 <IO_write+0x9c>
 230:	84 30       	cpi	r24, 0x04	; 4
 232:	09 f4       	brne	.+2      	; 0x236 <IO_write+0x1c>
 234:	55 c0       	rjmp	.+170    	; 0x2e0 <IO_write+0xc6>
 236:	08 95       	ret
	{
		case PORT_B:
		{
			#ifdef PORTB
			//set the pinnumber as output
			DDRB |= (1 << pinnumber);
 238:	24 b1       	in	r18, 0x04	; 4
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <IO_write+0x2a>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <IO_write+0x26>
 248:	28 2b       	or	r18, r24
 24a:	24 b9       	out	0x04, r18	; 4
			if(state)
 24c:	44 23       	and	r20, r20
 24e:	21 f0       	breq	.+8      	; 0x258 <IO_write+0x3e>
			{
				PORTB |= (1 << pinnumber);
 250:	95 b1       	in	r25, 0x05	; 5
 252:	89 2b       	or	r24, r25
 254:	85 b9       	out	0x05, r24	; 5
 256:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<< pinnumber);
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	80 95       	com	r24
 25c:	89 23       	and	r24, r25
 25e:	85 b9       	out	0x05, r24	; 5
 260:	08 95       	ret
		}
		case PORT_C:
		{
			#ifdef PORTC
			//set the pinnumber as output
			DDRC |= (1 << pinnumber);
 262:	27 b1       	in	r18, 0x07	; 7
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <IO_write+0x54>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <IO_write+0x50>
 272:	28 2b       	or	r18, r24
 274:	27 b9       	out	0x07, r18	; 7
			if(state)
 276:	44 23       	and	r20, r20
 278:	21 f0       	breq	.+8      	; 0x282 <IO_write+0x68>
			{
				PORTC |= (1 << pinnumber);
 27a:	98 b1       	in	r25, 0x08	; 8
 27c:	89 2b       	or	r24, r25
 27e:	88 b9       	out	0x08, r24	; 8
 280:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<< pinnumber);
 282:	98 b1       	in	r25, 0x08	; 8
 284:	80 95       	com	r24
 286:	89 23       	and	r24, r25
 288:	88 b9       	out	0x08, r24	; 8
 28a:	08 95       	ret
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set the pinnumber as output
			DDRD |= (1 << pinnumber);
 28c:	2a b1       	in	r18, 0x0a	; 10
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <IO_write+0x7e>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <IO_write+0x7a>
 29c:	28 2b       	or	r18, r24
 29e:	2a b9       	out	0x0a, r18	; 10
			if(state)
 2a0:	44 23       	and	r20, r20
 2a2:	21 f0       	breq	.+8      	; 0x2ac <IO_write+0x92>
			{
				PORTD |= (1 << pinnumber);
 2a4:	9b b1       	in	r25, 0x0b	; 11
 2a6:	89 2b       	or	r24, r25
 2a8:	8b b9       	out	0x0b, r24	; 11
 2aa:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<< pinnumber);
 2ac:	9b b1       	in	r25, 0x0b	; 11
 2ae:	80 95       	com	r24
 2b0:	89 23       	and	r24, r25
 2b2:	8b b9       	out	0x0b, r24	; 11
 2b4:	08 95       	ret
		}
		case PORT_E:
		{
			#ifdef PORTE
			//set the pinnumber as output
			DDRE |= (1 << pinnumber);
 2b6:	2d b1       	in	r18, 0x0d	; 13
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <IO_write+0xa8>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <IO_write+0xa4>
 2c6:	28 2b       	or	r18, r24
 2c8:	2d b9       	out	0x0d, r18	; 13
			if(state)
 2ca:	44 23       	and	r20, r20
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <IO_write+0xbc>
			{
				PORTE |= (1 << pinnumber);
 2ce:	9e b1       	in	r25, 0x0e	; 14
 2d0:	89 2b       	or	r24, r25
 2d2:	8e b9       	out	0x0e, r24	; 14
 2d4:	08 95       	ret
			}
			else
			{
				PORTE &= ~(1<< pinnumber);
 2d6:	9e b1       	in	r25, 0x0e	; 14
 2d8:	80 95       	com	r24
 2da:	89 23       	and	r24, r25
 2dc:	8e b9       	out	0x0e, r24	; 14
 2de:	08 95       	ret
		}
		case PORT_F:
		{
			#ifdef PORTF
			//set the pinnumber as output
			DDRF |= (1 << pinnumber);
 2e0:	20 b3       	in	r18, 0x10	; 16
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <IO_write+0xd2>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <IO_write+0xce>
 2f0:	28 2b       	or	r18, r24
 2f2:	20 bb       	out	0x10, r18	; 16
			if(state)
 2f4:	44 23       	and	r20, r20
 2f6:	21 f0       	breq	.+8      	; 0x300 <IO_write+0xe6>
			{
				PORTF |= (1 << pinnumber);
 2f8:	91 b3       	in	r25, 0x11	; 17
 2fa:	89 2b       	or	r24, r25
 2fc:	81 bb       	out	0x11, r24	; 17
 2fe:	08 95       	ret
			}
			else
			{
				PORTF &= ~(1<< pinnumber);
 300:	91 b3       	in	r25, 0x11	; 17
 302:	80 95       	com	r24
 304:	89 23       	and	r24, r25
 306:	81 bb       	out	0x11, r24	; 17
 308:	08 95       	ret

0000030a <IO_flash>:
Purpose:		Flashes the IO of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash(ports port, uint8_t pinnumber)
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	c8 2f       	mov	r28, r24
 310:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	2f e7       	ldi	r18, 0x7F	; 127
 31a:	8a e1       	ldi	r24, 0x1A	; 26
 31c:	96 e0       	ldi	r25, 0x06	; 6
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <IO_flash+0x14>
 326:	00 c0       	rjmp	.+0      	; 0x328 <IO_flash+0x1e>
 328:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, SET);
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	6d 2f       	mov	r22, r29
 32e:	8c 2f       	mov	r24, r28
 330:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
 334:	2f e7       	ldi	r18, 0x7F	; 127
 336:	8a e1       	ldi	r24, 0x1A	; 26
 338:	96 e0       	ldi	r25, 0x06	; 6
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <IO_flash+0x30>
 342:	00 c0       	rjmp	.+0      	; 0x344 <IO_flash+0x3a>
 344:	00 00       	nop
	_delay_ms(2000);
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <IO_flash_slow>:
Purpose:		Flashes the IO slowely of choosing (only once)
Parameters:		port this specifies the port required to flash and Pin number
Returns:		None
*****************************************************************************/
void IO_flash_slow(ports port, uint8_t pinnumber)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	c8 2f       	mov	r28, r24
 352:	d6 2f       	mov	r29, r22
	IO_write(port, pinnumber, CLEAR);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
 35a:	2f e3       	ldi	r18, 0x3F	; 63
 35c:	82 e4       	ldi	r24, 0x42	; 66
 35e:	9f e0       	ldi	r25, 0x0F	; 15
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <IO_flash_slow+0x14>
 368:	00 c0       	rjmp	.+0      	; 0x36a <IO_flash_slow+0x1e>
 36a:	00 00       	nop
	_delay_ms(5000);
	IO_write(port, pinnumber, SET);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	6d 2f       	mov	r22, r29
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 0d 01 	call	0x21a	; 0x21a <IO_write>
 376:	2f e3       	ldi	r18, 0x3F	; 63
 378:	82 e4       	ldi	r24, 0x42	; 66
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <IO_flash_slow+0x30>
 384:	00 c0       	rjmp	.+0      	; 0x386 <IO_flash_slow+0x3a>
 386:	00 00       	nop
	_delay_ms(5000);
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <twi_master_init>:
Note:			None
****************************************************************************/
void twi_master_init(void)
{
	//PRR0 = (0<<PRTWI);													//Turn off Power reduction on TWI 							
	TWSR = (0<<TWPS0)|(0<<TWPS1);
 38e:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = TWBR_BIT_RATE;													//Bit rate at 8mhz 100khz 0x20	
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	80 93 b8 00 	sts	0x00B8, r24
	TWDR = 0xFF;															//Dummy data
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 39e:	85 e0       	ldi	r24, 0x05	; 5
 3a0:	80 93 bc 00 	sts	0x00BC, r24
 3a4:	08 95       	ret

000003a6 <twi_master_sla_send_address>:
Note:			None
****************************************************************************/
void twi_master_sla_send_address(uint8_t address, uint8_t read)
{
	uint8_t slave_address = 0;
	slave_address = (address << 1)| (read);
 3a6:	88 0f       	add	r24, r24
 3a8:	68 2b       	or	r22, r24
	
	TWDR = slave_address;													//Set the data register with the slave address and the read/write bit
 3aa:	60 93 bb 00 	sts	0x00BB, r22
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 3ae:	85 ec       	ldi	r24, 0xC5	; 197
 3b0:	80 93 bc 00 	sts	0x00BC, r24
 3b4:	08 95       	ret

000003b6 <twi_send_data>:
Returns:		None
Note:			None
****************************************************************************/
void twi_send_data(uint8_t data)
{	
	TWDR = data;	
 3b6:	80 93 bb 00 	sts	0x00BB, r24
 3ba:	08 95       	ret

000003bc <__vector_10>:
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	8f 93       	push	r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3c8:	9f 93       	push	r25
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
 3ce:	e1 ee       	ldi	r30, 0xE1	; 225
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
			case  4: UEDATX = *buffer++;
 3d4:	10 82       	st	Z, r1
 3d6:	83 ff       	sbrs	r24, 3
 3d8:	11 c0       	rjmp	.+34     	; 0x3fc <__vector_10+0x40>
 3da:	10 92 e9 00 	sts	0x00E9, r1
 3de:	91 e0       	ldi	r25, 0x01	; 1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3e0:	90 93 eb 00 	sts	0x00EB, r25
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 3e4:	10 92 ec 00 	sts	0x00EC, r1
 3e8:	92 e1       	ldi	r25, 0x12	; 18
 3ea:	90 93 ed 00 	sts	0x00ED, r25
			case  2: UEDATX = *buffer++;
 3ee:	98 e0       	ldi	r25, 0x08	; 8
 3f0:	90 93 f0 00 	sts	0x00F0, r25
 3f4:	10 92 0d 01 	sts	0x010D, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3f8:	10 92 0b 01 	sts	0x010B, r1
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
 3fc:	82 ff       	sbrs	r24, 2
 3fe:	13 c0       	rjmp	.+38     	; 0x426 <__vector_10+0x6a>
 400:	80 91 0d 01 	lds	r24, 0x010D
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 404:	88 23       	and	r24, r24
 406:	79 f0       	breq	.+30     	; 0x426 <__vector_10+0x6a>
 408:	80 91 0c 01 	lds	r24, 0x010C
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 40c:	88 23       	and	r24, r24
 40e:	59 f0       	breq	.+22     	; 0x426 <__vector_10+0x6a>
		SREG = intr_state;
 410:	81 50       	subi	r24, 0x01	; 1
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 412:	80 93 0c 01 	sts	0x010C, r24
 416:	81 11       	cpse	r24, r1
 418:	06 c0       	rjmp	.+12     	; 0x426 <__vector_10+0x6a>
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	80 93 e9 00 	sts	0x00E9, r24
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 420:	8a e3       	ldi	r24, 0x3A	; 58
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
 422:	80 93 e8 00 	sts	0x00E8, r24
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	9f 91       	pop	r25
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
}
 42c:	8f 91       	pop	r24
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <__vector_11>:
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 462:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 466:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 46a:	83 ff       	sbrs	r24, 3
 46c:	4c c1       	rjmp	.+664    	; 0x706 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 46e:	e1 ef       	ldi	r30, 0xF1	; 241
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 474:	80 81       	ld	r24, Z
                wValue = UEDATX;
 476:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 478:	90 81       	ld	r25, Z
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 47e:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 480:	90 81       	ld	r25, Z
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	59 2b       	or	r21, r25
                wLength = UEDATX;
 486:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 488:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 48a:	92 ef       	ldi	r25, 0xF2	; 242
 48c:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 490:	86 30       	cpi	r24, 0x06	; 6
 492:	09 f0       	breq	.+2      	; 0x496 <__vector_11+0x5e>
 494:	58 c0       	rjmp	.+176    	; 0x546 <__vector_11+0x10e>
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 498:	81 e2       	ldi	r24, 0x21	; 33
 49a:	80 93 eb 00 	sts	0x00EB, r24
					return;
 49e:	3a c1       	rjmp	.+628    	; 0x714 <__vector_11+0x2dc>
 4a0:	66 e0       	ldi	r22, 0x06	; 6
 4a2:	8c ea       	ldi	r24, 0xAC	; 172
 4a4:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 4a6:	fc 01       	movw	r30, r24
 4a8:	a5 91       	lpm	r26, Z+
 4aa:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 4ac:	2a 17       	cp	r18, r26
 4ae:	3b 07       	cpc	r19, r27
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 4b2:	07 96       	adiw	r24, 0x07	; 7
					continue;
 4b4:	23 c0       	rjmp	.+70     	; 0x4fc <__vector_11+0xc4>
				}
				list += 2;
 4b6:	fc 01       	movw	r30, r24
 4b8:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 4ba:	a5 91       	lpm	r26, Z+
 4bc:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 4be:	4a 17       	cp	r20, r26
 4c0:	5b 07       	cpc	r21, r27
 4c2:	11 f0       	breq	.+4      	; 0x4c8 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 4c4:	07 96       	adiw	r24, 0x07	; 7
					continue;
 4c6:	1a c0       	rjmp	.+52     	; 0x4fc <__vector_11+0xc4>
				}
				list += 2;
 4c8:	fc 01       	movw	r30, r24
 4ca:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 4cc:	45 91       	lpm	r20, Z+
 4ce:	54 91       	lpm	r21, Z
				list += 2;
 4d0:	fc 01       	movw	r30, r24
 4d2:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 4d4:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 4d6:	87 2f       	mov	r24, r23
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 4dc:	8f 3f       	cpi	r24, 0xFF	; 255
 4de:	91 05       	cpc	r25, r1
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <__vector_11+0xb0>
 4e2:	10 f0       	brcs	.+4      	; 0x4e8 <__vector_11+0xb0>
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	82 17       	cp	r24, r18
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <__vector_11+0xb6>
 4ec:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 4ee:	a8 ee       	ldi	r26, 0xE8	; 232
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 4f2:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4f4:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 4f6:	c1 ef       	ldi	r28, 0xF1	; 241
 4f8:	d0 e0       	ldi	r29, 0x00	; 0
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <__vector_11+0xca>
 4fc:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 4fe:	99 f6       	brne	.-90     	; 0x4a6 <__vector_11+0x6e>
 500:	cb cf       	rjmp	.-106    	; 0x498 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 502:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 504:	98 2f       	mov	r25, r24
 506:	95 70       	andi	r25, 0x05	; 5
 508:	e1 f3       	breq	.-8      	; 0x502 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 50a:	82 fd       	sbrc	r24, 2
 50c:	03 c1       	rjmp	.+518    	; 0x714 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 50e:	32 2f       	mov	r19, r18
 510:	21 31       	cpi	r18, 0x11	; 17
 512:	08 f0       	brcs	.+2      	; 0x516 <__vector_11+0xde>
 514:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 516:	33 23       	and	r19, r19
 518:	09 f4       	brne	.+2      	; 0x51c <__vector_11+0xe4>
 51a:	f9 c0       	rjmp	.+498    	; 0x70e <__vector_11+0x2d6>
 51c:	fa 01       	movw	r30, r20
 51e:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 520:	94 91       	lpm	r25, Z
 522:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 524:	81 50       	subi	r24, 0x01	; 1
 526:	31 96       	adiw	r30, 0x01	; 1
 528:	81 11       	cpse	r24, r1
 52a:	fa cf       	rjmp	.-12     	; 0x520 <__vector_11+0xe8>
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	83 0f       	add	r24, r19
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	48 0f       	add	r20, r24
 536:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 538:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 53a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 53c:	21 11       	cpse	r18, r1
 53e:	e1 cf       	rjmp	.-62     	; 0x502 <__vector_11+0xca>
 540:	30 31       	cpi	r19, 0x10	; 16
 542:	f9 f2       	breq	.-66     	; 0x502 <__vector_11+0xca>
 544:	e7 c0       	rjmp	.+462    	; 0x714 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 546:	85 30       	cpi	r24, 0x05	; 5
 548:	61 f4       	brne	.+24     	; 0x562 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 54a:	8e ef       	ldi	r24, 0xFE	; 254
 54c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 550:	e8 ee       	ldi	r30, 0xE8	; 232
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	80 ff       	sbrs	r24, 0
 558:	fd cf       	rjmp	.-6      	; 0x554 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 55a:	20 68       	ori	r18, 0x80	; 128
 55c:	20 93 e3 00 	sts	0x00E3, r18
			return;
 560:	d9 c0       	rjmp	.+434    	; 0x714 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 562:	89 30       	cpi	r24, 0x09	; 9
 564:	09 f0       	breq	.+2      	; 0x568 <__vector_11+0x130>
 566:	35 c0       	rjmp	.+106    	; 0x5d2 <__vector_11+0x19a>
 568:	61 11       	cpse	r22, r1
 56a:	cd c0       	rjmp	.+410    	; 0x706 <__vector_11+0x2ce>
			usb_configuration = wValue;
 56c:	20 93 0d 01 	sts	0x010D, r18
			cdc_line_rtsdtr = 0;
 570:	10 92 0b 01 	sts	0x010B, r1
			transmit_flush_timer = 0;
 574:	10 92 0c 01 	sts	0x010C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 578:	8e ef       	ldi	r24, 0xFE	; 254
 57a:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 57e:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 580:	2b e6       	ldi	r18, 0x6B	; 107
 582:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 584:	c9 ee       	ldi	r28, 0xE9	; 233
 586:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 588:	ab ee       	ldi	r26, 0xEB	; 235
 58a:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 58c:	0c ee       	ldi	r16, 0xEC	; 236
 58e:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 590:	6d ee       	ldi	r22, 0xED	; 237
 592:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 594:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 596:	a9 01       	movw	r20, r18
 598:	4f 5f       	subi	r20, 0xFF	; 255
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	f9 01       	movw	r30, r18
 59e:	94 91       	lpm	r25, Z
				UECONX = en;
 5a0:	9c 93       	st	X, r25
				if (en) {
 5a2:	99 23       	and	r25, r25
 5a4:	61 f0       	breq	.+24     	; 0x5be <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 5a6:	fa 01       	movw	r30, r20
 5a8:	44 91       	lpm	r20, Z
 5aa:	f8 01       	movw	r30, r16
 5ac:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 5ae:	f9 01       	movw	r30, r18
 5b0:	32 96       	adiw	r30, 0x02	; 2
 5b2:	94 91       	lpm	r25, Z
 5b4:	2d 5f       	subi	r18, 0xFD	; 253
 5b6:	3f 4f       	sbci	r19, 0xFF	; 255
 5b8:	fb 01       	movw	r30, r22
 5ba:	90 83       	st	Z, r25
 5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 5be:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5c0:	8f 5f       	subi	r24, 0xFF	; 255
 5c2:	85 30       	cpi	r24, 0x05	; 5
 5c4:	39 f7       	brne	.-50     	; 0x594 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 5c6:	ea ee       	ldi	r30, 0xEA	; 234
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	8e e1       	ldi	r24, 0x1E	; 30
 5cc:	80 83       	st	Z, r24
        		UERST = 0;
 5ce:	10 82       	st	Z, r1
			return;
 5d0:	a1 c0       	rjmp	.+322    	; 0x714 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 5d2:	88 30       	cpi	r24, 0x08	; 8
 5d4:	81 f4       	brne	.+32     	; 0x5f6 <__vector_11+0x1be>
 5d6:	60 38       	cpi	r22, 0x80	; 128
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__vector_11+0x1a4>
 5da:	95 c0       	rjmp	.+298    	; 0x706 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5dc:	e8 ee       	ldi	r30, 0xE8	; 232
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	80 ff       	sbrs	r24, 0
 5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 5e6:	80 91 0d 01 	lds	r24, 0x010D
 5ea:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5ee:	8e ef       	ldi	r24, 0xFE	; 254
 5f0:	80 93 e8 00 	sts	0x00E8, r24
 5f4:	8f c0       	rjmp	.+286    	; 0x714 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 5f6:	81 32       	cpi	r24, 0x21	; 33
 5f8:	b9 f4       	brne	.+46     	; 0x628 <__vector_11+0x1f0>
 5fa:	61 3a       	cpi	r22, 0xA1	; 161
 5fc:	09 f0       	breq	.+2      	; 0x600 <__vector_11+0x1c8>
 5fe:	83 c0       	rjmp	.+262    	; 0x706 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 600:	e8 ee       	ldi	r30, 0xE8	; 232
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	80 ff       	sbrs	r24, 0
 608:	fd cf       	rjmp	.-6      	; 0x604 <__vector_11+0x1cc>
 60a:	e0 e0       	ldi	r30, 0x00	; 0
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	27 e0       	ldi	r18, 0x07	; 7
 610:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 612:	a1 ef       	ldi	r26, 0xF1	; 241
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	81 91       	ld	r24, Z+
 618:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 61a:	e2 17       	cp	r30, r18
 61c:	f3 07       	cpc	r31, r19
 61e:	d9 f7       	brne	.-10     	; 0x616 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 620:	8e ef       	ldi	r24, 0xFE	; 254
 622:	80 93 e8 00 	sts	0x00E8, r24
 626:	76 c0       	rjmp	.+236    	; 0x714 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 628:	80 32       	cpi	r24, 0x20	; 32
 62a:	d1 f4       	brne	.+52     	; 0x660 <__vector_11+0x228>
 62c:	61 32       	cpi	r22, 0x21	; 33
 62e:	09 f0       	breq	.+2      	; 0x632 <__vector_11+0x1fa>
 630:	6a c0       	rjmp	.+212    	; 0x706 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 632:	e8 ee       	ldi	r30, 0xE8	; 232
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	82 ff       	sbrs	r24, 2
 63a:	fd cf       	rjmp	.-6      	; 0x636 <__vector_11+0x1fe>
 63c:	e0 e0       	ldi	r30, 0x00	; 0
 63e:	f1 e0       	ldi	r31, 0x01	; 1
 640:	27 e0       	ldi	r18, 0x07	; 7
 642:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 644:	a1 ef       	ldi	r26, 0xF1	; 241
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	8c 91       	ld	r24, X
 64a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 64c:	e2 17       	cp	r30, r18
 64e:	f3 07       	cpc	r31, r19
 650:	d9 f7       	brne	.-10     	; 0x648 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 652:	e8 ee       	ldi	r30, 0xE8	; 232
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	8b ef       	ldi	r24, 0xFB	; 251
 658:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 65a:	8e ef       	ldi	r24, 0xFE	; 254
 65c:	80 83       	st	Z, r24
 65e:	5a c0       	rjmp	.+180    	; 0x714 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 660:	82 32       	cpi	r24, 0x22	; 34
 662:	71 f4       	brne	.+28     	; 0x680 <__vector_11+0x248>
 664:	61 32       	cpi	r22, 0x21	; 33
 666:	09 f0       	breq	.+2      	; 0x66a <__vector_11+0x232>
 668:	4e c0       	rjmp	.+156    	; 0x706 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 66a:	20 93 0b 01 	sts	0x010B, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 66e:	e8 ee       	ldi	r30, 0xE8	; 232
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	80 ff       	sbrs	r24, 0
 676:	fd cf       	rjmp	.-6      	; 0x672 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 678:	8e ef       	ldi	r24, 0xFE	; 254
 67a:	80 93 e8 00 	sts	0x00E8, r24
 67e:	4a c0       	rjmp	.+148    	; 0x714 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 680:	81 11       	cpse	r24, r1
 682:	1a c0       	rjmp	.+52     	; 0x6b8 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 684:	e8 ee       	ldi	r30, 0xE8	; 232
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	80 ff       	sbrs	r24, 0
 68c:	fd cf       	rjmp	.-6      	; 0x688 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 68e:	62 38       	cpi	r22, 0x82	; 130
 690:	51 f4       	brne	.+20     	; 0x6a6 <__vector_11+0x26e>
				UENUM = wIndex;
 692:	e9 ee       	ldi	r30, 0xE9	; 233
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 698:	80 91 eb 00 	lds	r24, 0x00EB
 69c:	85 fb       	bst	r24, 5
 69e:	88 27       	eor	r24, r24
 6a0:	80 f9       	bld	r24, 0
				UENUM = 0;
 6a2:	10 82       	st	Z, r1
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 6a8:	e1 ef       	ldi	r30, 0xF1	; 241
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 83       	st	Z, r24
			UEDATX = 0;
 6ae:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6b0:	8e ef       	ldi	r24, 0xFE	; 254
 6b2:	80 93 e8 00 	sts	0x00E8, r24
 6b6:	2e c0       	rjmp	.+92     	; 0x714 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 6b8:	98 2f       	mov	r25, r24
 6ba:	9d 7f       	andi	r25, 0xFD	; 253
 6bc:	91 30       	cpi	r25, 0x01	; 1
 6be:	19 f5       	brne	.+70     	; 0x706 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 6c0:	62 30       	cpi	r22, 0x02	; 2
 6c2:	09 f5       	brne	.+66     	; 0x706 <__vector_11+0x2ce>
 6c4:	23 2b       	or	r18, r19
 6c6:	f9 f4       	brne	.+62     	; 0x706 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 6c8:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 6ca:	9f ef       	ldi	r25, 0xFF	; 255
 6cc:	94 0f       	add	r25, r20
 6ce:	94 30       	cpi	r25, 0x04	; 4
 6d0:	d0 f4       	brcc	.+52     	; 0x706 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6d2:	9e ef       	ldi	r25, 0xFE	; 254
 6d4:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 6d8:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 6dc:	83 30       	cpi	r24, 0x03	; 3
 6de:	21 f4       	brne	.+8      	; 0x6e8 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 6e0:	81 e2       	ldi	r24, 0x21	; 33
 6e2:	80 93 eb 00 	sts	0x00EB, r24
 6e6:	16 c0       	rjmp	.+44     	; 0x714 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 6e8:	89 e1       	ldi	r24, 0x19	; 25
 6ea:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__vector_11+0x2c0>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	4a 95       	dec	r20
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <__vector_11+0x2bc>
 6fc:	ea ee       	ldi	r30, 0xEA	; 234
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 83       	st	Z, r24
					UERST = 0;
 702:	10 82       	st	Z, r1
 704:	07 c0       	rjmp	.+14     	; 0x714 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 706:	81 e2       	ldi	r24, 0x21	; 33
 708:	80 93 eb 00 	sts	0x00EB, r24
 70c:	03 c0       	rjmp	.+6      	; 0x714 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 70e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 710:	21 11       	cpse	r18, r1
 712:	f7 ce       	rjmp	.-530    	; 0x502 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	bf 91       	pop	r27
 71e:	af 91       	pop	r26
 720:	9f 91       	pop	r25
 722:	8f 91       	pop	r24
 724:	7f 91       	pop	r23
 726:	6f 91       	pop	r22
 728:	5f 91       	pop	r21
 72a:	4f 91       	pop	r20
 72c:	3f 91       	pop	r19
 72e:	2f 91       	pop	r18
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_36>:
static uint8_t recieve_message(void);
static void cmd_setHeading(void);
static void init_variables(void);

ISR(TWI_vect)
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
	cli();
 760:	f8 94       	cli
	tw_status = (TWSR & MASK);
 762:	80 91 b9 00 	lds	r24, 0x00B9
 766:	88 7f       	andi	r24, 0xF8	; 248
 768:	80 93 14 01 	sts	0x0114, r24
	
	switch(tw_status)
 76c:	88 31       	cpi	r24, 0x18	; 24
 76e:	a1 f0       	breq	.+40     	; 0x798 <__vector_36+0x5a>
 770:	28 f4       	brcc	.+10     	; 0x77c <__vector_36+0x3e>
 772:	88 30       	cpi	r24, 0x08	; 8
 774:	51 f0       	breq	.+20     	; 0x78a <__vector_36+0x4c>
 776:	80 31       	cpi	r24, 0x10	; 16
 778:	d1 f1       	breq	.+116    	; 0x7ee <__vector_36+0xb0>
 77a:	3c c0       	rjmp	.+120    	; 0x7f4 <__vector_36+0xb6>
 77c:	88 32       	cpi	r24, 0x28	; 40
 77e:	d1 f0       	breq	.+52     	; 0x7b4 <__vector_36+0x76>
 780:	80 33       	cpi	r24, 0x30	; 48
 782:	89 f1       	breq	.+98     	; 0x7e6 <__vector_36+0xa8>
 784:	80 32       	cpi	r24, 0x20	; 32
 786:	b1 f5       	brne	.+108    	; 0x7f4 <__vector_36+0xb6>
 788:	11 c0       	rjmp	.+34     	; 0x7ac <__vector_36+0x6e>
	{
		//Successfully transmitted start condition
		case MASTER_START_TX:
		{
			twi_master_sla_send_address(messagePacketHeader.address, messagePacketHeader.control);					// broadcast slave address
 78a:	ee e0       	ldi	r30, 0x0E	; 14
 78c:	f1 e0       	ldi	r31, 0x01	; 1
 78e:	61 81       	ldd	r22, Z+1	; 0x01
 790:	80 81       	ld	r24, Z
 792:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <twi_master_sla_send_address>
			break;
 796:	2e c0       	rjmp	.+92     	; 0x7f4 <__vector_36+0xb6>
		}
		/*******************************WRITE MODE**************************************/
		case MASTER_SLA_W_ACK_RX:
		{
			//init variables for sending data
			msg_count = 0;
 798:	10 92 15 01 	sts	0x0115, r1
			//send the sync bit
			twi_send_data(messagePacketHeader.syncbit);
 79c:	80 91 10 01 	lds	r24, 0x0110
 7a0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <twi_send_data>
			TWI_SendTransmit();
 7a4:	85 e8       	ldi	r24, 0x85	; 133
 7a6:	80 93 bc 00 	sts	0x00BC, r24
			break;
 7aa:	24 c0       	rjmp	.+72     	; 0x7f4 <__vector_36+0xb6>
		}
		case MASTER_SLA_W_NACK_RX:
		{
			error_handler(SET);											// error occurred
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <error_handler>
			break;
 7b2:	20 c0       	rjmp	.+64     	; 0x7f4 <__vector_36+0xb6>
static uint8_t send_message(uint8_t bytes[])
{
	uint8_t status = 0;
	
	//Send the message data only
	if(msg_count < MSG_SIZE)
 7b4:	e0 91 15 01 	lds	r30, 0x0115
 7b8:	e3 30       	cpi	r30, 0x03	; 3
 7ba:	78 f4       	brcc	.+30     	; 0x7da <__vector_36+0x9c>
	{
		//Load TWDR buffer
		twi_send_data(bytes[msg_count]);
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	e2 5f       	subi	r30, 0xF2	; 242
 7c0:	fe 4f       	sbci	r31, 0xFE	; 254
 7c2:	83 81       	ldd	r24, Z+3	; 0x03
 7c4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <twi_send_data>
		msg_count++;
 7c8:	80 91 15 01 	lds	r24, 0x0115
 7cc:	8f 5f       	subi	r24, 0xFF	; 255
 7ce:	80 93 15 01 	sts	0x0115, r24
			{
				TWI_SendStop();
			}
			else
			{
				TWI_SendTransmit();
 7d2:	85 e8       	ldi	r24, 0x85	; 133
 7d4:	80 93 bc 00 	sts	0x00BC, r24
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <__vector_36+0xb6>
		msg_count++;
		status = 1;	
	}
	else
	{
		msg_count =0;
 7da:	10 92 15 01 	sts	0x0115, r1
		}
		case MASTER_DATA_TX_ACK_RX:
		{
			if(!send_message(messagePacketHeader.data))
			{
				TWI_SendStop();
 7de:	85 e9       	ldi	r24, 0x95	; 149
 7e0:	80 93 bc 00 	sts	0x00BC, r24
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <__vector_36+0xb6>
			}
			break;
		}
		case MASTER_DATA_TX_NACK_RX:
		{
			error_handler(SET);
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <error_handler>
			break;
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <__vector_36+0xb6>
		}
		/*******************************************************************************/
		/*******************************READ MODE***************************************/		
		case MASTER_REPEAT_TX:
		{
			TWI_SendTransmit();
 7ee:	85 e8       	ldi	r24, 0x85	; 133
 7f0:	80 93 bc 00 	sts	0x00BC, r24
		default:
		{
			break;
		}
	}
	sei();
 7f4:	78 94       	sei
}
 7f6:	ff 91       	pop	r31
 7f8:	ef 91       	pop	r30
 7fa:	bf 91       	pop	r27
 7fc:	af 91       	pop	r26
 7fe:	9f 91       	pop	r25
 800:	8f 91       	pop	r24
 802:	7f 91       	pop	r23
 804:	6f 91       	pop	r22
 806:	5f 91       	pop	r21
 808:	4f 91       	pop	r20
 80a:	3f 91       	pop	r19
 80c:	2f 91       	pop	r18
 80e:	0f 90       	pop	r0
 810:	0f be       	out	0x3f, r0	; 63
 812:	0f 90       	pop	r0
 814:	1f 90       	pop	r1
 816:	18 95       	reti

00000818 <main>:
static void cmd_setHeading(void)
{
	//Clear the message packet
	memset(messagePacketHeader.data,0,sizeof(messagePacketHeader.data));
	
	messagePacketHeader.address = AUTOPILOT_ADDRESS;
 818:	ee e0       	ldi	r30, 0x0E	; 14
 81a:	f1 e0       	ldi	r31, 0x01	; 1
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 83       	st	Z, r24
	messagePacketHeader.control = TWI_WRITE;
 820:	11 82       	std	Z+1, r1	; 0x01
	messagePacketHeader.syncbit = SYNCBIT;
 822:	96 eb       	ldi	r25, 0xB6	; 182
 824:	92 83       	std	Z+2, r25	; 0x02
	messagePacketHeader.data[0] = SET_HEADING;
 826:	83 83       	std	Z+3, r24	; 0x03
	messagePacketHeader.data[1] = 0x01;
 828:	84 83       	std	Z+4, r24	; 0x04
	messagePacketHeader.data[2] = 0x01;
 82a:	85 83       	std	Z+5, r24	; 0x05

int main(void)
{

	cmd_setHeading();
	sei();
 82c:	78 94       	sei
	error_init(ERROR_PORT, ERROR_LED_GREEN_PIN, ERROR_LED_RED_PIN);
 82e:	47 e0       	ldi	r20, 0x07	; 7
 830:	66 e0       	ldi	r22, 0x06	; 6
 832:	0e 94 da 00 	call	0x1b4	; 0x1b4 <error_init>
	twi_master_init();
 836:	0e 94 c7 01 	call	0x38e	; 0x38e <twi_master_init>
	TWI_SendStart();
 83a:	85 ea       	ldi	r24, 0xA5	; 165
 83c:	80 93 bc 00 	sts	0x00BC, r24
	
	while (1)
	{
		if((messagePacketHeader.data[0] == SET_HEADING) && (messagePacketHeader.data[1] == 0x01) && (messagePacketHeader.data[2] == 0x01))
 840:	ce e0       	ldi	r28, 0x0E	; 14
 842:	d1 e0       	ldi	r29, 0x01	; 1
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	51 f4       	brne	.+20     	; 0x85e <main+0x46>
 84a:	8c 81       	ldd	r24, Y+4	; 0x04
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	39 f4       	brne	.+14     	; 0x85e <main+0x46>
 850:	8d 81       	ldd	r24, Y+5	; 0x05
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	21 f4       	brne	.+8      	; 0x85e <main+0x46>
		{
			IO_flash_slow(ERROR_PORT,ERROR_LED_GREEN_PIN);
 856:	66 e0       	ldi	r22, 0x06	; 6
 858:	0e 94 a6 01 	call	0x34c	; 0x34c <IO_flash_slow>
 85c:	f3 cf       	rjmp	.-26     	; 0x844 <main+0x2c>
		}
		else
		{
			IO_flash(ERROR_PORT,ERROR_LED_GREEN_PIN);
 85e:	66 e0       	ldi	r22, 0x06	; 6
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	0e 94 85 01 	call	0x30a	; 0x30a <IO_flash>
 866:	ee cf       	rjmp	.-36     	; 0x844 <main+0x2c>

00000868 <_exit>:
 868:	f8 94       	cli

0000086a <__stop_program>:
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
