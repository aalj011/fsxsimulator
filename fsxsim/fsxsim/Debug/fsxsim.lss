
fsxsim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000f04  00000f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000fa0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000367  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fb3  00000000  00000000  00001b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000510  00000000  00000000  00002ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000176b  00000000  00000000  00002fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00004734  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000067b  00000000  00000000  000049b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000134b  00000000  00000000  0000502f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000131  00000000  00000000  0000637a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000064ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__ctors_end>
   4:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
   8:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
   c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  10:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  14:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  18:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  1c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  20:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  24:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  28:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_10>
  2c:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_11>
  30:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  34:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  38:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  3c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  40:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  44:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  48:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  4c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  50:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  54:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  58:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  5c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  60:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  64:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  68:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  6c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  70:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  74:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  78:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  7c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  80:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  84:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  88:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  8c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  90:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_36>
  94:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  98:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  9c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  a0:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  a4:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  a8:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
  ac:	e3 04       	cpc	r14, r3
  ae:	e0 04       	cpc	r14, r0
  b0:	dd 04       	cpc	r13, r13
  b2:	da 04       	cpc	r13, r10
  b4:	d7 04       	cpc	r13, r7
  b6:	d4 04       	cpc	r13, r4
  b8:	d1 04       	cpc	r13, r1
  ba:	ce 04       	cpc	r12, r14
  bc:	cb 04       	cpc	r12, r11
  be:	c8 04       	cpc	r12, r8
  c0:	c5 04       	cpc	r12, r5
  c2:	c2 04       	cpc	r12, r2
  c4:	bf 04       	cpc	r11, r15
  c6:	bc 04       	cpc	r11, r12
  c8:	b9 04       	cpc	r11, r9
  ca:	b6 04       	cpc	r11, r6
  cc:	b3 04       	cpc	r11, r3
  ce:	b0 04       	cpc	r11, r0
  d0:	ad 04       	cpc	r10, r13
  d2:	aa 04       	cpc	r10, r10
  d4:	a7 04       	cpc	r10, r7
  d6:	a4 04       	cpc	r10, r4
  d8:	a1 04       	cpc	r10, r1
  da:	9e 04       	cpc	r9, r14
  dc:	9b 04       	cpc	r9, r11
  de:	98 04       	cpc	r9, r8
  e0:	95 04       	cpc	r9, r5
  e2:	92 04       	cpc	r9, r2
  e4:	8f 04       	cpc	r8, r15
  e6:	8c 04       	cpc	r8, r12
  e8:	89 04       	cpc	r8, r9
  ea:	86 04       	cpc	r8, r6
  ec:	83 04       	cpc	r8, r3
  ee:	80 04       	cpc	r8, r0
  f0:	7d 04       	cpc	r7, r13
  f2:	7a 04       	cpc	r7, r10
  f4:	77 04       	cpc	r7, r7
  f6:	74 04       	cpc	r7, r4
  f8:	71 04       	cpc	r7, r1
  fa:	6e 04       	cpc	r6, r14
  fc:	6b 04       	cpc	r6, r11
  fe:	68 04       	cpc	r6, r8
 100:	65 04       	cpc	r6, r5
 102:	62 04       	cpc	r6, r2
 104:	5f 04       	cpc	r5, r15
 106:	5c 04       	cpc	r5, r12
 108:	59 04       	cpc	r5, r9
 10a:	56 04       	cpc	r5, r6
 10c:	53 04       	cpc	r5, r3
 10e:	50 04       	cpc	r5, r0
 110:	4d 04       	cpc	r4, r13
 112:	4a 04       	cpc	r4, r10
 114:	47 04       	cpc	r4, r7
 116:	44 04       	cpc	r4, r4
 118:	41 04       	cpc	r4, r1
 11a:	3e 04       	cpc	r3, r14
 11c:	3b 04       	cpc	r3, r11
 11e:	38 04       	cpc	r3, r8
 120:	35 04       	cpc	r3, r5
 122:	32 04       	cpc	r3, r2
 124:	2f 04       	cpc	r2, r15
 126:	2c 04       	cpc	r2, r12
 128:	29 04       	cpc	r2, r9
 12a:	26 04       	cpc	r2, r6
 12c:	23 04       	cpc	r2, r3

0000012e <descriptor_list>:
 12e:	00 01 00 00 62 01 12 00 02 00 00 74 01 43 00 03     ....b......t.C..
 13e:	00 00 b7 01 04 01 03 09 04 bb 01 14 02 03 09 04     ................
 14e:	d1 01 16 03 03 09 04 e9 01 0c                       ..........

00000158 <endpoint_config_table>:
 158:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000162 <device_descriptor>:
 162:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 172:	03 01                                               ..

00000174 <config1_descriptor>:
 174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 1b4:	40 00 00                                            @..

000001b7 <string0>:
 1b7:	04 03 09 04                                         ....

000001bb <string1>:
 1bb:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 1cb:	6d 00 65 00 00 00                                   m.e...

000001d1 <string2>:
 1d1:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 1e1:	69 00 61 00 6c 00 00 00                             i.a.l...

000001e9 <string3>:
 1e9:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00 00        ..1.2.3.4.5....

000001f8 <__ctors_end>:
 1f8:	11 24       	eor	r1, r1
 1fa:	1f be       	out	0x3f, r1	; 63
 1fc:	cf ef       	ldi	r28, 0xFF	; 255
 1fe:	da e0       	ldi	r29, 0x0A	; 10
 200:	de bf       	out	0x3e, r29	; 62
 202:	cd bf       	out	0x3d, r28	; 61

00000204 <__do_copy_data>:
 204:	11 e0       	ldi	r17, 0x01	; 1
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b1 e0       	ldi	r27, 0x01	; 1
 20a:	e4 e0       	ldi	r30, 0x04	; 4
 20c:	ff e0       	ldi	r31, 0x0F	; 15
 20e:	02 c0       	rjmp	.+4      	; 0x214 <__do_copy_data+0x10>
 210:	05 90       	lpm	r0, Z+
 212:	0d 92       	st	X+, r0
 214:	a8 30       	cpi	r26, 0x08	; 8
 216:	b1 07       	cpc	r27, r17
 218:	d9 f7       	brne	.-10     	; 0x210 <__do_copy_data+0xc>

0000021a <__do_clear_bss>:
 21a:	11 e0       	ldi	r17, 0x01	; 1
 21c:	a8 e0       	ldi	r26, 0x08	; 8
 21e:	b1 e0       	ldi	r27, 0x01	; 1
 220:	01 c0       	rjmp	.+2      	; 0x224 <.do_clear_bss_start>

00000222 <.do_clear_bss_loop>:
 222:	1d 92       	st	X+, r1

00000224 <.do_clear_bss_start>:
 224:	ac 30       	cpi	r26, 0x0C	; 12
 226:	b1 07       	cpc	r27, r17
 228:	e1 f7       	brne	.-8      	; 0x222 <.do_clear_bss_loop>
 22a:	0e 94 77 07 	call	0xeee	; 0xeee <main>
 22e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_exit>

00000232 <__bad_interrupt>:
 232:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000236 <error_init>:

static ports error_port = PORT_C;

void error_init(ports port)
{
	error_port = port;
 236:	80 93 00 01 	sts	0x0100, r24
	
	// clear the io required
	IO_write(error_port, 6,1); // green lgiht
 23a:	66 e0       	ldi	r22, 0x06	; 6
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	0e 94 46 01 	call	0x28c	; 0x28c <IO_write>
	IO_write(error_port,7,0);  // red light
 242:	80 91 00 01 	lds	r24, 0x0100
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	0e 94 46 01 	call	0x28c	; 0x28c <IO_write>
}
 24e:	08 95       	ret

00000250 <error_handler>:


void error_handler(uint8_t status)
{
 250:	1f 93       	push	r17
 252:	18 2f       	mov	r17, r24
	// clear the io required
	IO_write(error_port, 6,0);
 254:	80 91 00 01 	lds	r24, 0x0100
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	0e 94 46 01 	call	0x28c	; 0x28c <IO_write>
	IO_write(error_port,7,0);
 260:	80 91 00 01 	lds	r24, 0x0100
 264:	67 e0       	ldi	r22, 0x07	; 7
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	0e 94 46 01 	call	0x28c	; 0x28c <IO_write>

	if(status)
 26c:	11 23       	and	r17, r17
 26e:	31 f0       	breq	.+12     	; 0x27c <error_handler+0x2c>
	{
		// error has been generated stay in this while loop
		while(1)
		{
			IO_flash(error_port,7);
 270:	80 91 00 01 	lds	r24, 0x0100
 274:	67 e0       	ldi	r22, 0x07	; 7
 276:	0e 94 42 02 	call	0x484	; 0x484 <IO_flash>
 27a:	fa cf       	rjmp	.-12     	; 0x270 <error_handler+0x20>
		}
	}
	else
	{
		// no error generated
		IO_write(error_port,6,1);
 27c:	80 91 00 01 	lds	r24, 0x0100
 280:	66 e0       	ldi	r22, 0x06	; 6
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	0e 94 46 01 	call	0x28c	; 0x28c <IO_write>
	}
 288:	1f 91       	pop	r17
 28a:	08 95       	ret

0000028c <IO_write>:
				state specifies whether we want to set the pin high or low.
** Note: 
*/
void IO_write(ports port, uint8_t pinnumber,uint8_t state)
{
	switch (port)
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	09 f4       	brne	.+2      	; 0x292 <IO_write+0x6>
 290:	3f c0       	rjmp	.+126    	; 0x310 <IO_write+0x84>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	30 f4       	brcc	.+12     	; 0x2a2 <IO_write+0x16>
 296:	88 23       	and	r24, r24
 298:	59 f0       	breq	.+22     	; 0x2b0 <IO_write+0x24>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <IO_write+0x14>
 29e:	7f c0       	rjmp	.+254    	; 0x39e <IO_write+0x112>
 2a0:	1f c0       	rjmp	.+62     	; 0x2e0 <IO_write+0x54>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <IO_write+0x1c>
 2a6:	4c c0       	rjmp	.+152    	; 0x340 <IO_write+0xb4>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	09 f0       	breq	.+2      	; 0x2ae <IO_write+0x22>
 2ac:	78 c0       	rjmp	.+240    	; 0x39e <IO_write+0x112>
 2ae:	60 c0       	rjmp	.+192    	; 0x370 <IO_write+0xe4>
	{
		case PORT_B:
		{
			#ifdef PORTB
			//set the pinnumber as output
			DDRB |= (1 << pinnumber);
 2b0:	24 b1       	in	r18, 0x04	; 4
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <IO_write+0x32>
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <IO_write+0x2e>
 2c2:	bf 01       	movw	r22, r30
 2c4:	8e 2f       	mov	r24, r30
 2c6:	82 2b       	or	r24, r18
 2c8:	84 b9       	out	0x04, r24	; 4
			if(state)
 2ca:	44 23       	and	r20, r20
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <IO_write+0x4a>
			{
				PORTB |= (1 << pinnumber);
 2ce:	85 b1       	in	r24, 0x05	; 5
 2d0:	68 2b       	or	r22, r24
 2d2:	65 b9       	out	0x05, r22	; 5
 2d4:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<< pinnumber);
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	60 95       	com	r22
 2da:	68 23       	and	r22, r24
 2dc:	65 b9       	out	0x05, r22	; 5
 2de:	08 95       	ret
		}
		case PORT_C:
		{
			#ifdef PORTC
			//set the pinnumber as output
			DDRC |= (1 << pinnumber);
 2e0:	27 b1       	in	r18, 0x07	; 7
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <IO_write+0x62>
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <IO_write+0x5e>
 2f2:	bf 01       	movw	r22, r30
 2f4:	8e 2f       	mov	r24, r30
 2f6:	82 2b       	or	r24, r18
 2f8:	87 b9       	out	0x07, r24	; 7
			if(state)
 2fa:	44 23       	and	r20, r20
 2fc:	21 f0       	breq	.+8      	; 0x306 <IO_write+0x7a>
			{
				PORTC |= (1 << pinnumber);
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	68 2b       	or	r22, r24
 302:	68 b9       	out	0x08, r22	; 8
 304:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<< pinnumber);
 306:	88 b1       	in	r24, 0x08	; 8
 308:	60 95       	com	r22
 30a:	68 23       	and	r22, r24
 30c:	68 b9       	out	0x08, r22	; 8
 30e:	08 95       	ret
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set the pinnumber as output
			DDRD |= (1 << pinnumber);
 310:	2a b1       	in	r18, 0x0a	; 10
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <IO_write+0x92>
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <IO_write+0x8e>
 322:	bf 01       	movw	r22, r30
 324:	8e 2f       	mov	r24, r30
 326:	82 2b       	or	r24, r18
 328:	8a b9       	out	0x0a, r24	; 10
			if(state)
 32a:	44 23       	and	r20, r20
 32c:	21 f0       	breq	.+8      	; 0x336 <IO_write+0xaa>
			{
				PORTD |= (1 << pinnumber);
 32e:	8b b1       	in	r24, 0x0b	; 11
 330:	68 2b       	or	r22, r24
 332:	6b b9       	out	0x0b, r22	; 11
 334:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<< pinnumber);
 336:	8b b1       	in	r24, 0x0b	; 11
 338:	60 95       	com	r22
 33a:	68 23       	and	r22, r24
 33c:	6b b9       	out	0x0b, r22	; 11
 33e:	08 95       	ret
		}
		case PORT_E:
		{
			#ifdef PORTE
			//set the pinnumber as output
			DDRE |= (1 << pinnumber);
 340:	2d b1       	in	r18, 0x0d	; 13
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	fc 01       	movw	r30, r24
 348:	02 c0       	rjmp	.+4      	; 0x34e <IO_write+0xc2>
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <IO_write+0xbe>
 352:	bf 01       	movw	r22, r30
 354:	8e 2f       	mov	r24, r30
 356:	82 2b       	or	r24, r18
 358:	8d b9       	out	0x0d, r24	; 13
			if(state)
 35a:	44 23       	and	r20, r20
 35c:	21 f0       	breq	.+8      	; 0x366 <IO_write+0xda>
			{
				PORTE |= (1 << pinnumber);
 35e:	8e b1       	in	r24, 0x0e	; 14
 360:	68 2b       	or	r22, r24
 362:	6e b9       	out	0x0e, r22	; 14
 364:	08 95       	ret
			}
			else
			{
				PORTE &= ~(1<< pinnumber);
 366:	8e b1       	in	r24, 0x0e	; 14
 368:	60 95       	com	r22
 36a:	68 23       	and	r22, r24
 36c:	6e b9       	out	0x0e, r22	; 14
 36e:	08 95       	ret
		}
		case PORT_F:
		{
			#ifdef PORTF
			//set the pinnumber as output
			DDRF |= (1 << pinnumber);
 370:	20 b3       	in	r18, 0x10	; 16
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	fc 01       	movw	r30, r24
 378:	02 c0       	rjmp	.+4      	; 0x37e <IO_write+0xf2>
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <IO_write+0xee>
 382:	bf 01       	movw	r22, r30
 384:	8e 2f       	mov	r24, r30
 386:	82 2b       	or	r24, r18
 388:	80 bb       	out	0x10, r24	; 16
			if(state)
 38a:	44 23       	and	r20, r20
 38c:	21 f0       	breq	.+8      	; 0x396 <IO_write+0x10a>
			{
				PORTF |= (1 << pinnumber);
 38e:	81 b3       	in	r24, 0x11	; 17
 390:	68 2b       	or	r22, r24
 392:	61 bb       	out	0x11, r22	; 17
 394:	08 95       	ret
			}
			else
			{
				PORTF &= ~(1<< pinnumber);
 396:	81 b3       	in	r24, 0x11	; 17
 398:	60 95       	com	r22
 39a:	68 23       	and	r22, r24
 39c:	61 bb       	out	0x11, r22	; 17
 39e:	08 95       	ret

000003a0 <IO_read>:
*/
uint8_t IO_read(ports port, uint8_t pinnumber)
{
	uint8_t pinvalue = 0;
	
	switch (port)
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	a9 f1       	breq	.+106    	; 0x40e <IO_read+0x6e>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	30 f4       	brcc	.+12     	; 0x3b4 <IO_read+0x14>
 3a8:	88 23       	and	r24, r24
 3aa:	59 f0       	breq	.+22     	; 0x3c2 <IO_read+0x22>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <IO_read+0x12>
 3b0:	67 c0       	rjmp	.+206    	; 0x480 <IO_read+0xe0>
 3b2:	1a c0       	rjmp	.+52     	; 0x3e8 <IO_read+0x48>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	09 f4       	brne	.+2      	; 0x3ba <IO_read+0x1a>
 3b8:	3d c0       	rjmp	.+122    	; 0x434 <IO_read+0x94>
 3ba:	84 30       	cpi	r24, 0x04	; 4
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <IO_read+0x20>
 3be:	60 c0       	rjmp	.+192    	; 0x480 <IO_read+0xe0>
 3c0:	4c c0       	rjmp	.+152    	; 0x45a <IO_read+0xba>
	{
		case PORT_B:
		{
			#ifdef PORTB	
			//set pin as input
			DDRB &= ~(1 << pinnumber);
 3c2:	44 b1       	in	r20, 0x04	; 4
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	c9 01       	movw	r24, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <IO_read+0x30>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <IO_read+0x2c>
 3d4:	98 2f       	mov	r25, r24
 3d6:	90 95       	com	r25
 3d8:	94 23       	and	r25, r20
 3da:	94 b9       	out	0x04, r25	; 4
			//enable pull up resistor
			PORTB |= (1 << pinnumber);
 3dc:	95 b1       	in	r25, 0x05	; 5
 3de:	98 2b       	or	r25, r24
 3e0:	95 b9       	out	0x05, r25	; 5
			//read the value required
			pinvalue = (1 << pinnumber)&(PINB);	
 3e2:	93 b1       	in	r25, 0x03	; 3
 3e4:	89 23       	and	r24, r25
			#endif				
			break;
 3e6:	08 95       	ret
		}
		case PORT_C:
		{
			#ifdef PORTC
			//set pin as input
			DDRC &= ~(1 << pinnumber);
 3e8:	47 b1       	in	r20, 0x07	; 7
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	c9 01       	movw	r24, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <IO_read+0x56>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <IO_read+0x52>
 3fa:	98 2f       	mov	r25, r24
 3fc:	90 95       	com	r25
 3fe:	94 23       	and	r25, r20
 400:	97 b9       	out	0x07, r25	; 7
			//enable pull up resistor
			PORTC |= (1 << pinnumber);
 402:	98 b1       	in	r25, 0x08	; 8
 404:	98 2b       	or	r25, r24
 406:	98 b9       	out	0x08, r25	; 8
			//read the value required
			pinvalue = (1 << pinnumber)&(PINC);	
 408:	96 b1       	in	r25, 0x06	; 6
 40a:	89 23       	and	r24, r25
			#endif						
			break;
 40c:	08 95       	ret
		}
		case PORT_D:
		{
			#ifdef PORTD
			//set pin as input
			DDRD &= ~(1 << pinnumber);
 40e:	4a b1       	in	r20, 0x0a	; 10
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	c9 01       	movw	r24, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <IO_read+0x7c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <IO_read+0x78>
 420:	98 2f       	mov	r25, r24
 422:	90 95       	com	r25
 424:	94 23       	and	r25, r20
 426:	9a b9       	out	0x0a, r25	; 10
			//enable pull up resistor
			PORTD |= (1 << pinnumber);
 428:	9b b1       	in	r25, 0x0b	; 11
 42a:	98 2b       	or	r25, r24
 42c:	9b b9       	out	0x0b, r25	; 11
			//read the value required
			pinvalue = (1 << pinnumber)&(PIND);
 42e:	99 b1       	in	r25, 0x09	; 9
 430:	89 23       	and	r24, r25
			#endif					
			break;
 432:	08 95       	ret
		}
		case PORT_E:
		{
			#ifdef PORTE
			//set pin as input
			DDRE &= ~(1 << pinnumber);
 434:	4d b1       	in	r20, 0x0d	; 13
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	c9 01       	movw	r24, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <IO_read+0xa2>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <IO_read+0x9e>
 446:	98 2f       	mov	r25, r24
 448:	90 95       	com	r25
 44a:	94 23       	and	r25, r20
 44c:	9d b9       	out	0x0d, r25	; 13
			//enable pull up resistor
			PORTE |= (1 << pinnumber);
 44e:	9e b1       	in	r25, 0x0e	; 14
 450:	98 2b       	or	r25, r24
 452:	9e b9       	out	0x0e, r25	; 14
			//read the value required
			pinvalue = (1 << pinnumber)&(PINE);	
 454:	9c b1       	in	r25, 0x0c	; 12
 456:	89 23       	and	r24, r25
			#endif		
			break;
 458:	08 95       	ret
		}
		case PORT_F:
		{
			#ifdef PORTF
			//set pin as input
			DDRF &= ~(1 << pinnumber);
 45a:	40 b3       	in	r20, 0x10	; 16
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	c9 01       	movw	r24, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <IO_read+0xc8>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <IO_read+0xc4>
 46c:	98 2f       	mov	r25, r24
 46e:	90 95       	com	r25
 470:	94 23       	and	r25, r20
 472:	90 bb       	out	0x10, r25	; 16
			//enable pull up resistor
			PORTF |= (1 << pinnumber);
 474:	91 b3       	in	r25, 0x11	; 17
 476:	98 2b       	or	r25, r24
 478:	91 bb       	out	0x11, r25	; 17
			//read the value required
			pinvalue = (1 << pinnumber)&(PINF);	
 47a:	9f b1       	in	r25, 0x0f	; 15
 47c:	89 23       	and	r24, r25
			#endif			
			break;
 47e:	08 95       	ret
** Note: 
** Returns:		returns a 1 or 0 depending on the state of the pin read.
*/
uint8_t IO_read(ports port, uint8_t pinnumber)
{
	uint8_t pinvalue = 0;
 480:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	
	return pinvalue;
}
 482:	08 95       	ret

00000484 <IO_flash>:

void IO_flash(ports port, uint8_t pinnumber)
{
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	08 2f       	mov	r16, r24
 48a:	16 2f       	mov	r17, r22
	IO_write(port, pinnumber, 0);
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	0e 94 46 01 	call	0x28c	; 0x28c <IO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 492:	8f e7       	ldi	r24, 0x7F	; 127
 494:	9a e1       	ldi	r25, 0x1A	; 26
 496:	a6 e0       	ldi	r26, 0x06	; 6
 498:	81 50       	subi	r24, 0x01	; 1
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	a0 40       	sbci	r26, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <IO_flash+0x14>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <IO_flash+0x1e>
 4a2:	00 00       	nop
	_delay_ms(2000);
	IO_write(port, pinnumber, 1);
 4a4:	80 2f       	mov	r24, r16
 4a6:	61 2f       	mov	r22, r17
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	0e 94 46 01 	call	0x28c	; 0x28c <IO_write>
 4ae:	8f e7       	ldi	r24, 0x7F	; 127
 4b0:	9a e1       	ldi	r25, 0x1A	; 26
 4b2:	a6 e0       	ldi	r26, 0x06	; 6
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	a0 40       	sbci	r26, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <IO_flash+0x30>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <IO_flash+0x3a>
 4be:	00 00       	nop
	_delay_ms(2000);
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	08 95       	ret

000004c6 <twi_master_init>:
Note:			None
****************************************************************************/
void twi_master_init(void)
{
	//PRR0 = (0<<PRTWI);													//Turn off Power reduction on TWI 							
	TWSR = (0<<TWPS0)|(0<<TWPS1);
 4c6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = TWBR_BIT_RATE;													//Bit rate at 8mhz 100khz 0x20	
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	80 93 b8 00 	sts	0x00B8, r24
	TWDR = 0xFF;															//Dummy data
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(0<<TWINT)|											//Disable interrupt
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Setting ACK gen,start condition and stop condition to zero init conditions 
			(0<<TWWC);														//Write collision flag to zero	
}
 4dc:	08 95       	ret

000004de <twi_master_start_condition>:
Note:			None
****************************************************************************/
void twi_master_start_condition(void)
{
	uint8_t status = 0;	
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 4de:	85 ea       	ldi	r24, 0xA5	; 165
 4e0:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);														//write collision flag to zero	
}
 4e4:	08 95       	ret

000004e6 <twi_master_stop_condition>:
Returns:		None
Note:			None
****************************************************************************/
void twi_master_stop_condition(void)
{
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 4e6:	85 e9       	ldi	r24, 0x95	; 149
 4e8:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|								//Enabling the stop condition bit 
			(0<<TWWC);														//write collision flag to zero	
}
 4ec:	08 95       	ret

000004ee <twi_master_repeatCondition>:
Note:			None
****************************************************************************/
void twi_master_repeatCondition(void)
{
	uint8_t status = 0;	
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 4ee:	85 ea       	ldi	r24, 0xA5	; 165
 4f0:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);														//write collision flag to zero	
}
 4f4:	08 95       	ret

000004f6 <twi_master_sla_sendAddress>:
{
	uint8_t status = 0;
	uint8_t slave_address = 0;
	uint8_t ACK = 0;
		
	if(read == 1)
 4f6:	61 30       	cpi	r22, 0x01	; 1
 4f8:	19 f4       	brne	.+6      	; 0x500 <twi_master_sla_sendAddress+0xa>
	{
		slave_address = (address << 1)| (TWI_READ);
 4fa:	88 0f       	add	r24, r24
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <twi_master_sla_sendAddress+0xc>
	}
	else
	{
		slave_address = (address << 1)| (TWI_WRITE);
 500:	88 0f       	add	r24, r24
	}	
		
	TWDR = slave_address;													//Set the data register with the slave address and the read/write bit
 502:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWEN)|														//Enables TWI interface
 506:	85 ec       	ldi	r24, 0xC5	; 197
 508:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);		
}
 50c:	08 95       	ret

0000050e <twi_master_sendData>:
Returns:		None
Note:			None
****************************************************************************/
void twi_master_sendData(uint8_t data)
{	
	TWDR = data;
 50e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWEN)|														//Enables TWI interface
 512:	85 e8       	ldi	r24, 0x85	; 133
 514:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
		(0<<TWWC);																//Data to transmit
}
 518:	08 95       	ret

0000051a <twi_master_readData>:
Returns:		None
Note:			None
****************************************************************************/
void twi_master_readData(void)
{
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 51a:	85 ec       	ldi	r24, 0xC5	; 197
 51c:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enable ACK bit
			(0<<TWWC);	
}
 520:	08 95       	ret

00000522 <twi_master_readFinished>:
Returns:		None
Note:			None
****************************************************************************/
void twi_master_readFinished(void)
{
	TWCR =	(1<<TWEN)|														//Enables TWI interface
 522:	85 e8       	ldi	r24, 0x85	; 133
 524:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);	
}
 528:	08 95       	ret

0000052a <twi_slave_init>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_init(uint8_t slaveaddress)
{	
	TWAR = (slaveaddress<<1);
 52a:	88 0f       	add	r24, r24
 52c:	80 93 ba 00 	sts	0x00BA, r24
																						//Load the slave address
	TWCR = (1<<TWEN)|														//Enables TWI interface
 530:	85 ec       	ldi	r24, 0xC5	; 197
 532:	80 93 bc 00 	sts	0x00BC, r24
Returns:		None
Note:			None
****************************************************************************/
static void flagwait(void)
{
	while(!(TWCR &(1<<TWINT)));
 536:	ec eb       	ldi	r30, 0xBC	; 188
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	ec f7       	brge	.-6      	; 0x53a <twi_slave_init+0x10>
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);												//Enable twi
	
	flagwait();														//Wait till flag is cleared	
}
 540:	08 95       	ret

00000542 <twi_slave_ACK_tx>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_ACK_tx(void)
{	
	TWCR = (1<<TWEN)|														//Enables TWI interface
 542:	85 ec       	ldi	r24, 0xC5	; 197
 544:	80 93 bc 00 	sts	0x00BC, r24
			(1<<TWIE)|(1<<TWINT)|											//Enable interrupt
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|								//Enabling the start condition bit 
			(0<<TWWC);										
}
 548:	08 95       	ret

0000054a <twi_slave_NACK_tx>:
Returns:		None
Note:			None
****************************************************************************/
void twi_slave_NACK_tx(void)
{		
	TWCR = (1<<TWINT)|(1<<TWEN)|(0<<TWEA)|(1<<TWIE);											
 54a:	85 e8       	ldi	r24, 0x85	; 133
 54c:	80 93 bc 00 	sts	0x00BC, r24
}
 550:	08 95       	ret

00000552 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 558:	80 ea       	ldi	r24, 0xA0	; 160
 55a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 55e:	82 e1       	ldi	r24, 0x12	; 18
 560:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 562:	09 b4       	in	r0, 0x29	; 41
 564:	00 fe       	sbrs	r0, 0
 566:	fd cf       	rjmp	.-6      	; 0x562 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 568:	80 e9       	ldi	r24, 0x90	; 144
 56a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 56e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 572:	10 92 08 01 	sts	0x0108, r1
	cdc_line_rtsdtr = 0;
 576:	10 92 09 01 	sts	0x0109, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 57a:	8c e0       	ldi	r24, 0x0C	; 12
 57c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 580:	78 94       	sei
}
 582:	08 95       	ret

00000584 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 584:	80 91 08 01 	lds	r24, 0x0108
}
 588:	08 95       	ret

0000058a <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 58a:	3f b7       	in	r19, 0x3f	; 63
	cli();
 58c:	f8 94       	cli
	if (!usb_configuration) {
 58e:	80 91 08 01 	lds	r24, 0x0108
 592:	88 23       	and	r24, r24
 594:	21 f4       	brne	.+8      	; 0x59e <usb_serial_getchar+0x14>
		SREG = intr_state;
 596:	3f bf       	out	0x3f, r19	; 63
		return -1;
 598:	2f ef       	ldi	r18, 0xFF	; 255
 59a:	3f ef       	ldi	r19, 0xFF	; 255
 59c:	24 c0       	rjmp	.+72     	; 0x5e6 <usb_serial_getchar+0x5c>
	}
	UENUM = CDC_RX_ENDPOINT;
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	80 93 e9 00 	sts	0x00E9, r24
	retry:
	c = UEINTX;
 5a4:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(c & (1<<RWAL))) {
 5a8:	85 fd       	sbrc	r24, 5
 5aa:	12 c0       	rjmp	.+36     	; 0x5d0 <usb_serial_getchar+0x46>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
 5ac:	82 fd       	sbrc	r24, 2
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <usb_serial_getchar+0x2e>
 5b0:	0b c0       	rjmp	.+22     	; 0x5c8 <usb_serial_getchar+0x3e>
 5b2:	82 fd       	sbrc	r24, 2
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <usb_serial_getchar+0x34>
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <usb_serial_getchar+0x3e>
			UEINTX = 0x6B;
 5b8:	e8 ee       	ldi	r30, 0xE8	; 232
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	9b e6       	ldi	r25, 0x6B	; 107
 5be:	90 83       	st	Z, r25
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
	retry:
	c = UEINTX;
 5c0:	80 81       	ld	r24, Z
	if (!(c & (1<<RWAL))) {
 5c2:	85 ff       	sbrs	r24, 5
 5c4:	f6 cf       	rjmp	.-20     	; 0x5b2 <usb_serial_getchar+0x28>
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <usb_serial_getchar+0x46>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
			UEINTX = 0x6B;
			goto retry;
		}	
		SREG = intr_state;
 5c8:	3f bf       	out	0x3f, r19	; 63
		return -1;
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
 5cc:	3f ef       	ldi	r19, 0xFF	; 255
 5ce:	0b c0       	rjmp	.+22     	; 0x5e6 <usb_serial_getchar+0x5c>
	}
	// take one byte out of the buffer
	c = UEDATX;
 5d0:	20 91 f1 00 	lds	r18, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 5d4:	80 91 e8 00 	lds	r24, 0x00E8
 5d8:	85 fd       	sbrc	r24, 5
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <usb_serial_getchar+0x58>
 5dc:	8b e6       	ldi	r24, 0x6B	; 107
 5de:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 5e2:	3f bf       	out	0x3f, r19	; 63
	return c;
 5e4:	30 e0       	ldi	r19, 0x00	; 0
}
 5e6:	82 2f       	mov	r24, r18
 5e8:	93 2f       	mov	r25, r19
 5ea:	08 95       	ret

000005ec <usb_serial_available>:
// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
	uint8_t n=0, i, intr_state;

	intr_state = SREG;
 5ec:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5ee:	f8 94       	cli
	if (usb_configuration) {
 5f0:	80 91 08 01 	lds	r24, 0x0108
 5f4:	88 23       	and	r24, r24
 5f6:	89 f0       	breq	.+34     	; 0x61a <usb_serial_available+0x2e>
		UENUM = CDC_RX_ENDPOINT;
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
 5fe:	80 91 f2 00 	lds	r24, 0x00F2
		if (!n) {
 602:	88 23       	and	r24, r24
 604:	59 f4       	brne	.+22     	; 0x61c <usb_serial_available+0x30>
			i = UEINTX;
 606:	20 91 e8 00 	lds	r18, 0x00E8
			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 60a:	22 ff       	sbrs	r18, 2
 60c:	07 c0       	rjmp	.+14     	; 0x61c <usb_serial_available+0x30>
 60e:	25 fd       	sbrc	r18, 5
 610:	05 c0       	rjmp	.+10     	; 0x61c <usb_serial_available+0x30>
 612:	2b e6       	ldi	r18, 0x6B	; 107
 614:	20 93 e8 00 	sts	0x00E8, r18
 618:	01 c0       	rjmp	.+2      	; 0x61c <usb_serial_available+0x30>
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
	uint8_t n=0, i, intr_state;
 61a:	80 e0       	ldi	r24, 0x00	; 0
		if (!n) {
			i = UEINTX;
			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
		}
	}
	SREG = intr_state;
 61c:	9f bf       	out	0x3f, r25	; 63
	return n;
}
 61e:	08 95       	ret

00000620 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
 620:	80 91 08 01 	lds	r24, 0x0108
 624:	88 23       	and	r24, r24
 626:	89 f0       	breq	.+34     	; 0x64a <usb_serial_flush_input+0x2a>
		intr_state = SREG;
 628:	2f b7       	in	r18, 0x3f	; 63
		cli();
 62a:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
 632:	80 91 e8 00 	lds	r24, 0x00E8
 636:	85 ff       	sbrs	r24, 5
 638:	07 c0       	rjmp	.+14     	; 0x648 <usb_serial_flush_input+0x28>
			UEINTX = 0x6B; 
 63a:	e8 ee       	ldi	r30, 0xE8	; 232
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	9b e6       	ldi	r25, 0x6B	; 107
 640:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
 642:	80 81       	ld	r24, Z
 644:	85 fd       	sbrc	r24, 5
 646:	fc cf       	rjmp	.-8      	; 0x640 <usb_serial_flush_input+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
 648:	2f bf       	out	0x3f, r18	; 63
 64a:	08 95       	ret

0000064c <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 650:	90 91 08 01 	lds	r25, 0x0108
 654:	99 23       	and	r25, r25
 656:	09 f4       	brne	.+2      	; 0x65a <usb_serial_putchar+0xe>
 658:	4d c0       	rjmp	.+154    	; 0x6f4 <usb_serial_putchar+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 65a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 65c:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 65e:	24 e0       	ldi	r18, 0x04	; 4
 660:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 664:	20 91 0b 01 	lds	r18, 0x010B
 668:	22 23       	and	r18, r18
 66a:	49 f0       	breq	.+18     	; 0x67e <usb_serial_putchar+0x32>
		if (!(UEINTX & (1<<RWAL))) {
 66c:	20 91 e8 00 	lds	r18, 0x00E8
 670:	25 fd       	sbrc	r18, 5
 672:	03 c0       	rjmp	.+6      	; 0x67a <usb_serial_putchar+0x2e>
			SREG = intr_state;
 674:	9f bf       	out	0x3f, r25	; 63
			return -1;
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	42 c0       	rjmp	.+132    	; 0x6fe <usb_serial_putchar+0xb2>
		}
		transmit_previous_timeout = 0;
 67a:	10 92 0b 01 	sts	0x010B, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 67e:	30 91 e4 00 	lds	r19, 0x00E4
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 682:	20 91 e8 00 	lds	r18, 0x00E8
 686:	25 fd       	sbrc	r18, 5
 688:	26 c0       	rjmp	.+76     	; 0x6d6 <usb_serial_putchar+0x8a>
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 68a:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
 68c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 68e:	90 91 e4 00 	lds	r25, 0x00E4
 692:	93 17       	cp	r25, r19
 694:	49 f0       	breq	.+18     	; 0x6a8 <usb_serial_putchar+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 696:	90 91 08 01 	lds	r25, 0x0108
 69a:	99 23       	and	r25, r25
 69c:	79 f4       	brne	.+30     	; 0x6bc <usb_serial_putchar+0x70>
 69e:	2c c0       	rjmp	.+88     	; 0x6f8 <usb_serial_putchar+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
 6a0:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 6a2:	98 81       	ld	r25, Y
 6a4:	93 17       	cp	r25, r19
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <usb_serial_putchar+0x66>
			transmit_previous_timeout = 1;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 0b 01 	sts	0x010B, r24
			return -1;
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	26 c0       	rjmp	.+76     	; 0x6fe <usb_serial_putchar+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 6b2:	90 91 08 01 	lds	r25, 0x0108
 6b6:	99 23       	and	r25, r25
 6b8:	41 f4       	brne	.+16     	; 0x6ca <usb_serial_putchar+0x7e>
 6ba:	20 c0       	rjmp	.+64     	; 0x6fc <usb_serial_putchar+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
 6bc:	a9 ee       	ldi	r26, 0xE9	; 233
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 6c2:	e8 ee       	ldi	r30, 0xE8	; 232
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 6c6:	c4 ee       	ldi	r28, 0xE4	; 228
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
 6ca:	9f b7       	in	r25, 0x3f	; 63
		cli();
 6cc:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 6ce:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 6d0:	20 81       	ld	r18, Z
 6d2:	25 ff       	sbrs	r18, 5
 6d4:	e5 cf       	rjmp	.-54     	; 0x6a0 <usb_serial_putchar+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 6d6:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 6da:	80 91 e8 00 	lds	r24, 0x00E8
 6de:	85 fd       	sbrc	r24, 5
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <usb_serial_putchar+0x9c>
 6e2:	8a e3       	ldi	r24, 0x3A	; 58
 6e4:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 6e8:	85 e0       	ldi	r24, 0x05	; 5
 6ea:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
 6ee:	9f bf       	out	0x3f, r25	; 63
	return 0;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	05 c0       	rjmp	.+10     	; 0x6fe <usb_serial_putchar+0xb2>
int8_t usb_serial_putchar(uint8_t c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <usb_serial_putchar+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <usb_serial_putchar+0xb2>
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <usb_serial_putchar_nowait>:
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
	uint8_t intr_state;

	if (!usb_configuration) return -1;
 704:	90 91 08 01 	lds	r25, 0x0108
 708:	99 23       	and	r25, r25
 70a:	d9 f0       	breq	.+54     	; 0x742 <usb_serial_putchar_nowait+0x3e>
	intr_state = SREG;
 70c:	2f b7       	in	r18, 0x3f	; 63
	cli();
 70e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 710:	94 e0       	ldi	r25, 0x04	; 4
 712:	90 93 e9 00 	sts	0x00E9, r25
	if (!(UEINTX & (1<<RWAL))) {
 716:	90 91 e8 00 	lds	r25, 0x00E8
 71a:	95 fd       	sbrc	r25, 5
 71c:	03 c0       	rjmp	.+6      	; 0x724 <usb_serial_putchar_nowait+0x20>
		// buffer is full
		SREG = intr_state;
 71e:	2f bf       	out	0x3f, r18	; 63
		return -1;
 720:	8f ef       	ldi	r24, 0xFF	; 255
 722:	08 95       	ret
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 724:	80 93 f1 00 	sts	0x00F1, r24
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 728:	80 91 e8 00 	lds	r24, 0x00E8
 72c:	85 fd       	sbrc	r24, 5
 72e:	03 c0       	rjmp	.+6      	; 0x736 <usb_serial_putchar_nowait+0x32>
 730:	8a e3       	ldi	r24, 0x3A	; 58
 732:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 736:	85 e0       	ldi	r24, 0x05	; 5
 738:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
 73c:	2f bf       	out	0x3f, r18	; 63
	return 0;
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	08 95       	ret
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
	uint8_t intr_state;

	if (!usb_configuration) return -1;
 742:	8f ef       	ldi	r24, 0xFF	; 255
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
 744:	08 95       	ret

00000746 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
 746:	9f 92       	push	r9
 748:	af 92       	push	r10
 74a:	bf 92       	push	r11
 74c:	cf 92       	push	r12
 74e:	df 92       	push	r13
 750:	ef 92       	push	r14
 752:	ff 92       	push	r15
 754:	0f 93       	push	r16
 756:	1f 93       	push	r17
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	dc 01       	movw	r26, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 75e:	80 91 08 01 	lds	r24, 0x0108
 762:	88 23       	and	r24, r24
 764:	09 f4       	brne	.+2      	; 0x768 <usb_serial_write+0x22>
 766:	3c c1       	rjmp	.+632    	; 0x9e0 <usb_serial_write+0x29a>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 768:	ff b6       	in	r15, 0x3f	; 63
	cli();
 76a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 76c:	84 e0       	ldi	r24, 0x04	; 4
 76e:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 772:	80 91 0b 01 	lds	r24, 0x010B
 776:	88 23       	and	r24, r24
 778:	49 f0       	breq	.+18     	; 0x78c <usb_serial_write+0x46>
		if (!(UEINTX & (1<<RWAL))) {
 77a:	80 91 e8 00 	lds	r24, 0x00E8
 77e:	85 fd       	sbrc	r24, 5
 780:	03 c0       	rjmp	.+6      	; 0x788 <usb_serial_write+0x42>
			SREG = intr_state;
 782:	ff be       	out	0x3f, r15	; 63
			return -1;
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	33 c1       	rjmp	.+614    	; 0x9ee <usb_serial_write+0x2a8>
		}
		transmit_previous_timeout = 0;
 788:	10 92 0b 01 	sts	0x010B, r1
	}
	// each iteration of this loop transmits a packet
	while (size) {
 78c:	61 15       	cp	r22, r1
 78e:	71 05       	cpc	r23, r1
 790:	09 f4       	brne	.+2      	; 0x794 <usb_serial_write+0x4e>
 792:	28 c1       	rjmp	.+592    	; 0x9e4 <usb_serial_write+0x29e>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 794:	c4 ee       	ldi	r28, 0xE4	; 228
 796:	d0 e0       	ldi	r29, 0x00	; 0
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
 798:	88 ee       	ldi	r24, 0xE8	; 232
 79a:	90 e0       	ldi	r25, 0x00	; 0
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
 79c:	49 ee       	ldi	r20, 0xE9	; 233
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	ee 24       	eor	r14, r14
 7a2:	68 94       	set
 7a4:	e2 f8       	bld	r14, 2
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
 7a6:	02 ef       	ldi	r16, 0xF2	; 242
 7a8:	10 e0       	ldi	r17, 0x00	; 0
 7aa:	cc 24       	eor	r12, r12
 7ac:	68 94       	set
 7ae:	c6 f8       	bld	r12, 6
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
 7b0:	21 ef       	ldi	r18, 0xF1	; 241
 7b2:	30 e0       	ldi	r19, 0x00	; 0
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 7b4:	0f 2e       	mov	r0, r31
 7b6:	fa e3       	ldi	r31, 0x3A	; 58
 7b8:	bf 2e       	mov	r11, r31
 7ba:	f0 2d       	mov	r31, r0
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 7bc:	0f 2e       	mov	r0, r31
 7be:	f5 e0       	ldi	r31, 0x05	; 5
 7c0:	df 2e       	mov	r13, r31
 7c2:	f0 2d       	mov	r31, r0
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 7c4:	98 80       	ld	r9, Y
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
 7c6:	fc 01       	movw	r30, r24
 7c8:	a0 80       	ld	r10, Z
 7ca:	a5 fc       	sbrc	r10, 5
 7cc:	21 c0       	rjmp	.+66     	; 0x810 <usb_serial_write+0xca>
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 7ce:	f9 e1       	ldi	r31, 0x19	; 25
 7d0:	9f 0e       	add	r9, r31
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
			SREG = intr_state;
 7d2:	ff be       	out	0x3f, r15	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
 7d4:	e8 81       	ld	r30, Y
 7d6:	e9 15       	cp	r30, r9
 7d8:	49 f0       	breq	.+18     	; 0x7ec <usb_serial_write+0xa6>
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 7da:	e0 91 08 01 	lds	r30, 0x0108
 7de:	ee 23       	and	r30, r30
 7e0:	79 f4       	brne	.+30     	; 0x800 <usb_serial_write+0xba>
 7e2:	02 c1       	rjmp	.+516    	; 0x9e8 <usb_serial_write+0x2a2>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
			SREG = intr_state;
 7e4:	ff be       	out	0x3f, r15	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
 7e6:	e8 81       	ld	r30, Y
 7e8:	e9 15       	cp	r30, r9
 7ea:	29 f4       	brne	.+10     	; 0x7f6 <usb_serial_write+0xb0>
				transmit_previous_timeout = 1;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	80 93 0b 01 	sts	0x010B, r24
				return -1;
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	fc c0       	rjmp	.+504    	; 0x9ee <usb_serial_write+0x2a8>
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 7f6:	e0 91 08 01 	lds	r30, 0x0108
 7fa:	ee 23       	and	r30, r30
 7fc:	09 f4       	brne	.+2      	; 0x800 <usb_serial_write+0xba>
 7fe:	f6 c0       	rjmp	.+492    	; 0x9ec <usb_serial_write+0x2a6>
			// get ready to try checking again
			intr_state = SREG;
 800:	ff b6       	in	r15, 0x3f	; 63
			cli();
 802:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
 804:	fa 01       	movw	r30, r20
 806:	e0 82       	st	Z, r14
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
 808:	fc 01       	movw	r30, r24
 80a:	a0 80       	ld	r10, Z
 80c:	a5 fe       	sbrs	r10, 5
 80e:	ea cf       	rjmp	.-44     	; 0x7e4 <usb_serial_write+0x9e>
			cli();
			UENUM = CDC_TX_ENDPOINT;
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
 810:	f8 01       	movw	r30, r16
 812:	a0 80       	ld	r10, Z
 814:	fc 2d       	mov	r31, r12
 816:	fa 19       	sub	r31, r10
 818:	af 2e       	mov	r10, r31
		if (write_size > size) write_size = size;
 81a:	ef 2f       	mov	r30, r31
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	6e 17       	cp	r22, r30
 820:	7f 07       	cpc	r23, r31
 822:	08 f4       	brcc	.+2      	; 0x826 <usb_serial_write+0xe0>
 824:	a6 2e       	mov	r10, r22
		size -= write_size;
 826:	6a 19       	sub	r22, r10
 828:	71 09       	sbc	r23, r1

		// write the packet
		switch (write_size) {
 82a:	ea 2d       	mov	r30, r10
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	e1 34       	cpi	r30, 0x41	; 65
 830:	f1 05       	cpc	r31, r1
 832:	08 f0       	brcs	.+2      	; 0x836 <usb_serial_write+0xf0>
 834:	c5 c0       	rjmp	.+394    	; 0x9c0 <usb_serial_write+0x27a>
 836:	ea 5a       	subi	r30, 0xAA	; 170
 838:	ff 4f       	sbci	r31, 0xFF	; 255
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	05 90       	lpm	r0, Z+
 840:	f4 91       	lpm	r31, Z+
 842:	e0 2d       	mov	r30, r0
 844:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
 846:	ad 90       	ld	r10, X+
 848:	f9 01       	movw	r30, r18
 84a:	a0 82       	st	Z, r10
			case 63: UEDATX = *buffer++;
 84c:	ad 90       	ld	r10, X+
 84e:	f9 01       	movw	r30, r18
 850:	a0 82       	st	Z, r10
			case 62: UEDATX = *buffer++;
 852:	ad 90       	ld	r10, X+
 854:	f9 01       	movw	r30, r18
 856:	a0 82       	st	Z, r10
			case 61: UEDATX = *buffer++;
 858:	ad 90       	ld	r10, X+
 85a:	f9 01       	movw	r30, r18
 85c:	a0 82       	st	Z, r10
			case 60: UEDATX = *buffer++;
 85e:	ad 90       	ld	r10, X+
 860:	f9 01       	movw	r30, r18
 862:	a0 82       	st	Z, r10
			case 59: UEDATX = *buffer++;
 864:	ad 90       	ld	r10, X+
 866:	f9 01       	movw	r30, r18
 868:	a0 82       	st	Z, r10
			case 58: UEDATX = *buffer++;
 86a:	ad 90       	ld	r10, X+
 86c:	f9 01       	movw	r30, r18
 86e:	a0 82       	st	Z, r10
			case 57: UEDATX = *buffer++;
 870:	ad 90       	ld	r10, X+
 872:	f9 01       	movw	r30, r18
 874:	a0 82       	st	Z, r10
			case 56: UEDATX = *buffer++;
 876:	ad 90       	ld	r10, X+
 878:	f9 01       	movw	r30, r18
 87a:	a0 82       	st	Z, r10
			case 55: UEDATX = *buffer++;
 87c:	ad 90       	ld	r10, X+
 87e:	f9 01       	movw	r30, r18
 880:	a0 82       	st	Z, r10
			case 54: UEDATX = *buffer++;
 882:	ad 90       	ld	r10, X+
 884:	f9 01       	movw	r30, r18
 886:	a0 82       	st	Z, r10
			case 53: UEDATX = *buffer++;
 888:	ad 90       	ld	r10, X+
 88a:	f9 01       	movw	r30, r18
 88c:	a0 82       	st	Z, r10
			case 52: UEDATX = *buffer++;
 88e:	ad 90       	ld	r10, X+
 890:	f9 01       	movw	r30, r18
 892:	a0 82       	st	Z, r10
			case 51: UEDATX = *buffer++;
 894:	ad 90       	ld	r10, X+
 896:	f9 01       	movw	r30, r18
 898:	a0 82       	st	Z, r10
			case 50: UEDATX = *buffer++;
 89a:	ad 90       	ld	r10, X+
 89c:	f9 01       	movw	r30, r18
 89e:	a0 82       	st	Z, r10
			case 49: UEDATX = *buffer++;
 8a0:	ad 90       	ld	r10, X+
 8a2:	f9 01       	movw	r30, r18
 8a4:	a0 82       	st	Z, r10
			case 48: UEDATX = *buffer++;
 8a6:	ad 90       	ld	r10, X+
 8a8:	f9 01       	movw	r30, r18
 8aa:	a0 82       	st	Z, r10
			case 47: UEDATX = *buffer++;
 8ac:	ad 90       	ld	r10, X+
 8ae:	f9 01       	movw	r30, r18
 8b0:	a0 82       	st	Z, r10
			case 46: UEDATX = *buffer++;
 8b2:	ad 90       	ld	r10, X+
 8b4:	f9 01       	movw	r30, r18
 8b6:	a0 82       	st	Z, r10
			case 45: UEDATX = *buffer++;
 8b8:	ad 90       	ld	r10, X+
 8ba:	f9 01       	movw	r30, r18
 8bc:	a0 82       	st	Z, r10
			case 44: UEDATX = *buffer++;
 8be:	ad 90       	ld	r10, X+
 8c0:	f9 01       	movw	r30, r18
 8c2:	a0 82       	st	Z, r10
			case 43: UEDATX = *buffer++;
 8c4:	ad 90       	ld	r10, X+
 8c6:	f9 01       	movw	r30, r18
 8c8:	a0 82       	st	Z, r10
			case 42: UEDATX = *buffer++;
 8ca:	ad 90       	ld	r10, X+
 8cc:	f9 01       	movw	r30, r18
 8ce:	a0 82       	st	Z, r10
			case 41: UEDATX = *buffer++;
 8d0:	ad 90       	ld	r10, X+
 8d2:	f9 01       	movw	r30, r18
 8d4:	a0 82       	st	Z, r10
			case 40: UEDATX = *buffer++;
 8d6:	ad 90       	ld	r10, X+
 8d8:	f9 01       	movw	r30, r18
 8da:	a0 82       	st	Z, r10
			case 39: UEDATX = *buffer++;
 8dc:	ad 90       	ld	r10, X+
 8de:	f9 01       	movw	r30, r18
 8e0:	a0 82       	st	Z, r10
			case 38: UEDATX = *buffer++;
 8e2:	ad 90       	ld	r10, X+
 8e4:	f9 01       	movw	r30, r18
 8e6:	a0 82       	st	Z, r10
			case 37: UEDATX = *buffer++;
 8e8:	ad 90       	ld	r10, X+
 8ea:	f9 01       	movw	r30, r18
 8ec:	a0 82       	st	Z, r10
			case 36: UEDATX = *buffer++;
 8ee:	ad 90       	ld	r10, X+
 8f0:	f9 01       	movw	r30, r18
 8f2:	a0 82       	st	Z, r10
			case 35: UEDATX = *buffer++;
 8f4:	ad 90       	ld	r10, X+
 8f6:	f9 01       	movw	r30, r18
 8f8:	a0 82       	st	Z, r10
			case 34: UEDATX = *buffer++;
 8fa:	ad 90       	ld	r10, X+
 8fc:	f9 01       	movw	r30, r18
 8fe:	a0 82       	st	Z, r10
			case 33: UEDATX = *buffer++;
 900:	ad 90       	ld	r10, X+
 902:	f9 01       	movw	r30, r18
 904:	a0 82       	st	Z, r10
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 906:	ad 90       	ld	r10, X+
 908:	f9 01       	movw	r30, r18
 90a:	a0 82       	st	Z, r10
			case 31: UEDATX = *buffer++;
 90c:	ad 90       	ld	r10, X+
 90e:	f9 01       	movw	r30, r18
 910:	a0 82       	st	Z, r10
			case 30: UEDATX = *buffer++;
 912:	ad 90       	ld	r10, X+
 914:	f9 01       	movw	r30, r18
 916:	a0 82       	st	Z, r10
			case 29: UEDATX = *buffer++;
 918:	ad 90       	ld	r10, X+
 91a:	f9 01       	movw	r30, r18
 91c:	a0 82       	st	Z, r10
			case 28: UEDATX = *buffer++;
 91e:	ad 90       	ld	r10, X+
 920:	f9 01       	movw	r30, r18
 922:	a0 82       	st	Z, r10
			case 27: UEDATX = *buffer++;
 924:	ad 90       	ld	r10, X+
 926:	f9 01       	movw	r30, r18
 928:	a0 82       	st	Z, r10
			case 26: UEDATX = *buffer++;
 92a:	ad 90       	ld	r10, X+
 92c:	f9 01       	movw	r30, r18
 92e:	a0 82       	st	Z, r10
			case 25: UEDATX = *buffer++;
 930:	ad 90       	ld	r10, X+
 932:	f9 01       	movw	r30, r18
 934:	a0 82       	st	Z, r10
			case 24: UEDATX = *buffer++;
 936:	ad 90       	ld	r10, X+
 938:	f9 01       	movw	r30, r18
 93a:	a0 82       	st	Z, r10
			case 23: UEDATX = *buffer++;
 93c:	ad 90       	ld	r10, X+
 93e:	f9 01       	movw	r30, r18
 940:	a0 82       	st	Z, r10
			case 22: UEDATX = *buffer++;
 942:	ad 90       	ld	r10, X+
 944:	f9 01       	movw	r30, r18
 946:	a0 82       	st	Z, r10
			case 21: UEDATX = *buffer++;
 948:	ad 90       	ld	r10, X+
 94a:	f9 01       	movw	r30, r18
 94c:	a0 82       	st	Z, r10
			case 20: UEDATX = *buffer++;
 94e:	ad 90       	ld	r10, X+
 950:	f9 01       	movw	r30, r18
 952:	a0 82       	st	Z, r10
			case 19: UEDATX = *buffer++;
 954:	ad 90       	ld	r10, X+
 956:	f9 01       	movw	r30, r18
 958:	a0 82       	st	Z, r10
			case 18: UEDATX = *buffer++;
 95a:	ad 90       	ld	r10, X+
 95c:	f9 01       	movw	r30, r18
 95e:	a0 82       	st	Z, r10
			case 17: UEDATX = *buffer++;
 960:	ad 90       	ld	r10, X+
 962:	f9 01       	movw	r30, r18
 964:	a0 82       	st	Z, r10
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 966:	ad 90       	ld	r10, X+
 968:	f9 01       	movw	r30, r18
 96a:	a0 82       	st	Z, r10
			case 15: UEDATX = *buffer++;
 96c:	ad 90       	ld	r10, X+
 96e:	f9 01       	movw	r30, r18
 970:	a0 82       	st	Z, r10
			case 14: UEDATX = *buffer++;
 972:	ad 90       	ld	r10, X+
 974:	f9 01       	movw	r30, r18
 976:	a0 82       	st	Z, r10
			case 13: UEDATX = *buffer++;
 978:	ad 90       	ld	r10, X+
 97a:	f9 01       	movw	r30, r18
 97c:	a0 82       	st	Z, r10
			case 12: UEDATX = *buffer++;
 97e:	ad 90       	ld	r10, X+
 980:	f9 01       	movw	r30, r18
 982:	a0 82       	st	Z, r10
			case 11: UEDATX = *buffer++;
 984:	ad 90       	ld	r10, X+
 986:	f9 01       	movw	r30, r18
 988:	a0 82       	st	Z, r10
			case 10: UEDATX = *buffer++;
 98a:	ad 90       	ld	r10, X+
 98c:	f9 01       	movw	r30, r18
 98e:	a0 82       	st	Z, r10
			case  9: UEDATX = *buffer++;
 990:	ad 90       	ld	r10, X+
 992:	f9 01       	movw	r30, r18
 994:	a0 82       	st	Z, r10
			#endif
			case  8: UEDATX = *buffer++;
 996:	ad 90       	ld	r10, X+
 998:	f9 01       	movw	r30, r18
 99a:	a0 82       	st	Z, r10
			case  7: UEDATX = *buffer++;
 99c:	ad 90       	ld	r10, X+
 99e:	f9 01       	movw	r30, r18
 9a0:	a0 82       	st	Z, r10
			case  6: UEDATX = *buffer++;
 9a2:	ad 90       	ld	r10, X+
 9a4:	f9 01       	movw	r30, r18
 9a6:	a0 82       	st	Z, r10
			case  5: UEDATX = *buffer++;
 9a8:	ad 90       	ld	r10, X+
 9aa:	f9 01       	movw	r30, r18
 9ac:	a0 82       	st	Z, r10
			case  4: UEDATX = *buffer++;
 9ae:	ad 90       	ld	r10, X+
 9b0:	f9 01       	movw	r30, r18
 9b2:	a0 82       	st	Z, r10
			case  3: UEDATX = *buffer++;
 9b4:	ad 90       	ld	r10, X+
 9b6:	f9 01       	movw	r30, r18
 9b8:	a0 82       	st	Z, r10
			case  2: UEDATX = *buffer++;
 9ba:	ad 90       	ld	r10, X+
 9bc:	f9 01       	movw	r30, r18
 9be:	a0 82       	st	Z, r10
			default:
			case  1: UEDATX = *buffer++;
 9c0:	ad 90       	ld	r10, X+
 9c2:	f9 01       	movw	r30, r18
 9c4:	a0 82       	st	Z, r10
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 9c6:	fc 01       	movw	r30, r24
 9c8:	a0 80       	ld	r10, Z
 9ca:	a5 fe       	sbrs	r10, 5
 9cc:	b0 82       	st	Z, r11
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 9ce:	d0 92 0a 01 	sts	0x010A, r13
		SREG = intr_state;
 9d2:	ff be       	out	0x3f, r15	; 63
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 9d4:	61 15       	cp	r22, r1
 9d6:	71 05       	cpc	r23, r1
 9d8:	09 f0       	breq	.+2      	; 0x9dc <usb_serial_write+0x296>
 9da:	f4 ce       	rjmp	.-536    	; 0x7c4 <usb_serial_write+0x7e>
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <usb_serial_write+0x2a8>
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	05 c0       	rjmp	.+10     	; 0x9ee <usb_serial_write+0x2a8>
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <usb_serial_write+0x2a8>
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 9e8:	8f ef       	ldi	r24, 0xFF	; 255
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee <usb_serial_write+0x2a8>
 9ec:	8f ef       	ldi	r24, 0xFF	; 255
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
}
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	1f 91       	pop	r17
 9f4:	0f 91       	pop	r16
 9f6:	ff 90       	pop	r15
 9f8:	ef 90       	pop	r14
 9fa:	df 90       	pop	r13
 9fc:	cf 90       	pop	r12
 9fe:	bf 90       	pop	r11
 a00:	af 90       	pop	r10
 a02:	9f 90       	pop	r9
 a04:	08 95       	ret

00000a06 <usb_serial_flush_output>:
// we can do is release the FIFO buffer for when the host wants it
void usb_serial_flush_output(void)
{
	uint8_t intr_state;

	intr_state = SREG;
 a06:	8f b7       	in	r24, 0x3f	; 63
	cli();
 a08:	f8 94       	cli
	if (transmit_flush_timer) {
 a0a:	90 91 0a 01 	lds	r25, 0x010A
 a0e:	99 23       	and	r25, r25
 a10:	41 f0       	breq	.+16     	; 0xa22 <usb_serial_flush_output+0x1c>
		UENUM = CDC_TX_ENDPOINT;
 a12:	94 e0       	ldi	r25, 0x04	; 4
 a14:	90 93 e9 00 	sts	0x00E9, r25
		UEINTX = 0x3A;
 a18:	9a e3       	ldi	r25, 0x3A	; 58
 a1a:	90 93 e8 00 	sts	0x00E8, r25
		transmit_flush_timer = 0;
 a1e:	10 92 0a 01 	sts	0x010A, r1
	}
	SREG = intr_state;
 a22:	8f bf       	out	0x3f, r24	; 63
}
 a24:	08 95       	ret

00000a26 <usb_serial_get_baud>:
// aren't actually used by USB at all (communication is always
// at full USB speed), but they are set by the host so we can
// set them properly if we're converting the USB to a real serial
// communication
uint32_t usb_serial_get_baud(void)
{
 a26:	60 91 01 01 	lds	r22, 0x0101
 a2a:	70 91 02 01 	lds	r23, 0x0102
	return *(uint32_t *)cdc_line_coding;
}
 a2e:	80 91 03 01 	lds	r24, 0x0103
 a32:	90 91 04 01 	lds	r25, 0x0104
 a36:	08 95       	ret

00000a38 <usb_serial_get_stopbits>:
uint8_t usb_serial_get_stopbits(void)
{
	return cdc_line_coding[4];
}
 a38:	80 91 05 01 	lds	r24, 0x0105
 a3c:	08 95       	ret

00000a3e <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
	return cdc_line_coding[5];
}
 a3e:	80 91 06 01 	lds	r24, 0x0106
 a42:	08 95       	ret

00000a44 <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
	return cdc_line_coding[6];
}
 a44:	80 91 07 01 	lds	r24, 0x0107
 a48:	08 95       	ret

00000a4a <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
 a4a:	80 91 09 01 	lds	r24, 0x0109
 a4e:	08 95       	ret

00000a50 <usb_serial_set_control>:
// would in real serial communication.
int8_t usb_serial_set_control(uint8_t signals)
{
	uint8_t intr_state;

	intr_state = SREG;
 a50:	2f b7       	in	r18, 0x3f	; 63
	cli();
 a52:	f8 94       	cli
	if (!usb_configuration) {
 a54:	90 91 08 01 	lds	r25, 0x0108
 a58:	99 23       	and	r25, r25
 a5a:	19 f4       	brne	.+6      	; 0xa62 <usb_serial_set_control+0x12>
		// we're not enumerated/configured
		SREG = intr_state;
 a5c:	2f bf       	out	0x3f, r18	; 63
		return -1;
 a5e:	8f ef       	ldi	r24, 0xFF	; 255
 a60:	08 95       	ret
	}

	UENUM = CDC_ACM_ENDPOINT;
 a62:	92 e0       	ldi	r25, 0x02	; 2
 a64:	90 93 e9 00 	sts	0x00E9, r25
	if (!(UEINTX & (1<<RWAL))) {
 a68:	90 91 e8 00 	lds	r25, 0x00E8
 a6c:	95 fd       	sbrc	r25, 5
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <usb_serial_set_control+0x26>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
 a70:	2f bf       	out	0x3f, r18	; 63
		return -1;
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	08 95       	ret
	}
	UEDATX = 0xA1;
 a76:	e1 ef       	ldi	r30, 0xF1	; 241
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	91 ea       	ldi	r25, 0xA1	; 161
 a7c:	90 83       	st	Z, r25
	UEDATX = 0x20;
 a7e:	90 e2       	ldi	r25, 0x20	; 32
 a80:	90 83       	st	Z, r25
	UEDATX = 0;
 a82:	10 82       	st	Z, r1
	UEDATX = 0;
 a84:	10 82       	st	Z, r1
	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 a86:	10 82       	st	Z, r1
	UEDATX = 0;
 a88:	10 82       	st	Z, r1
	UEDATX = 1;
 a8a:	91 e0       	ldi	r25, 0x01	; 1
 a8c:	90 83       	st	Z, r25
	UEDATX = 0;
 a8e:	10 82       	st	Z, r1
	UEDATX = signals;
 a90:	80 83       	st	Z, r24
	UEINTX = 0x3A;
 a92:	8a e3       	ldi	r24, 0x3A	; 58
 a94:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 a98:	2f bf       	out	0x3f, r18	; 63
	return 0;
 a9a:	80 e0       	ldi	r24, 0x00	; 0
}
 a9c:	08 95       	ret

00000a9e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	8f 93       	push	r24
 aaa:	9f 93       	push	r25
 aac:	ef 93       	push	r30
 aae:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 ab0:	e1 ee       	ldi	r30, 0xE1	; 225
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	80 81       	ld	r24, Z
        UDINT = 0;
 ab6:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 ab8:	83 ff       	sbrs	r24, 3
 aba:	11 c0       	rjmp	.+34     	; 0xade <__vector_10+0x40>
		UENUM = 0;
 abc:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 ac0:	91 e0       	ldi	r25, 0x01	; 1
 ac2:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 ac6:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 aca:	92 e1       	ldi	r25, 0x12	; 18
 acc:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 ad0:	98 e0       	ldi	r25, 0x08	; 8
 ad2:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 ad6:	10 92 08 01 	sts	0x0108, r1
		cdc_line_rtsdtr = 0;
 ada:	10 92 09 01 	sts	0x0109, r1
        }
	if (intbits & (1<<SOFI)) {
 ade:	82 ff       	sbrs	r24, 2
 ae0:	13 c0       	rjmp	.+38     	; 0xb08 <__stack+0x9>
		if (usb_configuration) {
 ae2:	80 91 08 01 	lds	r24, 0x0108
 ae6:	88 23       	and	r24, r24
 ae8:	79 f0       	breq	.+30     	; 0xb08 <__stack+0x9>
			t = transmit_flush_timer;
 aea:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
 aee:	88 23       	and	r24, r24
 af0:	59 f0       	breq	.+22     	; 0xb08 <__stack+0x9>
				transmit_flush_timer = --t;
 af2:	81 50       	subi	r24, 0x01	; 1
 af4:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
 af8:	88 23       	and	r24, r24
 afa:	31 f4       	brne	.+12     	; 0xb08 <__stack+0x9>
					UENUM = CDC_TX_ENDPOINT;
 afc:	84 e0       	ldi	r24, 0x04	; 4
 afe:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 b02:	8a e3       	ldi	r24, 0x3A	; 58
 b04:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 b08:	ff 91       	pop	r31
 b0a:	ef 91       	pop	r30
 b0c:	9f 91       	pop	r25
 b0e:	8f 91       	pop	r24
 b10:	0f 90       	pop	r0
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	0f 90       	pop	r0
 b16:	1f 90       	pop	r1
 b18:	18 95       	reti

00000b1a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 b1a:	1f 92       	push	r1
 b1c:	0f 92       	push	r0
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	0f 92       	push	r0
 b22:	11 24       	eor	r1, r1
 b24:	ef 92       	push	r14
 b26:	ff 92       	push	r15
 b28:	0f 93       	push	r16
 b2a:	1f 93       	push	r17
 b2c:	2f 93       	push	r18
 b2e:	3f 93       	push	r19
 b30:	4f 93       	push	r20
 b32:	5f 93       	push	r21
 b34:	6f 93       	push	r22
 b36:	7f 93       	push	r23
 b38:	8f 93       	push	r24
 b3a:	9f 93       	push	r25
 b3c:	af 93       	push	r26
 b3e:	bf 93       	push	r27
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	ef 93       	push	r30
 b46:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 b48:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 b4c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 b50:	83 ff       	sbrs	r24, 3
 b52:	5c c1       	rjmp	.+696    	; 0xe0c <__vector_11+0x2f2>
                bmRequestType = UEDATX;
 b54:	e1 ef       	ldi	r30, 0xF1	; 241
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	a0 81       	ld	r26, Z
                bRequest = UEDATX;
 b5a:	20 81       	ld	r18, Z
                wValue = UEDATX;
 b5c:	40 81       	ld	r20, Z
 b5e:	50 e0       	ldi	r21, 0x00	; 0
                wValue |= (UEDATX << 8);
 b60:	30 81       	ld	r19, Z
 b62:	93 2f       	mov	r25, r19
 b64:	80 e0       	ldi	r24, 0x00	; 0
 b66:	48 2b       	or	r20, r24
 b68:	59 2b       	or	r21, r25
                wIndex = UEDATX;
 b6a:	60 81       	ld	r22, Z
 b6c:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 b6e:	30 81       	ld	r19, Z
 b70:	93 2f       	mov	r25, r19
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	68 2b       	or	r22, r24
 b76:	79 2b       	or	r23, r25
                wLength = UEDATX;
 b78:	e0 80       	ld	r14, Z
                wLength |= (UEDATX << 8);
 b7a:	f0 80       	ld	r15, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 b7c:	82 ef       	ldi	r24, 0xF2	; 242
 b7e:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 b82:	26 30       	cpi	r18, 0x06	; 6
 b84:	09 f0       	breq	.+2      	; 0xb88 <__vector_11+0x6e>
 b86:	68 c0       	rjmp	.+208    	; 0xc58 <__vector_11+0x13e>
			list = (const uint8_t *)descriptor_list;
 b88:	ae e2       	ldi	r26, 0x2E	; 46
 b8a:	b1 e0       	ldi	r27, 0x01	; 1

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 b8c:	cd 01       	movw	r24, r26
 b8e:	07 96       	adiw	r24, 0x07	; 7
 b90:	9d 01       	movw	r18, r26
 b92:	2e 5f       	subi	r18, 0xFE	; 254
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	d1 96       	adiw	r26, 0x31	; 49
 b98:	04 c0       	rjmp	.+8      	; 0xba2 <__vector_11+0x88>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 b9a:	81 e2       	ldi	r24, 0x21	; 33
 b9c:	80 93 eb 00 	sts	0x00EB, r24
					return;
 ba0:	38 c1       	rjmp	.+624    	; 0xe12 <__vector_11+0x2f8>
 ba2:	fc 01       	movw	r30, r24
 ba4:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 ba6:	c5 91       	lpm	r28, Z+
 ba8:	d4 91       	lpm	r29, Z+
				if (desc_val != wValue) {
 baa:	4c 17       	cp	r20, r28
 bac:	5d 07       	cpc	r21, r29
 bae:	11 f5       	brne	.+68     	; 0xbf4 <__vector_11+0xda>
 bb0:	89 01       	movw	r16, r18
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 bb2:	f9 01       	movw	r30, r18
 bb4:	c5 91       	lpm	r28, Z+
 bb6:	d4 91       	lpm	r29, Z+
				if (desc_val != wIndex) {
 bb8:	6c 17       	cp	r22, r28
 bba:	7d 07       	cpc	r23, r29
 bbc:	d9 f4       	brne	.+54     	; 0xbf4 <__vector_11+0xda>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 bbe:	0e 5f       	subi	r16, 0xFE	; 254
 bc0:	1f 4f       	sbci	r17, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 bc2:	f8 01       	movw	r30, r16
 bc4:	85 91       	lpm	r24, Z+
 bc6:	94 91       	lpm	r25, Z+
 bc8:	28 2f       	mov	r18, r24
 bca:	39 2f       	mov	r19, r25
				list += 2;
 bcc:	0e 5f       	subi	r16, 0xFE	; 254
 bce:	1f 4f       	sbci	r17, 0xFF	; 255
				desc_length = pgm_read_byte(list);
 bd0:	f8 01       	movw	r30, r16
 bd2:	04 91       	lpm	r16, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 bd4:	4e 2d       	mov	r20, r14
 bd6:	50 e0       	ldi	r21, 0x00	; 0
                wLength |= (UEDATX << 8);
 bd8:	9f 2d       	mov	r25, r15
 bda:	80 e0       	ldi	r24, 0x00	; 0
 bdc:	84 2b       	or	r24, r20
 bde:	95 2b       	or	r25, r21
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 be0:	8f 3f       	cpi	r24, 0xFF	; 255
 be2:	91 05       	cpc	r25, r1
 be4:	19 f0       	breq	.+6      	; 0xbec <__vector_11+0xd2>
 be6:	10 f0       	brcs	.+4      	; 0xbec <__vector_11+0xd2>
 be8:	8f ef       	ldi	r24, 0xFF	; 255
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	80 17       	cp	r24, r16
 bee:	48 f4       	brcc	.+18     	; 0xc02 <__vector_11+0xe8>
 bf0:	08 2f       	mov	r16, r24
 bf2:	07 c0       	rjmp	.+14     	; 0xc02 <__vector_11+0xe8>
 bf4:	07 96       	adiw	r24, 0x07	; 7
 bf6:	29 5f       	subi	r18, 0xF9	; 249
 bf8:	3f 4f       	sbci	r19, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 bfa:	8a 17       	cp	r24, r26
 bfc:	9b 07       	cpc	r25, r27
 bfe:	89 f6       	brne	.-94     	; 0xba2 <__vector_11+0x88>
 c00:	cc cf       	rjmp	.-104    	; 0xb9a <__vector_11+0x80>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 c02:	c8 ee       	ldi	r28, 0xE8	; 232
 c04:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c06:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 c08:	a1 ef       	ldi	r26, 0xF1	; 241
 c0a:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 c0c:	70 e1       	ldi	r23, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 c0e:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	ac 01       	movw	r20, r24
 c14:	45 70       	andi	r20, 0x05	; 5
 c16:	50 70       	andi	r21, 0x00	; 0
 c18:	41 15       	cp	r20, r1
 c1a:	51 05       	cpc	r21, r1
 c1c:	c1 f3       	breq	.-16     	; 0xc0e <__vector_11+0xf4>
				if (i & (1<<RXOUTI)) return;	// abort
 c1e:	82 fd       	sbrc	r24, 2
 c20:	f8 c0       	rjmp	.+496    	; 0xe12 <__vector_11+0x2f8>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 c22:	50 2f       	mov	r21, r16
 c24:	01 31       	cpi	r16, 0x11	; 17
 c26:	08 f0       	brcs	.+2      	; 0xc2a <__vector_11+0x110>
 c28:	57 2f       	mov	r21, r23
				for (i = n; i; i--) {
 c2a:	55 23       	and	r21, r21
 c2c:	71 f0       	breq	.+28     	; 0xc4a <__vector_11+0x130>
 c2e:	c9 01       	movw	r24, r18
 c30:	45 2f       	mov	r20, r21
 c32:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 c34:	01 96       	adiw	r24, 0x01	; 1
 c36:	e4 91       	lpm	r30, Z+
 c38:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 c3a:	41 50       	subi	r20, 0x01	; 1
 c3c:	d1 f7       	brne	.-12     	; 0xc32 <__vector_11+0x118>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 c3e:	85 2f       	mov	r24, r21
 c40:	81 50       	subi	r24, 0x01	; 1
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	01 96       	adiw	r24, 0x01	; 1
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 c46:	28 0f       	add	r18, r24
 c48:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 c4a:	05 1b       	sub	r16, r21
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c4c:	68 83       	st	Y, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 c4e:	00 23       	and	r16, r16
 c50:	f1 f6       	brne	.-68     	; 0xc0e <__vector_11+0xf4>
 c52:	50 31       	cpi	r21, 0x10	; 16
 c54:	e1 f2       	breq	.-72     	; 0xc0e <__vector_11+0xf4>
 c56:	dd c0       	rjmp	.+442    	; 0xe12 <__vector_11+0x2f8>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 c58:	25 30       	cpi	r18, 0x05	; 5
 c5a:	61 f4       	brne	.+24     	; 0xc74 <__vector_11+0x15a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c5c:	8e ef       	ldi	r24, 0xFE	; 254
 c5e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 c62:	e8 ee       	ldi	r30, 0xE8	; 232
 c64:	f0 e0       	ldi	r31, 0x00	; 0
 c66:	80 81       	ld	r24, Z
 c68:	80 ff       	sbrs	r24, 0
 c6a:	fd cf       	rjmp	.-6      	; 0xc66 <__vector_11+0x14c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 c6c:	40 68       	ori	r20, 0x80	; 128
 c6e:	40 93 e3 00 	sts	0x00E3, r20
			return;
 c72:	cf c0       	rjmp	.+414    	; 0xe12 <__vector_11+0x2f8>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 c74:	29 30       	cpi	r18, 0x09	; 9
 c76:	99 f5       	brne	.+102    	; 0xcde <__vector_11+0x1c4>
 c78:	aa 23       	and	r26, r26
 c7a:	89 f5       	brne	.+98     	; 0xcde <__vector_11+0x1c4>
			usb_configuration = wValue;
 c7c:	40 93 08 01 	sts	0x0108, r20
			cdc_line_rtsdtr = 0;
 c80:	10 92 09 01 	sts	0x0109, r1
			transmit_flush_timer = 0;
 c84:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c88:	8e ef       	ldi	r24, 0xFE	; 254
 c8a:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 c8e:	01 e0       	ldi	r16, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 c90:	88 e5       	ldi	r24, 0x58	; 88
 c92:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 c94:	c9 ee       	ldi	r28, 0xE9	; 233
 c96:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 c98:	ab ee       	ldi	r26, 0xEB	; 235
 c9a:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 c9c:	6c ee       	ldi	r22, 0xEC	; 236
 c9e:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 ca0:	4d ee       	ldi	r20, 0xED	; 237
 ca2:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 ca4:	08 83       	st	Y, r16
				en = pgm_read_byte(cfg++);
 ca6:	fc 01       	movw	r30, r24
 ca8:	01 96       	adiw	r24, 0x01	; 1
 caa:	e4 91       	lpm	r30, Z+
				UECONX = en;
 cac:	ec 93       	st	X, r30
				if (en) {
 cae:	ee 23       	and	r30, r30
 cb0:	69 f0       	breq	.+26     	; 0xccc <__vector_11+0x1b2>
					UECFG0X = pgm_read_byte(cfg++);
 cb2:	9c 01       	movw	r18, r24
 cb4:	2f 5f       	subi	r18, 0xFF	; 255
 cb6:	3f 4f       	sbci	r19, 0xFF	; 255
 cb8:	fc 01       	movw	r30, r24
 cba:	84 91       	lpm	r24, Z+
 cbc:	fb 01       	movw	r30, r22
 cbe:	80 83       	st	Z, r24
					UECFG1X = pgm_read_byte(cfg++);
 cc0:	c9 01       	movw	r24, r18
 cc2:	01 96       	adiw	r24, 0x01	; 1
 cc4:	f9 01       	movw	r30, r18
 cc6:	24 91       	lpm	r18, Z+
 cc8:	fa 01       	movw	r30, r20
 cca:	20 83       	st	Z, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 ccc:	0f 5f       	subi	r16, 0xFF	; 255
 cce:	05 30       	cpi	r16, 0x05	; 5
 cd0:	49 f7       	brne	.-46     	; 0xca4 <__vector_11+0x18a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 cd2:	ea ee       	ldi	r30, 0xEA	; 234
 cd4:	f0 e0       	ldi	r31, 0x00	; 0
 cd6:	8e e1       	ldi	r24, 0x1E	; 30
 cd8:	80 83       	st	Z, r24
        		UERST = 0;
 cda:	10 82       	st	Z, r1
			return;
 cdc:	9a c0       	rjmp	.+308    	; 0xe12 <__vector_11+0x2f8>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 cde:	28 30       	cpi	r18, 0x08	; 8
 ce0:	79 f4       	brne	.+30     	; 0xd00 <__vector_11+0x1e6>
 ce2:	a0 38       	cpi	r26, 0x80	; 128
 ce4:	69 f4       	brne	.+26     	; 0xd00 <__vector_11+0x1e6>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 ce6:	e8 ee       	ldi	r30, 0xE8	; 232
 ce8:	f0 e0       	ldi	r31, 0x00	; 0
 cea:	80 81       	ld	r24, Z
 cec:	80 ff       	sbrs	r24, 0
 cee:	fd cf       	rjmp	.-6      	; 0xcea <__vector_11+0x1d0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 cf0:	80 91 08 01 	lds	r24, 0x0108
 cf4:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 cf8:	8e ef       	ldi	r24, 0xFE	; 254
 cfa:	80 93 e8 00 	sts	0x00E8, r24
 cfe:	89 c0       	rjmp	.+274    	; 0xe12 <__vector_11+0x2f8>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 d00:	21 32       	cpi	r18, 0x21	; 33
 d02:	b1 f4       	brne	.+44     	; 0xd30 <__vector_11+0x216>
 d04:	a1 3a       	cpi	r26, 0xA1	; 161
 d06:	a1 f4       	brne	.+40     	; 0xd30 <__vector_11+0x216>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 d08:	e8 ee       	ldi	r30, 0xE8	; 232
 d0a:	f0 e0       	ldi	r31, 0x00	; 0
 d0c:	80 81       	ld	r24, Z
 d0e:	80 ff       	sbrs	r24, 0
 d10:	fd cf       	rjmp	.-6      	; 0xd0c <__vector_11+0x1f2>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 d12:	e1 e0       	ldi	r30, 0x01	; 1
 d14:	f1 e0       	ldi	r31, 0x01	; 1
 d16:	cf 01       	movw	r24, r30
 d18:	07 96       	adiw	r24, 0x07	; 7
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 d1a:	a1 ef       	ldi	r26, 0xF1	; 241
 d1c:	b0 e0       	ldi	r27, 0x00	; 0
 d1e:	21 91       	ld	r18, Z+
 d20:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 d22:	e8 17       	cp	r30, r24
 d24:	f9 07       	cpc	r31, r25
 d26:	d9 f7       	brne	.-10     	; 0xd1e <__vector_11+0x204>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d28:	8e ef       	ldi	r24, 0xFE	; 254
 d2a:	80 93 e8 00 	sts	0x00E8, r24
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
			}
			usb_send_in();
			return;
 d2e:	71 c0       	rjmp	.+226    	; 0xe12 <__vector_11+0x2f8>
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 d30:	20 32       	cpi	r18, 0x20	; 32
 d32:	c9 f4       	brne	.+50     	; 0xd66 <__vector_11+0x24c>
 d34:	a1 32       	cpi	r26, 0x21	; 33
 d36:	b9 f4       	brne	.+46     	; 0xd66 <__vector_11+0x24c>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 d38:	e8 ee       	ldi	r30, 0xE8	; 232
 d3a:	f0 e0       	ldi	r31, 0x00	; 0
 d3c:	80 81       	ld	r24, Z
 d3e:	82 ff       	sbrs	r24, 2
 d40:	fd cf       	rjmp	.-6      	; 0xd3c <__vector_11+0x222>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 d42:	e1 e0       	ldi	r30, 0x01	; 1
 d44:	f1 e0       	ldi	r31, 0x01	; 1
 d46:	cf 01       	movw	r24, r30
 d48:	07 96       	adiw	r24, 0x07	; 7
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 d4a:	a1 ef       	ldi	r26, 0xF1	; 241
 d4c:	b0 e0       	ldi	r27, 0x00	; 0
 d4e:	2c 91       	ld	r18, X
 d50:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 d52:	e8 17       	cp	r30, r24
 d54:	f9 07       	cpc	r31, r25
 d56:	d9 f7       	brne	.-10     	; 0xd4e <__vector_11+0x234>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 d58:	e8 ee       	ldi	r30, 0xE8	; 232
 d5a:	f0 e0       	ldi	r31, 0x00	; 0
 d5c:	8b ef       	ldi	r24, 0xFB	; 251
 d5e:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d60:	8e ef       	ldi	r24, 0xFE	; 254
 d62:	80 83       	st	Z, r24
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			return;
 d64:	56 c0       	rjmp	.+172    	; 0xe12 <__vector_11+0x2f8>
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 d66:	22 32       	cpi	r18, 0x22	; 34
 d68:	69 f4       	brne	.+26     	; 0xd84 <__vector_11+0x26a>
 d6a:	a1 32       	cpi	r26, 0x21	; 33
 d6c:	59 f4       	brne	.+22     	; 0xd84 <__vector_11+0x26a>
			cdc_line_rtsdtr = wValue;
 d6e:	40 93 09 01 	sts	0x0109, r20


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 d72:	e8 ee       	ldi	r30, 0xE8	; 232
 d74:	f0 e0       	ldi	r31, 0x00	; 0
 d76:	80 81       	ld	r24, Z
 d78:	80 ff       	sbrs	r24, 0
 d7a:	fd cf       	rjmp	.-6      	; 0xd76 <__vector_11+0x25c>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d7c:	8e ef       	ldi	r24, 0xFE	; 254
 d7e:	80 93 e8 00 	sts	0x00E8, r24
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
 d82:	47 c0       	rjmp	.+142    	; 0xe12 <__vector_11+0x2f8>
		}
		if (bRequest == GET_STATUS) {
 d84:	22 23       	and	r18, r18
 d86:	d1 f4       	brne	.+52     	; 0xdbc <__vector_11+0x2a2>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 d88:	e8 ee       	ldi	r30, 0xE8	; 232
 d8a:	f0 e0       	ldi	r31, 0x00	; 0
 d8c:	80 81       	ld	r24, Z
 d8e:	80 ff       	sbrs	r24, 0
 d90:	fd cf       	rjmp	.-6      	; 0xd8c <__vector_11+0x272>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 d92:	a2 38       	cpi	r26, 0x82	; 130
 d94:	51 f4       	brne	.+20     	; 0xdaa <__vector_11+0x290>
				UENUM = wIndex;
 d96:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 d9a:	90 91 eb 00 	lds	r25, 0x00EB
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 d9e:	81 e0       	ldi	r24, 0x01	; 1
 da0:	95 ff       	sbrs	r25, 5
 da2:	80 e0       	ldi	r24, 0x00	; 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
 da4:	10 92 e9 00 	sts	0x00E9, r1
 da8:	01 c0       	rjmp	.+2      	; 0xdac <__vector_11+0x292>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 daa:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 dac:	e1 ef       	ldi	r30, 0xF1	; 241
 dae:	f0 e0       	ldi	r31, 0x00	; 0
 db0:	80 83       	st	Z, r24
			UEDATX = 0;
 db2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 db4:	8e ef       	ldi	r24, 0xFE	; 254
 db6:	80 93 e8 00 	sts	0x00E8, r24
 dba:	2b c0       	rjmp	.+86     	; 0xe12 <__vector_11+0x2f8>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 dbc:	21 30       	cpi	r18, 0x01	; 1
 dbe:	11 f0       	breq	.+4      	; 0xdc4 <__vector_11+0x2aa>
 dc0:	23 30       	cpi	r18, 0x03	; 3
 dc2:	21 f5       	brne	.+72     	; 0xe0c <__vector_11+0x2f2>
		  && bmRequestType == 0x02 && wValue == 0) {
 dc4:	a2 30       	cpi	r26, 0x02	; 2
 dc6:	11 f5       	brne	.+68     	; 0xe0c <__vector_11+0x2f2>
 dc8:	41 15       	cp	r20, r1
 dca:	51 05       	cpc	r21, r1
 dcc:	f9 f4       	brne	.+62     	; 0xe0c <__vector_11+0x2f2>
			i = wIndex & 0x7F;
 dce:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 dd0:	86 2f       	mov	r24, r22
 dd2:	81 50       	subi	r24, 0x01	; 1
 dd4:	84 30       	cpi	r24, 0x04	; 4
 dd6:	d0 f4       	brcc	.+52     	; 0xe0c <__vector_11+0x2f2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 dd8:	8e ef       	ldi	r24, 0xFE	; 254
 dda:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 dde:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
 de2:	23 30       	cpi	r18, 0x03	; 3
 de4:	21 f4       	brne	.+8      	; 0xdee <__vector_11+0x2d4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 de6:	81 e2       	ldi	r24, 0x21	; 33
 de8:	80 93 eb 00 	sts	0x00EB, r24
 dec:	12 c0       	rjmp	.+36     	; 0xe12 <__vector_11+0x2f8>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 dee:	89 e1       	ldi	r24, 0x19	; 25
 df0:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 df4:	81 e0       	ldi	r24, 0x01	; 1
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	02 c0       	rjmp	.+4      	; 0xdfe <__vector_11+0x2e4>
 dfa:	88 0f       	add	r24, r24
 dfc:	99 1f       	adc	r25, r25
 dfe:	6a 95       	dec	r22
 e00:	e2 f7       	brpl	.-8      	; 0xdfa <__vector_11+0x2e0>
 e02:	ea ee       	ldi	r30, 0xEA	; 234
 e04:	f0 e0       	ldi	r31, 0x00	; 0
 e06:	80 83       	st	Z, r24
					UERST = 0;
 e08:	10 82       	st	Z, r1
 e0a:	03 c0       	rjmp	.+6      	; 0xe12 <__vector_11+0x2f8>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 e0c:	81 e2       	ldi	r24, 0x21	; 33
 e0e:	80 93 eb 00 	sts	0x00EB, r24
}
 e12:	ff 91       	pop	r31
 e14:	ef 91       	pop	r30
 e16:	df 91       	pop	r29
 e18:	cf 91       	pop	r28
 e1a:	bf 91       	pop	r27
 e1c:	af 91       	pop	r26
 e1e:	9f 91       	pop	r25
 e20:	8f 91       	pop	r24
 e22:	7f 91       	pop	r23
 e24:	6f 91       	pop	r22
 e26:	5f 91       	pop	r21
 e28:	4f 91       	pop	r20
 e2a:	3f 91       	pop	r19
 e2c:	2f 91       	pop	r18
 e2e:	1f 91       	pop	r17
 e30:	0f 91       	pop	r16
 e32:	ff 90       	pop	r15
 e34:	ef 90       	pop	r14
 e36:	0f 90       	pop	r0
 e38:	0f be       	out	0x3f, r0	; 63
 e3a:	0f 90       	pop	r0
 e3c:	1f 90       	pop	r1
 e3e:	18 95       	reti

00000e40 <__vector_36>:

static uint8_t data = 0x01;
static uint8_t slaveaddy = 0x01;

ISR(TWI_vect)
{
 e40:	1f 92       	push	r1
 e42:	0f 92       	push	r0
 e44:	0f b6       	in	r0, 0x3f	; 63
 e46:	0f 92       	push	r0
 e48:	11 24       	eor	r1, r1
 e4a:	2f 93       	push	r18
 e4c:	3f 93       	push	r19
 e4e:	4f 93       	push	r20
 e50:	5f 93       	push	r21
 e52:	6f 93       	push	r22
 e54:	7f 93       	push	r23
 e56:	8f 93       	push	r24
 e58:	9f 93       	push	r25
 e5a:	af 93       	push	r26
 e5c:	bf 93       	push	r27
 e5e:	ef 93       	push	r30
 e60:	ff 93       	push	r31
	uint8_t tw_status = TWSR & MASK;
 e62:	80 91 b9 00 	lds	r24, 0x00B9
 e66:	88 7f       	andi	r24, 0xF8	; 248
	switch(tw_status)
 e68:	88 32       	cpi	r24, 0x28	; 40
 e6a:	19 f1       	breq	.+70     	; 0xeb2 <__vector_36+0x72>
 e6c:	89 32       	cpi	r24, 0x29	; 41
 e6e:	38 f4       	brcc	.+14     	; 0xe7e <__vector_36+0x3e>
 e70:	88 31       	cpi	r24, 0x18	; 24
 e72:	a9 f0       	breq	.+42     	; 0xe9e <__vector_36+0x5e>
 e74:	80 32       	cpi	r24, 0x20	; 32
 e76:	c9 f0       	breq	.+50     	; 0xeaa <__vector_36+0x6a>
 e78:	88 30       	cpi	r24, 0x08	; 8
 e7a:	41 f5       	brne	.+80     	; 0xecc <__vector_36+0x8c>
 e7c:	07 c0       	rjmp	.+14     	; 0xe8c <__vector_36+0x4c>
 e7e:	88 34       	cpi	r24, 0x48	; 72
 e80:	51 f0       	breq	.+20     	; 0xe96 <__vector_36+0x56>
 e82:	88 35       	cpi	r24, 0x58	; 88
 e84:	01 f1       	breq	.+64     	; 0xec6 <__vector_36+0x86>
 e86:	80 33       	cpi	r24, 0x30	; 48
 e88:	09 f5       	brne	.+66     	; 0xecc <__vector_36+0x8c>
 e8a:	19 c0       	rjmp	.+50     	; 0xebe <__vector_36+0x7e>
	{
		//Successfully transmitted start condition
		case MASTER_START_TRANSMITTED:
		{
			twi_master_sla_sendAddress(slaveaddy, 0);					// broadcast slave address
 e8c:	81 e0       	ldi	r24, 0x01	; 1
 e8e:	60 e0       	ldi	r22, 0x00	; 0
 e90:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_master_sla_sendAddress>
			break;
 e94:	1b c0       	rjmp	.+54     	; 0xecc <__vector_36+0x8c>
		{
			break;
		}
		case MASTER_SLA_R_NACK_RECIEVED:
		{
			error_handler(1);											// error occurred
 e96:	81 e0       	ldi	r24, 0x01	; 1
 e98:	0e 94 28 01 	call	0x250	; 0x250 <error_handler>
			break;
 e9c:	17 c0       	rjmp	.+46     	; 0xecc <__vector_36+0x8c>
		}
		case MASTER_SLA_W_ACK_RECIEVED:
		{
			TWCR |= (1<<TWINT);
 e9e:	ec eb       	ldi	r30, 0xBC	; 188
 ea0:	f0 e0       	ldi	r31, 0x00	; 0
 ea2:	80 81       	ld	r24, Z
 ea4:	80 68       	ori	r24, 0x80	; 128
 ea6:	80 83       	st	Z, r24
			break;
 ea8:	11 c0       	rjmp	.+34     	; 0xecc <__vector_36+0x8c>
		}
		case MASTER_SLA_W_NACK_RECIEVED:
		{
			error_handler(1);											// error occurred
 eaa:	81 e0       	ldi	r24, 0x01	; 1
 eac:	0e 94 28 01 	call	0x250	; 0x250 <error_handler>
			break;
 eb0:	0d c0       	rjmp	.+26     	; 0xecc <__vector_36+0x8c>
		}
		case MASTER_DATA_TX_ACK_RECIEVED:
		{
			twi_master_sendData(data);
 eb2:	81 e0       	ldi	r24, 0x01	; 1
 eb4:	0e 94 87 02 	call	0x50e	; 0x50e <twi_master_sendData>
			twi_master_stop_condition();
 eb8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <twi_master_stop_condition>
			break;
 ebc:	07 c0       	rjmp	.+14     	; 0xecc <__vector_36+0x8c>
		}
		case MASTER_DATA_TX_NACK_RECIEVED:
		{
			error_handler(1);
 ebe:	81 e0       	ldi	r24, 0x01	; 1
 ec0:	0e 94 28 01 	call	0x250	; 0x250 <error_handler>
			break;
 ec4:	03 c0       	rjmp	.+6      	; 0xecc <__vector_36+0x8c>
		}
		case MASTER_DATA_RX_NACK_TRANSMITTED:
		{
			error_handler(1);													// error occurred	
 ec6:	81 e0       	ldi	r24, 0x01	; 1
 ec8:	0e 94 28 01 	call	0x250	; 0x250 <error_handler>
		default:
		{
			break;
		}
	}
}
 ecc:	ff 91       	pop	r31
 ece:	ef 91       	pop	r30
 ed0:	bf 91       	pop	r27
 ed2:	af 91       	pop	r26
 ed4:	9f 91       	pop	r25
 ed6:	8f 91       	pop	r24
 ed8:	7f 91       	pop	r23
 eda:	6f 91       	pop	r22
 edc:	5f 91       	pop	r21
 ede:	4f 91       	pop	r20
 ee0:	3f 91       	pop	r19
 ee2:	2f 91       	pop	r18
 ee4:	0f 90       	pop	r0
 ee6:	0f be       	out	0x3f, r0	; 63
 ee8:	0f 90       	pop	r0
 eea:	1f 90       	pop	r1
 eec:	18 95       	reti

00000eee <main>:


int main(void)
{
	//CPU_PRESCALE(0);
	sei();
 eee:	78 94       	sei
	error_init(ERROR_PORT);	
 ef0:	81 e0       	ldi	r24, 0x01	; 1
 ef2:	0e 94 1b 01 	call	0x236	; 0x236 <error_init>
	twi_master_init();
 ef6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <twi_master_init>
	twi_master_start_condition();
 efa:	0e 94 6f 02 	call	0x4de	; 0x4de <twi_master_start_condition>
 efe:	ff cf       	rjmp	.-2      	; 0xefe <main+0x10>

00000f00 <_exit>:
 f00:	f8 94       	cli

00000f02 <__stop_program>:
 f02:	ff cf       	rjmp	.-2      	; 0xf02 <__stop_program>
